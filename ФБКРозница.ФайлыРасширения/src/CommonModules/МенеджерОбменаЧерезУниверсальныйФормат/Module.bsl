

&Вместо("ЗаполнитьПравилаОбработкиДанных")
Процедура Расш1_ЗаполнитьПравилаОбработкиДанных(НаправлениеОбмена, ПравилаОбработкиДанных)
	Если НаправлениеОбмена = "Отправка" Тогда
		Если ПравилаОбработкиДанных.Колонки.Найти("ОчисткаДанных") = Неопределено Тогда
			ПравилаОбработкиДанных.Колонки.Добавить("ОчисткаДанных");
		КонецЕсли;
			
	ИначеЕсли НаправлениеОбмена = "Получение" Тогда
		          ДобавитьПОД_Справочник_Организации_Получение(ПравилаОбработкиДанных);
				  ДобавитьПОД_Справочник_Подразделения_Получение(ПравилаОбработкиДанных);
				  ДобавитьПОД_Справочник_Валюты_Получение(ПравилаОбработкиДанных);
				//ДобавитьПОД_Справочник_ЕдиницыИзмерения(ПравилаОбработкиДанных);
				  ДобавитьПОД_Справочник_Номенклатура_Получение(ПравилаОбработкиДанных);
				  ДобавитьПОД_Справочник_Склады_Получение(ПравилаОбработкиДанных);
				  ДобавитьПОД_Справочник_ТипыЦен(ПравилаОбработкиДанных);
				  ДобавитьПОД_Справочник_Контрагенты_Получение(ПравилаОбработкиДанных);
	              ДобавитьПОД_Справочник_СтатьиДоходов_Получение(ПравилаОбработкиДанных);
				  ДобавитьПОД_Справочник_СтраныМира_Получение(ПравилаОбработкиДанных);

				  ДобавитьПОД_Документ_ОтчетОРозничныхПродажах_Получение(ПравилаОбработкиДанных);
				  ДобавитьПОД_Документ_ВозвратТоваровОтПокупателя_Получение(ПравилаОбработкиДанных);
	              ДобавитьПОД_Документ_ВозвратТоваровПоставщику_Получение(ПравилаОбработкиДанных);
                  ДобавитьПОД_Документ_ПоступлениеТоваровУслуг_Получение(ПравилаОбработкиДанных);
                  ДобавитьПОД_Документ_РеализацияТоваровУслуг_Получение(ПравилаОбработкиДанных);
                  ДобавитьПОД_Документ_ОприходованиеТоваров_Получение(ПравилаОбработкиДанных);
				  ДобавитьПОД_Документ_ПеремещениеТоваров_Получение(ПравилаОбработкиДанных);
                  ДобавитьПОД_Документ_СписаниеНедостачТоваров_Получение(ПравилаОбработкиДанных);

			КонецЕсли;

КонецПроцедуры
		
		#Область Справочник_Номенклатура_Получение
		&Вместо("ДобавитьПОД_Справочник_Номенклатура_Получение")
Процедура Расш1_ДобавитьПОД_Справочник_Номенклатура_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Номенклатура_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Номенклатура";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Номенклатура_Получение");
КонецПроцедуры

&Вместо("ЗаполнитьПравилаКонвертацииОбъектов")
Процедура Расш1_ЗаполнитьПравилаКонвертацииОбъектов(НаправлениеОбмена, ПравилаКонвертации)
	Если НаправлениеОбмена = "Отправка" Тогда
		
	ИначеЕсли НаправлениеОбмена = "Получение" Тогда
		ДобавитьПКО_Справочник_Организации_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Склады_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Подразделения_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Номенклатура_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОтчетОРозничныхПродажах_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВозвратТоваровОтПокупателя_Получение(ПравилаКонвертации);
        ДобавитьПКО_Документ_ВозвратТоваровПоставщику_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПоступлениеТоваровУслуг_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_РеализацияТоваровУслуг_Получение(ПравилаКонвертации);
        ДобавитьПКО_Документ_ОприходованиеТоваров_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПеремещениеТоваров_Получение(ПравилаКонвертации);
	    ДобавитьПКО_Документ_СписаниеНедостачТоваров_Получение(ПравилаКонвертации);

	КонецЕсли;
	    ДобавитьПКО_Справочник_Валюты(ПравилаКонвертации);
	    ДобавитьПКО_Справочник_ЕдиницыИзмерения(ПравилаКонвертации);
	    ДобавитьПКО_Справочник_ТипыЦен(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Контрагенты_Получение(ПравилаКонвертации);
        ДобавитьПКО_Справочник_СтатьиДоходов(ПравилаКонвертации);
		ДобавитьПКО_Справочник_СтраныМира(ПравилаКонвертации);

	  //ДобавитьПКО_Справочник_Упаковки(ПравилаКонвертации);
КонецПроцедуры

&Вместо("ДобавитьПКО_Справочник_Номенклатура_Получение")
Процедура Расш1_ДобавитьПКО_Справочник_Номенклатура_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Номенклатура_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Номенклатура;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Номенклатура";
	//ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_Номенклатура_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Номенклатура_Получение_ПередЗаписьюПолученныхДанных";
	//ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_Номенклатура";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;

	ДобавитьПКС(СвойстваШапки, "Артикул",                                "Артикул");
	//ДобавитьПКС(СвойстваШапки, "ЕдиницаИзмерения",                       "ЕдиницаИзмерения", , "Справочник_ЕдиницыИзмерения");
	//ДобавитьПКС(СвойстваШапки, "Наименование",                           "Наименование");
	 ДобавитьПКС(СвойстваШапки, "НаименованиеПолное",                     "Наименование");
	//обавитьПКС(СвойстваШапки, "Родитель",                               "Группа", , "Справочник_НоменклатураГруппа");
	//бавитьПКС(СвойстваШапки, "СтавкаНДС",                              "СтавкаНДС", , "Перечисление_СтавкиНДС");
	//ДобавитьПКС(СвойстваШапки, "ТипНоменклатуры",                        "ТипНоменклатуры", , "Перечисление_ТипыНоменклатуры");
	
	ПравилоКонвертации.ПоляПоиска.Добавить("Артикул");

КонецПроцедуры

//&Вместо("ПКО_Справочник_Номенклатура_Получение_ПриКонвертацииДанныхXDTO")
//Процедура Расш1_ПКО_Справочник_Номенклатура_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	// Вставить содержимое метода.
	//ПродолжитьВызов(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена);
//КонецПроцедуры

&Вместо("ПКО_Справочник_Номенклатура_Получение_ПередЗаписьюПолученныхДанных")
Процедура Расш1_ПКО_Справочник_Номенклатура_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	//Если Не ЗначениеЗаполнено(ПолученныеДанные.СтавкаНДС) Тогда
	//	ПолученныеДанные.СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
	//КонецЕсли;
	
	Если ДанныеИБ = Неопределено Тогда
		//ПолученныеДанные.СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
		//ПолученныеДанные=Неопределено;
	Иначе
		//ЗаполнитьРеквизитыИзДанныхИБ(ПолученныеДанные, ДанныеИБ,
		//	"СтавкаНДС, ГруппаАналитическогоУчета");
	КонецЕсли;

КонецПроцедуры

&Вместо("ДобавитьПКО_Справочник_ЕдиницыИзмерения")
Процедура Расш1_ДобавитьПКО_Справочник_ЕдиницыИзмерения(ПравилаКонвертации)
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ЕдиницыИзмерения";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.УпаковкиЕдиницыИзмерения;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ЕдиницыИзмерения";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_ЕдиницыИзмерения_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",                "Код");
	//ДобавитьПКС(СвойстваШапки, "Наименование",       "Наименование");
	//ДобавитьПКС(СвойстваШапки, "НаименованиеПолное", "НаименованиеПолное");

	ПравилоКонвертации.ПоляПоиска.Добавить("Код");

КонецПроцедуры

&Вместо("ПКО_Справочник_ЕдиницыИзмерения_ПередЗаписьюПолученныхДанных")
Процедура Расш1_ПКО_Справочник_ЕдиницыИзмерения_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	//ДанныеДляЗаписиВИБ = ?(ДанныеИБ = Неопределено, ПолученныеДанные, ДанныеИБ);
	//ДанныеДляЗаписиВИБ.Владелец = Справочники.НаборыУпаковок.БазовыеЕдиницыИзмерения;
    Если ДанныеИБ = Неопределено Тогда
		//ПолученныеДанные.СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
		ПолученныеДанные=Неопределено;
	Иначе
		//ЗаполнитьРеквизитыИзДанныхИБ(ПолученныеДанные, ДанныеИБ,
		//	"СтавкаНДС, ГруппаАналитическогоУчета");
	КонецЕсли;
КонецПроцедуры

&Вместо("ДобавитьПОД_Справочник_Организации_Получение")
Процедура Расш1_ДобавитьПОД_Справочник_Организации_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Организации_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Организации";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Организации_Получение");

КонецПроцедуры

&Вместо("ДобавитьПКО_Справочник_Организации_Получение")
Процедура Расш1_ДобавитьПКО_Справочник_Организации_Получение(ПравилаКонвертации)
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Организации_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Организации;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Организации";
	//ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_Организации_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Организации_Получение_ПередЗаписьюПолученныхДанных";
	//ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_Организации";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование",                  "Наименование");
	ДобавитьПКС(СвойстваШапки, "ИНН",                           "ИНН");
	ДобавитьПКС(СвойстваШапки, "КПП",                           "КПП");
	ДобавитьПКС(СвойстваШапки, "ЮридическоеФизическоеЛицо",     "ЮридическоеФизическоеЛицо", , "Перечисление_ЮридическоеФизическоеЛицо");
	//ДобавитьПКС(СвойстваШапки, "ЮрФизЛицо",                     "", 1);
	

	ПравилоКонвертации.ПоляПоиска.Добавить("ИНН,КПП");

КонецПроцедуры

&Вместо("ПКО_Справочник_Организации_Получение_ПередЗаписьюПолученныхДанных")
Процедура Расш1_ПКО_Справочник_Организации_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если  ДанныеИБ = Неопределено Тогда
		ПолученныеДанные=Неопределено;
	КонецЕсли;
КонецПроцедуры

&Вместо("ДобавитьПОД_Справочник_Подразделения_Получение")
Процедура Расш1_ДобавитьПОД_Справочник_Подразделения_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Подразделения_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Подразделения";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Подразделения_Получение");

КонецПроцедуры

&Вместо("ДобавитьПКО_Справочник_Подразделения_Получение")
Процедура Расш1_ДобавитьПКО_Справочник_Подразделения_Получение(ПравилаКонвертации)
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Подразделения_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.СтруктураПредприятия;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Подразделения";
//	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_Подразделения_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Подразделения_Получение_ПередЗаписьюПолученныхДанных";
	//ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_СтруктураПредприятия";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	//ДобавитьПКС(СвойстваШапки, "Родитель",     "", 1, "Справочник_Подразделения_Получение");
	
	
	//ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,Родитель");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");

КонецПроцедуры

&Вместо("ПКО_Справочник_Подразделения_Получение_ПередЗаписьюПолученныхДанных")
Процедура Расш1_ПКО_Справочник_Подразделения_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если  ДанныеИБ = Неопределено Тогда	
			ПолученныеДанные = Неопределено;
	КонецЕсли;

КонецПроцедуры

&Вместо("ДобавитьПОД_Справочник_Склады_Получение")
Процедура Расш1_ДобавитьПОД_Справочник_Склады_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Склады_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Склады";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Склады_Получение");
КонецПроцедуры

&Вместо("ДобавитьПКО_Справочник_Склады_Получение")
Процедура Расш1_ДобавитьПКО_Справочник_Склады_Получение(ПравилаКонвертации)
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Склады_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Склады;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Склады";
//	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_Склады_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Склады_Получение_ПередЗаписьюПолученныхДанных";
	//ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_Склады";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
//	ДобавитьПКС(СвойстваШапки, "Родитель",     "Группа", , "Справочник_СкладыГруппа");
//	ДобавитьПКС(СвойстваШапки, "ТипСклада",    "ТипСклада", , "ТипыСкладов_Получение");
	
	
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");

КонецПроцедуры

&Вместо("ПКО_Справочник_Склады_Получение_ПередЗаписьюПолученныхДанных")
Процедура Расш1_ПКО_Справочник_Склады_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если  ДанныеИБ = Неопределено Тогда
		ПолученныеДанные=Неопределено;
	КонецЕсли;

КонецПроцедуры

&Вместо("ДобавитьПОД_Документ_ОтчетОРозничныхПродажах_Получение")
Процедура Расш1_ДобавитьПОД_Документ_ОтчетОРозничныхПродажах_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОтчетОРозничныхПродажах_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ОтчетОРозничныхПродажах";
	//ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ОтчетОРозничныхПродажах_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОтчетОРозничныхПродажах_Получение");
  //ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РеализацияПС_Получение");

КонецПроцедуры

&Вместо("ДобавитьПКО_Документ_ОтчетОРозничныхПродажах_Получение")
Процедура Расш1_ДобавитьПКО_Документ_ОтчетОРозничныхПродажах_Получение(ПравилаКонвертации)
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ОтчетОРозничныхПродажах_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ОтчетОРозничныхПродажах;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ОтчетОРозничныхПродажах";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ОтчетОРозничныхПродажах_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ОтчетОРозничныхПродажах_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ОтчетОРозничныхПродажах";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВидЦены",         "ТипЦен", , "Справочник_ТипыЦен");
	ДобавитьПКС(СвойстваШапки, "Дата",            "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",     "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",           "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",     "Организация", , "Справочник_Организации_Получение");
  //ДобавитьПКС(СвойстваШапки, "Ответственный",   "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Подразделение",   "Подразделение", , "Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваШапки, "Склад",           "Склад", , "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",  "Сумма");
	ДобавитьПКС(СвойстваШапки, "ЦенаВключаетНДС", "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "Валюта",          "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Проведен",        "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ОплатаПлатежнымиКартами", "");
	ДобавитьПКС(СвойстваТЧ, "НомерПлатежнойКарты",   "", 1);
	ДобавитьПКС(СвойстваТЧ, "Сумма",                 "", 1);
	ДобавитьПКС(СвойстваТЧ, "ЭквайринговыйТерминал", "", 1);
	
	//СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ПодарочныеСертификаты",   "");
	//ДобавитьПКС(СвойстваТЧ, "ПодарочныйСертификат", "", 1);
	//ДобавитьПКС(СвойстваТЧ, "Сумма",                "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары",                  "");
	ДобавитьПКС(СвойстваТЧ, "Количество",         "", 1);
	ДобавитьПКС(СвойстваТЧ, "КоличествоУпаковок", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",       "", 1, "Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",          "", 1, "Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "Сумма",              "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",           "", 1);
	ДобавитьПКС(СвойстваТЧ, "Цена",               "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");

КонецПроцедуры

&Вместо("ПКО_Документ_ОтчетОРозничныхПродажах_Получение_ПриКонвертацииДанныхXDTO")
Процедура Расш1_ПКО_Документ_ОтчетОРозничныхПродажах_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	
	ПолученныеДанные.Проведен = Истина;
	//ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.ВидЦены) И ЗначениеЗаполнено(ПолученныеДанные.Склад) Тогда
		ПолученныеДанные.ВидЦены = ПолученныеДанные.Склад.РозничныйВидЦены;
	КонецЕсли;
	
//	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
	ПравилаЗаполнения.Вставить("Количество",   "Количество");
	ПравилаЗаполнения.Вставить("Сумма",        "Сумма");
	ПравилаЗаполнения.Вставить("Цена",         "Цена");
	ПравилаЗаполнения.Вставить("СтавкаНДС",    "СтавкаНДС");
	ПравилаЗаполнения.Вставить("СуммаНДС",     "СуммаНДС");
	
	// Товары 
	МассивСтрокТовары = Новый Массив;
	
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			
			СтруктураДанныхСтроки.Вставить("КоличествоУпаковок", СтруктураДанныхСтроки.Количество);
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	
	// Услуги загружаются в ТЧ Товары
	//Если ДанныеXDTO.Свойство("Услуги")
	//	И ЗначениеЗаполнено(ДанныеXDTO.Услуги) Тогда
		
	//	Для Каждого Строка Из ДанныеXDTO.Услуги Цикл
	//		СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			
	//		СтруктураДанныхСтроки.Вставить("КоличествоУпаковок", СтруктураДанныхСтроки.Количество);
	//		МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
	//	КонецЦикла;
	//КонецЕсли;
	
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	КонецЕсли;
	
	//Оплата платежными картами
	МассивСтрокОплатаПК = Новый Массив;
	
	Если ДанныеXDTO.Свойство("ОплатаПлатежнымиКартами")
		И ЗначениеЗаполнено(ДанныеXDTO.ОплатаПлатежнымиКартами) Тогда
		
		Для Каждого Строка Из ДанныеXDTO.ОплатаПлатежнымиКартами Цикл
			СтруктураДанныхСтроки = Новый Структура;
			СтруктураДанныхСтроки.Вставить("Сумма", Строка.СуммаОплаты);
			СтруктураДанныхСтроки.Вставить("НомерПлатежнойКарты", Строка.НомерКарты);
		
			//Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.3") Тогда
			//    Если ЗначениеЗаполнено(Строка.Эквайрер) Тогда
			//    	Эквайрер = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(
			//			КомпонентыОбмена,
			//			Строка.Эквайрер,
			//			ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, "Справочник_Контрагенты_Получение"), 
			//			"ПолучитьСсылку");
			//			
			//		Если ТипЗнч(Эквайрер) = Тип("СправочникОбъект.Контрагенты") Тогда
			//			Эквайрер = Эквайрер.Ссылка;
			//		КонецЕсли;	
			//	
			//		Терминал = НайтиТерминалПоЭквайреруИОрганизации(ПолученныеДанные.Организация,
			//			Эквайрер);
			//		СтруктураДанныхСтроки.Вставить("ЭквайринговыйТерминал", Терминал);
			//    КонецЕсли;
			//ИначеЕсли ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.4") Тогда  
			//	СтруктураЭТ = ?(ТипЗнч(Строка.ЭквайринговыйТерминал) = Тип("Структура"), Строка.ЭквайринговыйТерминал, Новый Структура("Номер, Ссылка"));
			//	СтруктураЭТ.Вставить("БанковскийСчетОрганизации", Строка.БанковскийСчетОрганизации);
			//	СтруктураЭТ.Вставить("Эквайрер", Строка.Эквайрер);
			//	
			//	// Готовим инструкцию для конвертации Эквайрингового терминала.
			//	Инструкция = Новый Структура;
			//	Инструкция.Вставить("Значение", СтруктураЭТ);
			//	
			//	Если ЗначениеЗаполнено(СтруктураЭТ.Номер) Тогда
			//		Инструкция.Вставить("ИмяПКО", "Справочник_ЭквайрингТерм_Получение_КлючСв");
			//	ИначеЕсли ЗначениеЗаполнено(СтруктураЭТ.БанковскийСчетОрганизации) И ЗначениеЗаполнено(СтруктураЭТ.Эквайрер) Тогда
			//		Инструкция.Вставить("ИмяПКО", "Справочник_ЭквайрингТермБезНомера_Получение_КлючСв");
			//	Иначе
			//		Инструкция = Неопределено;
			//	КонецЕсли;
			//	
			//	СтруктураДанныхСтроки.Вставить("ЭквайринговыйТерминал", Инструкция);
			//Иначе //Версия 1.4 и выше
			//	Инструкция = Новый Структура;
			//	Инструкция.Вставить("Значение", Строка.ЭквайринговыйТерминал);
			//	Инструкция.Вставить("ИмяПКО", "Справочник_ЭквайринговыеТерминалы_Получение");
			//	
			//	СтруктураДанныхСтроки.Вставить("ЭквайринговыйТерминал", Инструкция);
			//КонецЕсли;
			
			МассивСтрокОплатаПК.Добавить(СтруктураДанныхСтроки);
		
		КонецЦикла;
		
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ОплатаПлатежнымиКартами", МассивСтрокОплатаПК);	
	КонецЕсли;
	
	//Подарочные сертификаты
	//МассивСтрокПС = Новый Массив; 
	//
	//Если ДанныеXDTO.Свойство("ОплатаСертификатами")
	//	И ЗначениеЗаполнено(ДанныеXDTO.ОплатаСертификатами) Тогда
	//	
	//	Для каждого Строка из ДанныеXDTO.ОплатаСертификатами Цикл
	//		СтруктураДанныхСтроки = Новый Структура;
	//		СтруктураДанныхСтроки.Вставить("Сумма", Строка.Сумма);
	//		
	//		// Готовим инструкцию для конвертации подарочного сертификата.
	//		Инструкция = Новый Структура;
	//		СтруктураПодарочногоСертификата = Новый Структура;
	//		СтруктураПодарочногоСертификата.Вставить("Штрихкод", Строка.Штрихкод);
	//		СтруктураПодарочногоСертификата.Вставить("МагнитныйКод", Строка.МагнитныйКод);
	//		СтруктураПодарочногоСертификата.Вставить("СерийныйНомер", Строка.СерийныйНомер);
	//		Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.3") Тогда
	//			Инструкция.Вставить("ИмяПКО", "Справочник_ПодарочныеСертификаты");
	//			СтруктураПодарочногоСертификата.Вставить("ВидПодарочногоСертификата", Строка.ВидПодарочногоСертификата);
	//		Иначе
	//			Инструкция.Вставить("ИмяПКО", "Справочник_ПодарочныеСертификатыБезВладельца");	
	//		КонецЕсли;
	//				
	//		Инструкция.Вставить("Значение", СтруктураПодарочногоСертификата);
	//		СтруктураДанныхСтроки.Вставить("ПодарочныйСертификат", Инструкция);
	//		
	//		МассивСтрокПС.Добавить(СтруктураДанныхСтроки);
	//	
	//	КонецЦикла;
	//	
	//	ПолученныеДанные.ДополнительныеСвойства.Вставить("ПодарочныеСертификаты", МассивСтрокПС);	
	//КонецЕсли;

КонецПроцедуры

&Вместо("ПКО_Документ_ОтчетОРозничныхПродажах_Получение_ПередЗаписьюПолученныхДанных")
Процедура Расш1_ПКО_Документ_ОтчетОРозничныхПродажах_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	
	ПолученныеДанные.Склад = СкладДляЗагрузки(ПолученныеДанные.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	
	Для Каждого Строка Из ПолученныеДанные.Товары Цикл
		Строка.Партнер = Справочники.Партнеры.РозничныйПокупатель;
	КонецЦикла;
	
	// Подразделение
	ЗаполнитьПодразделениеПоУмолчанию(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
	//ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
	//							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	
	// В случае наличия объекта в базе он и будет записан (а не ПолученныеДанные).
	// Шапка и табличная часть предварительно переносятся из ПолученныеДанные в ДанныеИБ:
	// шапка - в составе свойств из ПКС, табличная часть - полностью берется из полученных данных.
	
	     
		 
	Если ДанныеИБ <> Неопределено Тогда
		
	    ДанныеИБСклад = ДанныеИБ.Склад;

		// Переносим те свойства, которые указаны в ПКС.
		ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
		//Если НЕ КомпонентыОбмена.ПараметрыКонвертации.ВыгружатьАналитикуПоСкладам Тогда
			// Восстанавливаем склад из первоначального документа.
			ДанныеИБ.Склад = ДанныеИБСклад;
		//КонецЕсли;
	
		// Табличные части
		ДанныеИБ.Товары.Загрузить(ПолученныеДанные.Товары.Выгрузить());
	
		ПолученныеДанные = Неопределено;
		ДанныеДляЗаписиВИБ = ДанныеИБ;
	Иначе
		ДанныеДляЗаписиВИБ = ПолученныеДанные;
	КонецЕсли;
	
	ЗаполнитьКассуККМПоВалютеСкладуИОрганизации(ДанныеДляЗаписиВИБ, КомпонентыОбмена);
	
	//Если Не ЗначениеЗаполнено(ДанныеДляЗаписиВИБ.КассоваяСмена) Тогда
	//	НоваяСтрока = КомпонентыОбмена.ПараметрыКонвертации.ДокументыСПодарочнымиСертификатами.Добавить();
	//	НоваяСтрока.ДокументСсылка = ?(ДанныеИБ = Неопределено, ДанныеДляЗаписиВИБ.ПолучитьСсылкуНового(), ДанныеДляЗаписиВИБ.Ссылка);
	//	НоваяСтрока.ДатаДокумента = ДанныеДляЗаписиВИБ.Дата;
	//	НоваяСтрока.ОчередьДокумента = 1;
	//	НоваяСтрока.КассаККМ = ДанныеДляЗаписиВИБ.КассаККМ;
	//	НоваяСтрока.Организация = ДанныеДляЗаписиВИБ.Организация;
	//	НоваяСтрока.Валюта = ДанныеДляЗаписиВИБ.Валюта;
	//КонецЕсли;  gdfg

КонецПроцедуры

&Вместо("ДобавитьПОД_Справочник_ТипыЦен")
Процедура Расш1_ДобавитьПОД_Справочник_ТипыЦен(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ТипыЦен";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ТипыЦен";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ТипыЦен");

КонецПроцедуры

&Вместо("ДобавитьПКО_Справочник_ТипыЦен")
Процедура Расш1_ДобавитьПКО_Справочник_ТипыЦен(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ТипыЦен";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ВидыЦен;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ТипыЦен";
	//ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Справочник_ТипыЦен_ПриОтправкеДанных";
	//ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_ТипыЦен_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_ТипыЦен_ПередЗаписьюПолученныхДанных";
	//ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ТипыЦен";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Идентификатор",            "Идентификатор");
	ДобавитьПКС(СвойстваШапки, "Наименование",             "Наименование");
	ДобавитьПКС(СвойстваШапки, "ОкруглятьВБольшуюСторону", "ОкруглятьВБольшуюСторону");
	ДобавитьПКС(СвойстваШапки, "ТочностьОкругления",       "ТочностьОкругления");
	ДобавитьПКС(СвойстваШапки, "ЦенаВключаетНДС",          "ЦенаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "",                         "ВалютаЦены", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВалютаЦены",               "", 1);
	ДобавитьПКС(СвойстваШапки, "Идентификатор",            "", 1);
	ДобавитьПКС(СвойстваШапки, "ИспользоватьПриПродаже",   "", 1);
	ДобавитьПКС(СвойстваШапки, "СпособЗаданияЦены",        "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("ВалютаЦены,Наименование");
КонецПроцедуры

&Вместо("ПКО_Справочник_ТипыЦен_ПриКонвертацииДанныхXDTO")
Процедура Расш1_ПКО_Справочник_ТипыЦен_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	
	ПолученныеДанные.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.Вручную;
	ПолученныеДанные.ИспользоватьПриПродаже = Истина;
	
	// Если идентификатор, сформированный по наименованию, занят, устанавливается автосгенерированный.
	ПолученныеДанные.Идентификатор = ОбщегоНазначенияУТКлиентСервер.ПолучитьИдентификатор(ПолученныеДанные.Наименование);
	Запрос = Новый Запрос();
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	1 КАК Поле1
		|ИЗ
		|	Справочник.ВидыЦен КАК ВидыЦен
		|ГДЕ
		|	ВидыЦен.Идентификатор = &Идентификатор";
	Запрос.УстановитьПараметр("Идентификатор", ПолученныеДанные.Идентификатор);
	Если Не Запрос.Выполнить().Пустой() Тогда
		ПолученныеДанные.Идентификатор = Строка(Новый УникальныйИдентификатор());
	КонецЕсли;
	
	Если ДанныеXDTO.КлючевыеСвойства.Свойство("ВалютаЦены")
		И ЗначениеЗаполнено(ДанныеXDTO.КлючевыеСвойства.ВалютаЦены) Тогда
	
		ЗначениеВалюты = ДанныеXDTO.КлючевыеСвойства.ВалютаЦены; 
		Если ЗначениеВалюты.Свойство("Ссылка") Тогда
			ИмяПКО = "Справочник_Валюты";
		Иначе
			ИмяПКО = "Справочник_Валюты_ИзСтруктуры";
		КонецЕсли;
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ВалютаЦены", Новый Структура("Значение, ИмяПКО", ЗначениеВалюты, ИмяПКО));
	КонецЕсли;

КонецПроцедуры

&Вместо("ПКО_Справочник_ТипыЦен_ПередЗаписьюПолученныхДанных")
Процедура Расш1_ПКО_Справочник_ТипыЦен_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ДанныеИБ = Неопределено Тогда
			ПолученныеДанные= Неопределено;
	КонецЕсли;
КонецПроцедуры

&Вместо("ЗаполнитьКассуККМПоВалютеСкладуИОрганизации")
Процедура Расш1_ЗаполнитьКассуККМПоВалютеСкладуИОрганизации(ПолученныеДанные, КомпонентыОбмена, НаименованиеСклада)
	
	Если ЗначениеЗаполнено(НаименованиеСклада) Тогда
		Склад = Справочники.Склады.НайтиПоНаименованию(НаименованиеСклада);
	Иначе
		Склад = ПолученныеДанные.Склад;
	КонецЕсли;
		
	РеквизитыКассыККМ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПолученныеДанные.КассаККМ, "ВалютаДенежныхСредств, Владелец, Склад");
	
	Если //РеквизитыКассыККМ.ВалютаДенежныхСредств <> ПолученныеДанные.Валюта 
		//Или РеквизитыКассыККМ.Владелец <> ПолученныеДанные.Организация
		//ИЛИ (КомпонентыОбмена.ПараметрыКонвертации.ВыгружатьАналитикуПоСкладам И 
		РеквизитыКассыККМ.Склад <> Склад Тогда
		
		КассаККМ = Неопределено;
		Валюта = ПолученныеДанные.Валюта;
		Организация = ПолученныеДанные.Организация;
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Валюта", Валюта);
		ПараметрыОтбора.Вставить("Организация", Организация);
		ПараметрыОтбора.Вставить("Склад", Склад);
	
		НеобходимоСоздатьЭлемент = Ложь;
	
		//Если ОбщегоНазначения.СсылкаСуществует(Организация) И ОбщегоНазначения.СсылкаСуществует(Валюта) Тогда
		//	НаименованиеЭлементаДляОбменаПоУмолчанию = СокрЛП(Организация) + " (" + СокрЛП(Валюта) + ")";
		//Иначе
		//	НаименованиеЭлементаДляОбменаПоУмолчанию = НСтр("ru='Основная касса ККМ'");
		//КонецЕсли;
		
		   НаименованиеЭлементаДляОбменаПоУмолчанию = "Фискальный регистратор ("+СокрЛП(Склад.Наименование)+")";
		
		СписокСкладов = Новый СписокЗначений();
		СписокСкладов.Добавить(Справочники.Склады.ПустаяСсылка());
		СписокСкладов.Добавить(Склад);
		
		Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 2
			|	Кассы.Ссылка КАК Касса,
			|	ВЫБОР
			|		КОГДА Кассы.Наименование = &НаименованиеЭлементаДляОбменаПоУмолчанию
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ЭтоЭлементПоУмолчаниюДляОбмена,
			|	Кассы.Склад КАК Склад
			|ИЗ
			|	Справочник.КассыККМ КАК Кассы
			|ГДЕ
			|	НЕ Кассы.ПометкаУдаления
			|	И Кассы.Владелец = &Организация
			|	И Кассы.ВалютаДенежныхСредств = &Валюта
			|	И Кассы.Склад В(&СписокСкладов)
	
			|
			|УПОРЯДОЧИТЬ ПО
			|	ЭтоЭлементПоУмолчаниюДляОбмена УБЫВ,
			|	Склад УБЫВ");
	
		Запрос.УстановитьПараметр("НаименованиеЭлементаДляОбменаПоУмолчанию", НаименованиеЭлементаДляОбменаПоУмолчанию);
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("Валюта", Валюта);
		Запрос.УстановитьПараметр("СписокСкладов", СписокСкладов);
	
	
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Если Выборка.Количество() = 1 Или Выборка.ЭтоЭлементПоУмолчаниюДляОбмена Тогда
				КассаККМ = Выборка.Касса;
			Иначе
				НеобходимоСоздатьЭлемент = Истина;
			КонецЕсли;
		Иначе
			НеобходимоСоздатьЭлемент = Истина;
		КонецЕсли;
	
		// Создание элемента для обмена с заданными параметрами
		Если НеобходимоСоздатьЭлемент Тогда
			КассаОбъект = Справочники.КассыККМ.СоздатьЭлемент();
			КассаОбъект.Наименование			= НаименованиеЭлементаДляОбменаПоУмолчанию;
			КассаОбъект.ВалютаДенежныхСредств	= Валюта;
			КассаОбъект.Владелец				= Организация;
			КассаОбъект.Склад					= Склад;
			КассаОбъект.ТипКассы                = Перечисления.ТипыКассККМ.ФискальныйРегистратор;
	
			Попытка
				КассаОбъект.Записать();
				КассаККМ = КассаОбъект.Ссылка;
			Исключение
				КассаККМ = Справочники.КассыККМ.ПустаяСсылка();
				ЗаписатьОшибкуВЖурналРегистрации(КассаККМ, ИнформацияОбОшибке(), КомпонентыОбмена);
			КонецПопытки
		КонецЕсли;
		
		ПолученныеДанные.КассаККМ = КассаККМ;
	КонецЕсли;

КонецПроцедуры


&После("ОтложеннаяОбработка_ОтчетОРозничныхПродажах")
Процедура Расш1_ОтложеннаяОбработка_ОтчетОРозничныхПродажах(Объект)
	
	      эл=Справочники.ЭквайринговыеТерминалы.НайтиПоКоду("0");
	 If Объект.ОплатаПлатежнымиКартами.Количество()>0 Then
		   Для Каждого стр Из Объект.ОплатаПлатежнымиКартами  Цикл
			           стр.ЭквайринговыйТерминал=эл;  
		   КонецЦикла;	   
	EndIf;	
КонецПроцедуры

&Вместо("ДобавитьПКО_Справочник_Валюты")
Процедура Расш1_ДобавитьПКО_Справочник_Валюты(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Валюты";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Валюты;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Валюты";
	//ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_Валюты_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Валюты_ПередЗаписьюПолученныхДанных";
	//ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_Валюты";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",                "Код");
	ДобавитьПКС(СвойстваШапки, "Наименование",       "Наименование");

	ПравилоКонвертации.ПоляПоиска.Добавить("Код");

КонецПроцедуры

&Вместо("ПКО_Справочник_Валюты_ПередЗаписьюПолученныхДанных")
Процедура Расш1_ПКО_Справочник_Валюты_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ДанныеИБ = Неопределено Тогда
		ПолученныеДанные = Неопределено
	КонецЕсли;
КонецПроцедуры

&Вместо("ДобавитьПОД_Справочник_Валюты_Получение")
Процедура Расш1_ДобавитьПОД_Справочник_Валюты_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Валюты_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Валюты";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Валюты");
КонецПроцедуры

&Вместо("ДобавитьПКО_Документ_ВозвратТоваровОтПокупателя_Получение")
Процедура Расш1_ДобавитьПКО_Документ_ВозвратТоваровОтПокупателя_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ВозвратТоваровОтПокупателя_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ВозвратТоваровОтКлиента;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ВозвратТоваровОтПокупателя";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ВозвратТоваровОтПокупателя_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ВозвратТоваровОтПокупателя_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ВозвратТоваровОтПокупателя";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "ДокументРеализации",    "ДокументРеализации", , "Документ_ОтчетОРозничныхПродажах_Получение");//Документ_РеализацияТоваровУслуг_Получение");
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",            "Контрагент", , "Справочник_Контрагенты_Получение");
//	ДобавитьПКС(СвойстваШапки, "Менеджер",              "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Подразделение",         "Подразделение", , "Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваШапки, "Склад",                 "Склад", , "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",        "Сумма");
	ДобавитьПКС(СвойстваШапки, "ХозяйственнаяОперация", "ВидОперации", , "ВидыОперацийВозвратОтПокупателя");
	ДобавитьПКС(СвойстваШапки, "ЦенаВключаетНДС",       "СуммаВключаетНДС");
    ДобавитьПКС(СвойстваШапки, "Валюта",          "Валюта", , "Справочник_Валюты");
	//ДобавитьПКС(СвойстваШапки, "Валюта",                "", 1);
	//ДобавитьПКС(СвойстваШапки, "Договор",               "", 1);
	ДобавитьПКС(СвойстваШапки, "НалогообложениеНДС",    "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",              "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары", "");
	ДобавитьПКС(СвойстваТЧ, "Количество",         "", 1);
	ДобавитьПКС(СвойстваТЧ, "КоличествоУпаковок", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",       "", 1, "Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",          "", 1, "Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "Сумма",              "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",           "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаСНДС",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "Цена",               "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");

КонецПроцедуры

&Вместо("ПКО_Документ_ВозвратТоваровОтПокупателя_Получение_ПриКонвертацииДанныхXDTO")
Процедура Расш1_ПКО_Документ_ВозвратТоваровОтПокупателя_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	
	ЗаполнитьНалогообложениеНДСПоПолученнымДанным(ПолученныеДанные, ДанныеXDTO);
		
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
	ПравилаЗаполнения.Вставить("Количество",   "Количество");
	ПравилаЗаполнения.Вставить("Сумма",        "Сумма");
	ПравилаЗаполнения.Вставить("Цена",         "Цена");
	ПравилаЗаполнения.Вставить("СтавкаНДС",    "СтавкаНДС");
	ПравилаЗаполнения.Вставить("СуммаНДС",     "СуммаНДС");
	
	// Товары 
	МассивСтрокТовары = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			СуммаСНДС = Строка.Сумма;
			Если СтруктураДанныхСтроки.Свойство("СуммаНДС") И НЕ ПолученныеДанные.ЦенаВключаетНДС Тогда
				СуммаСНДС = СуммаСНДС + СтруктураДанныхСтроки.СуммаНДС
			КонецЕсли;
			
			СтруктураДанныхСтроки.Вставить("СуммаСНДС", СуммаСНДС);
			СтруктураДанныхСтроки.Вставить("КоличествоУпаковок", СтруктураДанныхСтроки.Количество);
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		
	КонецЕсли;
	
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	КонецЕсли;

КонецПроцедуры

&Вместо("ПКО_Документ_ВозвратТоваровОтПокупателя_Получение_ПередЗаписьюПолученныхДанных")
Процедура Расш1_ПКО_Документ_ВозвратТоваровОтПокупателя_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	// Склад
	ПолученныеДанные.Склад = СкладДляЗагрузки(ПолученныеДанные.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
	                            ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеИБСклад = ДанныеИБ.Склад;
	
	// Переносим те свойства, которые указаны в ПКС.
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	//Если НЕ КомпонентыОбмена.ПараметрыКонвертации.ВыгружатьАналитикуПоСкладам Тогда
		// Восстанавливаем склад из первоначального документа.
		ДанныеИБ.Склад = ДанныеИБСклад;
	//КонецЕсли;
	
	// Табличные части
	ДанныеИБ.Товары.Загрузить(ПолученныеДанные.Товары.Выгрузить());
	
	ПолученныеДанные = Неопределено;

КонецПроцедуры

&Вместо("ОтложеннаяОбработка_ВозвратТоваровОтПокупателя")
Процедура Расш1_ОтложеннаяОбработка_ВозвратТоваровОтПокупателя(Объект, ОбъектМодифицирован)
	ЗаполнениеПартнераВШапкеДокумента(Объект);
	ЗаполнениеСоглашенияСКлиентомВШапкеДокумента(Объект);
	ЗаполнитьТипНалогооблаженияПоУмолчанию(Объект);
	
	Если Не ЗначениеЗаполнено(Объект.ПорядокОплаты) Тогда
		Если ЗначениеЗаполнено(Объект.Соглашение)
			И (ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами")) Тогда
			
			УсловияПродаж = ПродажиСервер.ПолучитьУсловияПродаж(Объект.Соглашение);
			
			Если Не ЗначениеЗаполнено(УсловияПродаж.ИспользуютсяДоговорыКонтрагентов) 
				Или Не УсловияПродаж.ИспользуютсяДоговорыКонтрагентов Тогда
				Объект.ПорядокОплаты = УсловияПродаж.ПорядокОплаты;
			Иначе
				Объект.ПорядокОплаты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Договор, "ПорядокОплаты");
			КонецЕсли;
			
		ИначеЕсли ЗначениеЗаполнено(Объект.Договор)
			И (ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСКлиентами")) Тогда
			Объект.ПорядокОплаты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Договор, "ПорядокОплаты");
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ПорядокОплаты) Тогда
		Объект.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.ПолучитьПорядокОплатыПоУмолчанию(Объект.Валюта, , Объект.Валюта);
	КонецЕсли;

	Если  ЗначениеЗаполнено(Объект.ДокументРеализации) Тогда
		Для Каждого стр из Объект.Товары Цикл
			стр.СпособОпределенияСебестоимости = Перечисления.СпособыОпределенияСебестоимости.ИзДокументаПродажи;
			стр.ДокументРеализации=Объект.ДокументРеализации;
		КонецЦикла;	
	КонецЕсли;

	 Объект.ВариантПриемкиТоваров = Константы.ВариантПриемкиТоваров.Получить();
	 
КонецПроцедуры

&Вместо("ДобавитьПКО_Документ_ВозвратТоваровПоставщику_Получение")
Процедура Расш1_ДобавитьПКО_Документ_ВозвратТоваровПоставщику_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ВозвратТоваровПоставщику_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ВозвратТоваровПоставщику;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ВозвратТоваровПоставщику";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ВозвратТоваровПоставщику_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ВозвратТоваровПоставщику_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ВозвратТоваровПоставщику";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",                      "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",               "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                "Контрагент", , "Справочник_Контрагенты_Получение");
	
	ДобавитьПКС(СвойстваШапки, "Номер",                     "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",               "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Подразделение",             "Подразделение", , "Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваШапки, "Склад",                     "Склад", , "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",            "Сумма");
	ДобавитьПКС(СвойстваШапки, "ХозяйственнаяОперация",     "ВидОперации", , "ВидыОперацийВозвратПоставщику");
	ДобавитьПКС(СвойстваШапки, "ЦенаВключаетНДС",           "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "ДокументПоступления",       "ДокументПоступления", , "Документ_ПоступлениеТоваровУслуг_Получение");
	ДобавитьПКС(СвойстваШапки, "Валюта",                    "Валюта", ,"Справочник_Валюты");
	//ДобавитьПКС(СвойстваШапки, "Договор",                   "", 1);
	ДобавитьПКС(СвойстваШапки, "НалогообложениеНДС",        "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",                  "", 1);
	ДобавитьПКС(СвойстваШапки, "СпособКомпенсации",         "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары", "");
	ДобавитьПКС(СвойстваТЧ, "Количество",         "", 1);
	ДобавитьПКС(СвойстваТЧ, "КоличествоУпаковок", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",       "", 1, "Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",          "", 1, "Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "Сумма",              "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",           "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаСНДС",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "Цена",               "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");

КонецПроцедуры

&Вместо("ПКО_Документ_ВозвратТоваровПоставщику_Получение_ПриКонвертацииДанныхXDTO")
Процедура Расш1_ПКО_Документ_ВозвратТоваровПоставщику_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	ПолученныеДанные.СпособКомпенсации = Перечисления.СпособыКомпенсацииВозвратовТоваров.ВернутьДенежныеСредства;
	//ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	//ДобавитьДоговорВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	//ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	ЗаполнитьНалогообложениеНДСПоПолученнымДанным(ПолученныеДанные, ДанныеXDTO);
	
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
	ПравилаЗаполнения.Вставить("Количество",   "Количество");
	ПравилаЗаполнения.Вставить("Сумма",        "Сумма");
	ПравилаЗаполнения.Вставить("Цена",         "Цена");
	ПравилаЗаполнения.Вставить("СтавкаНДС",    "СтавкаНДС");
	ПравилаЗаполнения.Вставить("СуммаНДС",     "СуммаНДС");
	
	// Товары 
	МассивСтрокТовары = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			СуммаСНДС = Строка.Сумма;
			Если СтруктураДанныхСтроки.Свойство("СуммаНДС") И НЕ ПолученныеДанные.ЦенаВключаетНДС Тогда
				СуммаСНДС = СуммаСНДС + СтруктураДанныхСтроки.СуммаНДС
			КонецЕсли;
			
			ОбработатьСтавкуНДСПриПолучении(Строка, СтруктураДанныхСтроки, ПолученныеДанные.Контрагент, КомпонентыОбмена.ПараметрыКонвертации);
			
			СтруктураДанныхСтроки.Вставить("СуммаСНДС", СуммаСНДС);
			СтруктураДанныхСтроки.Вставить("КоличествоУпаковок", СтруктураДанныхСтроки.Количество);
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		
	КонецЕсли;
	
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	КонецЕсли;

КонецПроцедуры

&Вместо("ПКО_Документ_ВозвратТоваровПоставщику_Получение_ПередЗаписьюПолученныхДанных")
Процедура Расш1_ПКО_Документ_ВозвратТоваровПоставщику_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	// Склад
	ПолученныеДанные.Склад = СкладДляЗагрузки(ПолученныеДанные.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	Если ЗначениеЗаполнено(ПолученныеДанные.Контрагент) И НЕ ЗначениеЗаполнено(ПолученныеДанные.Партнер) Тогда
		ПолученныеДанные.Партнер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПолученныеДанные.Контрагент, "Партнер");
	КонецЕсли;
	//ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
	//							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеИБСклад = ДанныеИБ.Склад;
	
	// Переносим те свойства, которые указаны в ПКС.
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	//Если НЕ КомпонентыОбмена.ПараметрыКонвертации.ВыгружатьАналитикуПоСкладам Тогда
		// Восстанавливаем склад из первоначального документа.
		ДанныеИБ.Склад = ДанныеИБСклад;
	//КонецЕсли;
	
	// Табличные части
	ДанныеИБ.Товары.Загрузить(ПолученныеДанные.Товары.Выгрузить());
	
	ПолученныеДанные = Неопределено;

КонецПроцедуры

&Вместо("ДобавитьПКО_Документ_ПоступлениеТоваровУслуг_Получение")
Процедура Расш1_ДобавитьПКО_Документ_ПоступлениеТоваровУслуг_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПоступлениеТоваровУслуг_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПриобретениеТоваровУслуг;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПоступлениеТоваровУслуг";
	//ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПоступлениеТоваровУслуг_Получение_ПриКонвертацииДанныхXDTO";
	//ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПоступлениеТоваровУслуг_Получение_ПередЗаписьюПолученныхДанных";
	//ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ПоступлениеТоваровУслуг";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",                      "Дата");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                "Контрагент", , "Справочник_Контрагенты_Получение");

	ДобавитьПКС(СвойстваШапки, "Номер",                     "Номер");

	ДобавитьПКС(СвойстваШапки, "Организация",               "Организация", , "Справочник_Организации_Получение");

	//ДобавитьПКС(СвойстваШапки, "ХозяйственнаяОперация",     "ВидОперации", , "ВидыОпераций_ПТиУ_Получение");
	ДобавитьПКС(СвойстваШапки, "Валюта",                    "", 1);
	//ДобавитьПКС(СвойстваШапки, "НалогообложениеНДС",        "", 1);
	//ДобавитьПКС(СвойстваШапки, "Проведен",                  "", 1);
	
	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер,Валюта,Контрагент,Организация");

КонецПроцедуры

&Вместо("ДобавитьПОД_Документ_ВозвратТоваровПоставщику_Получение")
Процедура Расш1_ДобавитьПОД_Документ_ВозвратТоваровПоставщику_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ВозвратТоваровПоставщику_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ВозвратТоваровПоставщику";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВозвратТоваровПоставщику_Получение");

КонецПроцедуры

&Вместо("ДобавитьПКО_Документ_РеализацияТоваровУслуг_Получение")
Процедура Расш1_ДобавитьПКО_Документ_РеализацияТоваровУслуг_Получение(ПравилаКонвертации)
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_РеализацияТоваровУслуг_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.РеализацияТоваровУслуг;
	ПравилоКонвертации.ОбъектФормата                = "Документ.РеализацияТоваровУслуг";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_РеализацияТоваровУслуг_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_РеализацияТоваровУслуг_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_РеализацияТоваровУслуг";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",                           "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                    "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                     "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Номер",                          "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",                    "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Подразделение",                  "Подразделение", , "Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваШапки, "Склад",                          "Склад", , "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                 "Сумма");
	ДобавитьПКС(СвойстваШапки, "ХозяйственнаяОперация",          "ВидОперации", , "ВидыОперацийРеализацияТоваров_Получение");
	ДобавитьПКС(СвойстваШапки, "ЦенаВключаетНДС",                "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "Валюта",                         "", 1);
	ДобавитьПКС(СвойстваШапки, "ВалютаВзаиморасчетов",           "", 1);
	ДобавитьПКС(СвойстваШапки, "ДатаПлатежа",                    "", 1);
	ДобавитьПКС(СвойстваШапки, "ДатаРаспоряжения",               "", 1);
	//ДобавитьПКС(СвойстваШапки, "Договор",                        "", 1);
	ДобавитьПКС(СвойстваШапки, "НалогообложениеНДС",             "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",                       "", 1);
	ДобавитьПКС(СвойстваШапки, "Согласован",                     "", 1);
	ДобавитьПКС(СвойстваШапки, "Статус",                         "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары", "");
	ДобавитьПКС(СвойстваТЧ, "Количество",         "", 1);
	ДобавитьПКС(СвойстваТЧ, "КоличествоУпаковок", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",       "", 1, "Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "Склад",              "", 1, "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",          "", 1, "Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "Сумма",              "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",           "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаСНДС",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "Цена",               "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");

КонецПроцедуры

&Вместо("ПКО_Документ_РеализацияТоваровУслуг_Получение_ПриКонвертацииДанныхXDTO")
Процедура Расш1_ПКО_Документ_РеализацияТоваровУслуг_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ЗаполнитьНалогообложениеНДСПоПолученнымДанным(ПолученныеДанные, ДанныеXDTO);
	
	//ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	//ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO, "ВалютаВзаиморасчетов", "ВалютаВзаиморасчетов");
	//ДобавитьДоговорВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	
		
	ПолученныеДанные.Проведен    = Истина;
	ПолученныеДанные.ДатаПлатежа = ПолученныеДанные.Дата;
	ПолученныеДанные.Согласован  = Истина;
	
	ПолученныеДанные.Статус = Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено;
		
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
	ПравилаЗаполнения.Вставить("Количество",   "Количество");
	ПравилаЗаполнения.Вставить("Сумма",        "Сумма");
	ПравилаЗаполнения.Вставить("Цена",         "Цена");
	ПравилаЗаполнения.Вставить("СтавкаНДС",    "СтавкаНДС");
	ПравилаЗаполнения.Вставить("СуммаНДС",     "СуммаНДС");
	ПравилаЗаполнения.Вставить("Склад",        "Склад");
	
	// Товары 
	МассивСтрокТовары = Новый Массив;
	
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
		
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			СтруктураДанныхСтроки.Вставить("КоличествоУпаковок", СтруктураДанныхСтроки.Количество);
			Если ДанныеXDTO.Свойство("Склад") Тогда
				СтруктураДанныхСтроки.Вставить("Склад", ДанныеXDTO.Склад);
			КонецЕсли;
			
			СуммаСНДС = Строка.Сумма;
			Если СтруктураДанныхСтроки.Свойство("СуммаНДС") И НЕ ПолученныеДанные.ЦенаВключаетНДС Тогда
				СуммаСНДС = СуммаСНДС + СтруктураДанныхСтроки.СуммаНДС
			КонецЕсли;
			СтруктураДанныхСтроки.Вставить("СуммаСНДС", СуммаСНДС);
	
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Услуги  загружаются в ТЧ Товары 
	Если ДанныеXDTO.Свойство("Услуги")
		И ЗначениеЗаполнено(ДанныеXDTO.Услуги) Тогда
	
		Для Каждого Строка Из ДанныеXDTO.Услуги Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			СтруктураДанныхСтроки.Вставить("КоличествоУпаковок", СтруктураДанныхСтроки.Количество);
			
			СуммаСНДС = Строка.Сумма;
			Если СтруктураДанныхСтроки.Свойство("СуммаНДС") И НЕ ПолученныеДанные.ЦенаВключаетНДС Тогда
				СуммаСНДС = СуммаСНДС + СтруктураДанныхСтроки.СуммаНДС
			КонецЕсли;		
			СтруктураДанныхСтроки.Вставить("СуммаСНДС", СуммаСНДС);
	
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		
	КонецЕсли;
	
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	КонецЕсли;

КонецПроцедуры

&Вместо("ПКО_Документ_РеализацияТоваровУслуг_Получение_ПередЗаписьюПолученныхДанных")
Процедура Расш1_ПКО_Документ_РеализацияТоваровУслуг_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ПолученныеДанные.Склад = СкладДляЗагрузки(ПолученныеДанные.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	Если ЗначениеЗаполнено(ПолученныеДанные.Контрагент) И НЕ ЗначениеЗаполнено(ПолученныеДанные.Партнер) Тогда
		ПолученныеДанные.Партнер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПолученныеДанные.Контрагент, "Партнер");
	КонецЕсли;
	
	// Подразделение
	ЗаполнитьПодразделениеПоУмолчанию(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
	
	ПолученныеДанные.ДатаРаспоряжения = ПолученныеДанные.Дата;
	//ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
	//							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	Если ДанныеИБ <> Неопределено Тогда
	
		ДанныеИБСклад = ДанныеИБ.Склад;
	
		// Переносим те свойства, которые указаны в ПКС.
		ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
		//Если НЕ КомпонентыОбмена.ПараметрыКонвертации.ВыгружатьАналитикуПоСкладам Тогда
			// Восстанавливаем склад из первоначального документа.
			ДанныеИБ.Склад = ДанныеИБСклад;
		//КонецЕсли;
	
		// Табличные части
		ДанныеИБ.Товары.Загрузить(ПолученныеДанные.Товары.Выгрузить());
		Для Каждого Строка Из ДанныеИБ.Товары Цикл
			Строка.Склад = ДанныеИБ.Склад;
		КонецЦикла;
	
		ПолученныеДанные = Неопределено;
		
	КонецЕсли;
	
	ДанныеДляЗаписиВИБ = ?(ДанныеИБ = Неопределено, ПолученныеДанные, ДанныеИБ);
	Для Каждого Строка Из ДанныеДляЗаписиВИБ.Товары Цикл
		Если Не ЗначениеЗаполнено(Строка.Номенклатура) Тогда
			Строка.Номенклатура = ЭлементПоУмолчанию(КомпонентыОбмена, "НоменклатураУслуга");
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&Вместо("ДобавитьПКО_Документ_ОприходованиеТоваров_Получение")
Процедура Расш1_ДобавитьПКО_Документ_ОприходованиеТоваров_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ОприходованиеТоваров_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ОприходованиеИзлишковТоваров;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ОприходованиеТоваров";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ОприходованиеТоваров_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ОприходованиеТоваров_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВидЦены",       "ТипЦен", , "Справочник_ТипыЦен");
	ДобавитьПКС(СвойстваШапки, "Дата",          "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",         "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",   "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Подразделение", "Подразделение", , "Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваШапки, "Склад",         "Склад", , "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваШапки, "СтатьяДоходов", "СтатьяДоходов", , "Справочник_СтатьиДоходов");
	ДобавитьПКС(СвойстваШапки, "Проведен",      "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары", "");
	ДобавитьПКС(СвойстваТЧ, "Количество",     "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",   "", 1, "Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "НомерГТД",       "", 1, "Справочник_НомерГТД_Получение");
	ДобавитьПКС(СвойстваТЧ, "Сумма",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "Характеристика", "", 1, "Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "Цена",           "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");

КонецПроцедуры

&Вместо("ПКО_Документ_ОприходованиеТоваров_Получение_ПриКонвертацииДанныхXDTO")
Процедура Расш1_ПКО_Документ_ОприходованиеТоваров_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
		ПолученныеДанные.Проведен = Истина;
		
		//ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	#Область Товары
	
	МассивСтрокТовары = Новый Массив;
	Для Каждого Строка Из ДанныеXDTO.Товары Цикл
		
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Цена",                "Цена");
		ПравилаЗаполнения.Вставить("Характеристика",      "Характеристика");
		ПравилаЗаполнения.Вставить("Сумма",               "Сумма");
		ПравилаЗаполнения.Вставить("НомерГТД",            "НомерГТД");
		ПравилаЗаполнения.Вставить("Номенклатура",        "Номенклатура");

		ПравилаЗаполнения.Вставить("Количество",          "Количество");
		СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
		
		МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		
	КонецЦикла;
	
	ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	
	#КонецОбласти

КонецПроцедуры

&Вместо("ПКО_Документ_ОприходованиеТоваров_Получение_ПередЗаписьюПолученныхДанных")
Процедура Расш1_ПКО_Документ_ОприходованиеТоваров_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ПолученныеДанные.СтатьяДоходов=ПланыВидовХарактеристик.СтатьиДоходов.НайтиПоКоду("00-000001");
КонецПроцедуры

&Вместо("ДобавитьПОД_Документ_СписаниеНедостачТоваров_Получение")
Процедура Расш1_ДобавитьПОД_Документ_СписаниеНедостачТоваров_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СписаниеНедостачТоваров_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.СписаниеНедостач";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СписаниеНедостачТоваров_Получение");

КонецПроцедуры

&Вместо("ДобавитьПКО_Документ_СписаниеНедостачТоваров_Получение")
Процедура Расш1_ДобавитьПКО_Документ_СписаниеНедостачТоваров_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_СписаниеНедостачТоваров_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.СписаниеНедостачТоваров;
	ПравилоКонвертации.ОбъектФормата                = "Документ.СписаниеНедостач";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_СписаниеНедостачТоваров_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СписаниеНедостачТоваров_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "Расш1_ОтложеннаяОбработка_СписаниеНедостачТоваров";

	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",          "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",         "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",   "Организация", , "Справочник_Организации_Получение");
//	ДобавитьПКС(СвойстваШапки, "Ответственный", "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Подразделение", "Подразделение", , "Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваШапки, "Склад",         "Склад", , "Справочник_Склады_Получение");
	
		
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары",                  "");
	ДобавитьПКС(СвойстваТЧ, "Количество",     "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",   "", 1, "Справочник_Номенклатура_Получение");
	//ДобавитьПКС(СвойстваТЧ, "Характеристика", "", 1, "Справочник_ХарактеристикиНоменклатуры");

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер,Организация");

КонецПроцедуры

&Вместо("ПКО_Документ_СписаниеНедостачТоваров_Получение_ПриКонвертацииДанныхXDTO")
Процедура Расш1_ПКО_Документ_СписаниеНедостачТоваров_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	//ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	#Область Товары
	
	МассивСтрокТовары = Новый Массив;
	Для Каждого Строка Из ДанныеXDTO.Товары Цикл
		
		ПравилаЗаполнения = Новый Соответствие;
		//ПравилаЗаполнения.Вставить("Характеристика",      "Характеристика");
		ПравилаЗаполнения.Вставить("Номенклатура",        "Номенклатура");
		ПравилаЗаполнения.Вставить("Количество",          "Количество");
		СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
		
		МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		
	КонецЦикла;
	
	ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	
	#КонецОбласти

КонецПроцедуры

&Вместо("ПКО_Документ_СписаниеНедостачТоваров_Получение_ПередЗаписьюПолученныхДанных")
Процедура Расш1_ПКО_Документ_СписаниеНедостачТоваров_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	//ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
	//							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	Если ДанныеИБ = Неопределено Или Не ЗначениеЗаполнено(ДанныеИБ.СтатьяРасходов) Или Не ЗначениеЗаполнено(ПолученныеДанные.СтатьяРасходов) Тогда
		
		СтатьяРасходов = Неопределено;
		Если ДанныеИБ <> Неопределено Тогда
			СтатьяРасходов = ДанныеИБ.СтатьяРасходов;
		КонецЕсли;	
		
		Если Не ЗначениеЗаполнено(СтатьяРасходов) Тогда
			СтатьяРасходов = ЭлементПоУмолчанию(КомпонентыОбмена, "СтатьяРасходовСписаниеТоваров");
		КонецЕсли;
			
		ПолученныеДанные.СтатьяРасходов = СтатьяРасходов;
		Если ДанныеИБ <> Неопределено Тогда
			ДанныеИБ.СтатьяРасходов = СтатьяРасходов;
		КонецЕсли;
		
          ПолученныеДанные.Подразделение=ПолученныеДанные.Склад.Подразделение;

	КонецЕсли;
      
	
КонецПроцедуры

Процедура Расш1_ОтложеннаяОбработка_СписаниеНедостачТоваров(Объект)
   Объект.ИсточникИнформацииОЦенахДляПечати=Перечисления.ИсточникиИнформацииОЦенахДляПечати.ПоСебестоимости;	
КонецПроцедуры

Процедура Расш1_ОтложеннаяОбработка_ПеремещениеТоваров(Объект)
	//Если НЕ ЗначениеЗаполнено(Объект.ВариантПриемкиТоваров) Тогда
		Объект.ВариантПриемкиТоваров = Константы.ВариантПриемкиТоваров.Получить();
	//КонецЕсли;
КонецПроцедуры


&После("ВыполнитьПроцедуруМодуляМенеджера")
Процедура Расш1_ВыполнитьПроцедуруМодуляМенеджера(ИмяПроцедуры, Параметры)
	Если ИмяПроцедуры = "Расш1_ОтложеннаяОбработка_СписаниеНедостачТоваров" Тогда 
		Расш1_ОтложеннаяОбработка_СписаниеНедостачТоваров(Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "Расш1_ОтложеннаяОбработка_ПеремещениеТоваров" Тогда 
		Расш1_ОтложеннаяОбработка_ПеремещениеТоваров(
			Параметры.Объект);
	КонецЕсли;
КонецПроцедуры

&Вместо("ДобавитьПКО_Документ_ПеремещениеТоваров_Получение")
Процедура Расш1_ДобавитьПКО_Документ_ПеремещениеТоваров_Получение(ПравилаКонвертации)
		
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПеремещениеТоваров_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПеремещениеТоваров;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПеремещениеТоваров";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПеремещениеТоваров_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПеремещениеТоваров_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "Расш1_ОтложеннаяОбработка_ПеремещениеТоваров";

	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаРаспоряжения",      "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",         "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "СкладОтправитель",      "СкладОтправитель", , "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваШапки, "СкладПолучатель",       "СкладПолучатель", , "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваШапки, "Проведен",              "", 1);
	ДобавитьПКС(СвойстваШапки, "Статус",                "", 1);
	ДобавитьПКС(СвойстваШапки, "ХозяйственнаяОперация", "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары", "");
	ДобавитьПКС(СвойстваТЧ, "Количество",         "", 1);
	ДобавитьПКС(СвойстваТЧ, "КоличествоУпаковок", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",       "", 1, "Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "Упаковка",           "", 1);
	ДобавитьПКС(СвойстваТЧ, "Характеристика",     "", 1, "Справочник_ХарактеристикиНоменклатуры");

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

&Вместо("ОтложеннаяОбработка_ВозвратТоваровПоставщику")
Процедура Расш1_ОтложеннаяОбработка_ВозвратТоваровПоставщику(Объект, ОбъектМодифицирован, КомпонентыОбмена)
	ЗаполнениеПартнераВШапкеДокумента(Объект);
	//ЗаполнениеСоглашенияСПоставщикомВШапкеДокумента(Объект, КомпонентыОбмена.ПараметрыКонвертации);
	Запрос = Новый Запрос("ВЫБРАТЬ
			|	ДокументПоступления.Соглашение КАК Соглашение
			|ИЗ
			|	Документ.ПриобретениеТоваровУслуг КАК ДокументПоступления
			|ГДЕ
			|	ДокументПоступления.Ссылка =&док");
	
	    Запрос.УстановитьПараметр("док",   Объект.ДокументПоступления);
		
		Объект.Соглашение = Запрос.Выполнить().Выгрузить()[0].Соглашение;

	
	
	ЗаполнитьПараметрыДоставки(Объект);
	ЗаполнитьТипНалогооблаженияПоУмолчанию(Объект);
	
	Если Не ЗначениеЗаполнено(Объект.ПорядокОплаты) Тогда
		Если ЗначениеЗаполнено(Объект.Соглашение)
			И (ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами")) Тогда
			
			УсловияЗакупок = ЗакупкиСервер.ПолучитьУсловияЗакупок(Объект.Соглашение);
			
			Если Не ЗначениеЗаполнено(УсловияЗакупок.ИспользуютсяДоговорыКонтрагентов) 
				Или Не УсловияЗакупок.ИспользуютсяДоговорыКонтрагентов Тогда
				Объект.ПорядокОплаты = УсловияЗакупок.ПорядокОплаты;
			Иначе
				Объект.ПорядокОплаты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Договор, "ПорядокОплаты");
			КонецЕсли;
			
		ИначеЕсли ЗначениеЗаполнено(Объект.Договор)
			И (ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСКлиентами")) Тогда
			Объект.ПорядокОплаты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Договор, "ПорядокОплаты");
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ПорядокОплаты) Тогда
		ВалютаОплаты         = ДенежныеСредстваСервер.ПолучитьВалютуОплаты(, Объект.БанковскийСчетОрганизации);
		Объект.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.ПолучитьПорядокОплатыПоУмолчанию(Объект.Валюта,
			Объект.НалогообложениеНДС,
			ВалютаОплаты);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти


