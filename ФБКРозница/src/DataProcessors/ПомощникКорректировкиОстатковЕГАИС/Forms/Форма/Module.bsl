
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьНастройкиОбменаЕГАИС();
	
	ОпределитьТранспортныйМодуль(ЭтотОбъект);
	
	Если Не ЗначениеЗаполнено(ТранспортныйМодуль) Тогда
		ВызватьИсключение НСтр("ru='Отсутствуют доступные транспортные модули'");
	КонецЕсли;
	
	ЗаполнитьДокументыЗапросаОстатковНаСервере(Объект.ОрганизацияЕГАИС, Объект.ОстаткиВРегистре1, Объект.ОстаткиВРегистре2);
	
	ИнициализироватьПомощник();
	
	// Устанавливаем текущую таблицу переходов
	СценарийКорректировкиОстатковЕГАИС();
	
	ВыполнитьПредварительнуюПроверкуДанных = Истина;
	
	Объект.КорректироватьОстаткиНемаркируемойПродукции = Константы.ВыгружатьПродажиНемаркируемойПродукцииВЕГАИС.Получить();
	
	ГосударственныеИнформационныеСистемыПереопределяемый.УстановитьПараметрыВыбораНоменклатуры(ЭтотОбъект, "ТаблицаОстатковНоменклатура");
	
	ГосударственныеИнформационныеСистемыПереопределяемый.УстановитьСвязиПараметровВыбораСНоменклатурой(
		ЭтотОбъект,
		"ТаблицаОстатковХарактеристика",
		"Элементы.ТаблицаОстатков.ТекущиеДанные.Номенклатура");
	
	Если НЕ Объект.ОрганизацияЕГАИС.Пустая() Тогда
		ОпределитьТипТорговогоОбъектаНаСервере(Объект.ОрганизацияЕГАИС, Объект.ЭтоСклад, Объект.ЭтоТорговыйЗал);
	КонецЕсли;
	
	УстановитьВидимостьПриИзмененииТорговогоОбъекта(ЭтотОбъект);
	
	СобытияФормЕГАИСПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Позиционируемся на первом шаге помощника
	УстановитьПорядковыйНомерПерехода(1);
	
	УстановитьПредставлениеДатыОстатковЕГАИС();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменениеСопоставленияАлкогольнойПродукцииЕГАИС" Тогда
		
		ОбновитьДанныеТаблицыОстатков("");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Элементы.ПанельНавигации.ТекущаяСтраница = Элементы.СтраницаНавигацииОкончание
		ИЛИ ЗакрытьФормуБезусловно Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.СозданныеДокументы.Количество() > 0 Тогда
		
		Отказ = Истина;
		
		ТекстВопроса = НСтр("ru = 'Перед завершением работы помощника требуется удалить созданные документы'");
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru='Удалить'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru='Отмена'"));
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ЗакрытиеФормы_Подтверждение", ЭтотОбъект),
			ТекстВопроса,
			Кнопки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если ВРег(НавигационнаяСсылкаФорматированнойСтроки) = ВРег("ПоказатьНезагруженныеДокументы") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		НачатьЗапускПриложения(
			Новый ОписаниеОповещения("ЗапускПриложения_Завершение", ЭтотОбъект),
			"http://" + ТранспортныйМодуль.АдресУТМ + ":" + Формат(ТранспортныйМодуль.ПортУТМ, "ЧГ=0") + "/opt/out");
		
	ИначеЕсли СтрНайти(ВРег(НавигационнаяСсылкаФорматированнойСтроки), ВРег("НеподтвержденныеДокументы")) <> 0
		ИЛИ СтрНайти(ВРег(НавигационнаяСсылкаФорматированнойСтроки), ВРег("НеоформленныеДокументы")) <> 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ИмяДокумента = Сред(НавигационнаяСсылкаФорматированнойСтроки, СтрНайти(НавигационнаяСсылкаФорматированнойСтроки, "_") + 1);
		
		ТипЗначения = ПредопределенноеЗначение("Документ." + ИмяДокумента + ".ПустаяСсылка");
		
		Если СтрНайти(ВРег(НавигационнаяСсылкаФорматированнойСтроки), ВРег("НеподтвержденныеДокументы")) <> 0 Тогда
			МассивСтрок = НеподтвержденныеДокументы.НайтиСтроки(Новый Структура("ТипЗначения", ТипЗначения));
		Иначе
			МассивСтрок = НеоформленныеДокументы.НайтиСтроки(Новый Структура("ТипЗначения", ТипЗначения));
		КонецЕсли;
		
		МассивСсылок = Новый Массив;
		Для Каждого СтрокаТЧ Из МассивСтрок Цикл
			МассивСсылок.Добавить(СтрокаТЧ.ДокументСсылка);
		КонецЦикла;
		
		Отбор = Новый Структура;
		Отбор.Вставить("Ссылка", МассивСсылок);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Отбор", Отбор);
		
		Если ЕстьФормаДокумента(ИмяДокумента, "ФормаСпискаДокументов") Тогда
			ОткрытьФорму("Документ." + ИмяДокумента + ".Форма.ФормаСпискаДокументов", ПараметрыФормы, ЭтотОбъект);
		Иначе
			ОткрытьФорму("Документ." + ИмяДокумента + ".ФормаСписка", ПараметрыФормы, ЭтотОбъект);
		КонецЕсли;
		
	ИначеЕсли ВРег(НавигационнаяСсылкаФорматированнойСтроки) = ВРег("ЗапроситьОстаткиЕГАИС") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ЗапроситьОстаткиЕГАИС();
		
	ИначеЕсли ВРег(Лев(НавигационнаяСсылкаФорматированнойСтроки, СтрДлина("СоздатьПриказ"))) = ВРег("СоздатьПриказ") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		МассивСсылок = Новый Массив;
		МассивСсылок.Добавить(Объект.ОрганизацияЕГАИС);
		
		ЗначенияРеквизитов = ЗначенияРеквизитовОбъектов(МассивСсылок, "Контрагент, ТорговыйОбъект")[Объект.ОрганизацияЕГАИС];
		
		КорректировкаОстатковЕГАИСКлиентПереопределяемый.СоздатьПриказНаПроведениеИнвентаризации(ЭтотОбъект, ЗначенияРеквизитов.Контрагент, ЗначенияРеквизитов.ТорговыйОбъект);
		
	ИначеЕсли ВРег(НавигационнаяСсылкаФорматированнойСтроки) = ВРег("ОткрытьСписокИнвентаризаций") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		МассивСсылок = Новый Массив;
		МассивСсылок.Добавить(Объект.ОрганизацияЕГАИС);
		
		ЗначенияРеквизитов = ЗначенияРеквизитовОбъектов(МассивСсылок, "Контрагент, ТорговыйОбъект")[Объект.ОрганизацияЕГАИС];
		
		КорректировкаОстатковЕГАИСКлиентПереопределяемый.ОткрытьСписокИнвентаризаций(ЭтотОбъект, ЗначенияРеквизитов.Контрагент, ЗначенияРеквизитов.ТорговыйОбъект);
		
	ИначеЕсли ВРег(НавигационнаяСсылкаФорматированнойСтроки) = ВРег("ВыполнитьОбмен") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ИнтеграцияЕГАИСКлиент.ВыполнитьОбмен(
			Объект.ОрганизацияЕГАИС,
			Новый ОписаниеОповещения("ПриЗавершенииВыполненияОбмена", ЭтотОбъект));
		
	ИначеЕсли Лев(ВРег(НавигационнаяСсылкаФорматированнойСтроки), СтрДлина("СформироватьОтчетПоИзлишкамНедостачам")) = ВРег("СформироватьОтчетПоИзлишкамНедостачам") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ТорговыйОбъект = ЗначениеРеквизитаОбъекта(Объект.ОрганизацияЕГАИС, "ТорговыйОбъект");
		
		КорректировкаОстатковЕГАИСКлиентПереопределяемый.СформироватьОтчетПоИзлишкамНедостачам(ЭтотОбъект, ТорговыйОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКоманд

&НаКлиенте
Процедура ПерейтиНазад(Команда)
	
	ИзменитьПорядковыйНомерПерехода(-1);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиВперед(Команда)
	
	ИзменитьПорядковыйНомерПерехода(+1);
	
КонецПроцедуры

&НаКлиенте
Процедура ПовторитьПроверку(Команда)
	
	ВыполнитьПредварительнуюПроверкуДанных();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеТаблицыОстатков(Команда)
	
	ТекущаяАлкогольнаяПродукция = Неопределено;
	
	ТекущиеДанные = Элементы.ТаблицаОстатков.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущаяАлкогольнаяПродукция = ?(ЗначениеЗаполнено(ТекущиеДанные.АлкогольнаяПродукция), ТекущиеДанные.АлкогольнаяПродукция, ТекущиеДанные.Номенклатура);
	КонецЕсли;
	
	ОбновитьДанныеТаблицыОстатковНаСервере();
	
	ПроверитьКорректностьОстатков();
	
	ПараметрыОтбора = Новый Структура;
	Если ТипЗнч(ТекущаяАлкогольнаяПродукция) = Тип("СправочникСсылка.КлассификаторАлкогольнойПродукцииЕГАИС") Тогда
		ПараметрыОтбора.Вставить("АлкогольнаяПродукция", ТекущаяАлкогольнаяПродукция);
	Иначе
		ПараметрыОтбора.Вставить("Номенклатура", ТекущаяАлкогольнаяПродукция);
	КонецЕсли;
	
	МассивСтрок = Объект.ТаблицаОстатков.НайтиСтроки(ПараметрыОтбора);
	Если МассивСтрок.Количество() > 0 Тогда
		Элементы.ТаблицаОстатков.ТекущаяСтрока = МассивСтрок[0].ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуКорректировки(Команда)
	
	РассчитатьКоличествоКорректировки();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбнулитьКоличество(Команда)
	
	Для Каждого ИдентификаторСтроки Из Элементы.ТаблицаКорректировки.ВыделенныеСтроки Цикл
		ДанныеСтроки = Элементы.ТаблицаКорректировки.ДанныеСтроки(ИдентификаторСтроки);
		ДанныеСтроки.ПередатьВРегистр2 = 0;
		ДанныеСтроки.ПоставитьНаБалансВРегистр1 = 0;
		ДанныеСтроки.ПоставитьНаБалансВРегистр2 = 0;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВЕГАИС(Команда)
	
	МассивСсылок = Новый Массив;
	
	Для Каждого СтрокаТаблицы Из Объект.СозданныеДокументы Цикл
		МассивСсылок.Добавить(СтрокаТаблицы.ДокументСсылка);
	КонецЦикла;
	
	СписокДокументов = ПолучитьПроведенныеДокументыДляВыгрузки(МассивСсылок);
	Если СписокДокументов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ДокументСсылка Из СписокДокументов Цикл
		ИнтеграцияЕГАИСКлиент.ПодготовитьКПередаче(ДокументСсылка, ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПередайтеДанные"));
	КонецЦикла;
	
	ИзменитьПорядковыйНомерПерехода(+1);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиВНачало(Команда)
	
	ИнициализироватьПомощник();
	
	ОчиститьСлужебныеРеквизиты();
	
	// Позиционируемся на первом шаге помощника
	УстановитьПорядковыйНомерПерехода(1);
	
КонецПроцедуры

&НаКлиенте
Процедура Готово(Команда)
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура СопоставитьКлассификаторы(Команда)
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("Товары", ПоместитьНесопоставленныеТоварыВоВремененноеХранилище());
	ПараметрыОткрытияФормы.Вставить("РежимСопоставленияПоНакладной", Истина);
	
	СобытияФормЕГАИСКлиентПереопределяемый.ОткрытьФормуСопоставленияКлассификаторовЕГАИС(ЭтотОбъект,, ПараметрыОткрытияФормы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ОрганизацияЕГАИСПриИзменении(Элемент)
	
	ОчиститьСлужебныеРеквизиты();
	
	ОпределитьТранспортныйМодуль(ЭтотОбъект);
	
	ОпределитьТипТорговогоОбъекта();
	
	ЗаполнитьДокументыЗапросаОстатков();
	
	УстановитьВидимостьПриИзмененииТорговогоОбъекта(ЭтотОбъект);
	
	ВыполнитьПредварительнуюПроверкуДанных = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура КорректироватьТекущиеОстаткиПриИзменении(Элемент)
	
	ПриИзмененииВариантаКорректировкиОстатков(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОстаткиВРегистре1ПриИзменении(Элемент)
	
	УстановитьПредставлениеДатыОстатковЕГАИС();
	
КонецПроцедуры

&НаКлиенте
Процедура ОстаткиВРегистре2ПриИзменении(Элемент)
	
	УстановитьПредставлениеДатыОстатковЕГАИС();
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантОтбораСтрокОстатковПриИзменении(Элемент)
	
	УстановитьОтборТаблицыОстатков(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОстатковВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаОстатков.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если (Поле = Элементы.ТаблицаОстатковНоменклатура ИЛИ Поле = Элементы.ТаблицаОстатковХарактеристика)
		И ЗначениеЗаполнено(ТекущиеДанные.АлкогольнаяПродукция) Тогда
		СтандартнаяОбработка = Ложь;
		ИнтеграцияЕГАИСКлиент.ОткрытьФормуСопоставленияАлкогольнойПродукции(
			ТекущиеДанные.АлкогольнаяПродукция,
			ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОстатковПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОстатковПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОстатковПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если Объект.ТаблицаКорректировки.Количество() > 0 Тогда
		Объект.ТаблицаКорректировки.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОстатковНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОстатковНоменклатураОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОстатковХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОстатковХарактеристикаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОстатковАлкогольнаяПродукцияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаОстатков.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ПроверяемыеСтроки = Новый Массив;
		ПроверяемыеСтроки.Добавить(ТекущиеДанные);
		
		ПроверитьКорректностьОстатков(ПроверяемыеСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОстатковАлкогольнаяПродукцияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаОстатков.ТекущиеДанные;
	
	Если ТекущиеДанные.Сопоставлено ИЛИ ТекущиеДанные.ОстатокСкладБазЕд = 0 И ТекущиеДанные.ОстатокТорговыйЗалБазЕд = 0 Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОстатковАлкогольнаяПродукцияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОстатковАлкогольнаяПродукцияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаОстатков.ТекущиеДанные;
	Если ТекущиеДанные.АлкогольнаяПродукция = ВыбранноеЗначение Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	МассивСтрок = Объект.ТаблицаОстатков.НайтиСтроки(Новый Структура("АлкогольнаяПродукция", ВыбранноеЗначение));
	
	ДанныеСопоставления = ЗаписатьСоответствиеАлкогольнойПродукции(ТекущиеДанные.Номенклатура, ТекущиеДанные.Характеристика, ВыбранноеЗначение);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСопоставления);
	
	Для Каждого СтрокаТаблицы Из МассивСтрок Цикл
		
		ЗаполнитьЗначенияСвойств(
			ТекущиеДанные,
			СтрокаТаблицы,,
			"Номенклатура, Характеристика, ОстатокСклад, ОстатокТорговыйЗал, ОстатокСкладБазЕд, ОстатокТорговыйЗалБазЕд, " + РеквизитыСопоставления());
			
		ТекущиеДанные.ОстатокСклад = ТекущиеДанные.ОстатокСклад + СтрокаТаблицы.ОстатокСклад;
		ТекущиеДанные.ОстатокТорговыйЗал = ТекущиеДанные.ОстатокТорговыйЗал + СтрокаТаблицы.ОстатокТорговыйЗал;
		ТекущиеДанные.ОстатокСкладБазЕд = ТекущиеДанные.ОстатокСкладБазЕд + СтрокаТаблицы.ОстатокСкладБазЕд;
		ТекущиеДанные.ОстатокТорговыйЗалБазЕд = ТекущиеДанные.ОстатокТорговыйЗалБазЕд + СтрокаТаблицы.ОстатокТорговыйЗалБазЕд;
		
		Объект.ТаблицаОстатков.Удалить(СтрокаТаблицы);
		Прервать;
	КонецЦикла;
	
	ПроверяемыеСтроки = Новый Массив;
	ПроверяемыеСтроки.Добавить(ТекущиеДанные);
	
	ПроверитьКорректностьОстатков(ПроверяемыеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКорректировкиНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКорректировкиНоменклатураОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКорректировкиХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКорректировкиХарактеристикаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СозданныеДокументыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		ОткрытьФорму(
			"Документ." + ИмяДокумента(Элемент.ТекущиеДанные.Ссылка) + ".ФормаОбъекта",
			Новый Структура("Ключ", Элемент.ТекущиеДанные.Ссылка),
			ЭтотОбъект,,,,
			Новый ОписаниеОповещения("ПросмотрДокумента_Завершение", ЭтотОбъект));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСтраницПомощника

&НаКлиенте
Функция Подключаемый_СтраницаНачальныеДанные_ПриПереходеДалее(Отказ)
	
	Если НЕ ЗначениеЗаполнено(Объект.ОрганизацияЕГАИС) Тогда
		ТекстСообщения = НСтр("ru = 'Не выбрана организация ЕГАИС.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.ОрганизацияЕГАИС",, Отказ);
	Иначе
		МассивСсылок = Новый Массив;
		МассивСсылок.Добавить(Объект.ОрганизацияЕГАИС);
		
		ЗначенияРеквизитов = ЗначенияРеквизитовОбъектов(МассивСсылок, "Контрагент, ТорговыйОбъект")[Объект.ОрганизацияЕГАИС];
		
		Если ЗначенияРеквизитов = Неопределено ИЛИ НЕ ЗначениеЗаполнено(ЗначенияРеквизитов.Контрагент) Тогда
			ТекстСообщения = НСтр("ru = 'Организация ЕГАИС не сопоставлена с собственной организацией.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.ОрганизацияЕГАИС",, Отказ);
		КонецЕсли;
		
		Если ЗначенияРеквизитов = Неопределено ИЛИ НЕ ЗначениеЗаполнено(ЗначенияРеквизитов.ТорговыйОбъект) Тогда
			ТекстСообщения = НСтр("ru = 'Организация ЕГАИС не сопоставлена с торговым объектом.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.ОрганизацияЕГАИС",, Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если КорректироватьТекущиеОстатки = 0 Тогда
		Если НЕ ЗначениеЗаполнено(Объект.ОстаткиВРегистре1) Тогда
			ТекстСообщения = НСтр("ru = 'Не выбран документ запроса остатков по регистру №1.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.ОстаткиВРегистре1",, Отказ);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.ОстаткиВРегистре2) Тогда
			ТекстСообщения = НСтр("ru = 'Не выбран документ запроса остатков по регистру №2.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.ОстаткиВРегистре2",, Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если ОрганизацииЕГАИСБезНастроекОбмена.НайтиПоЗначению(Объект.ОрганизацияЕГАИС) <> Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Не удалось определить настройку обмена с УТМ.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	УстановитьДатуУчетныхОстатков();
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаПроверкаДанных_ПриОткрытии(Отказ, ПропуститьСтраницу, ЭтоПереходДалее)
	
	Если КорректироватьТекущиеОстатки = 0 Тогда
		ПропуститьСтраницу = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
	Если ЭтоПереходДалее Тогда
		Если ВыполнитьПредварительнуюПроверкуДанных Тогда
			ВыполнитьПредварительнуюПроверкуДанных();
		КонецЕсли;
		
		Если Элементы.ПанельНеПодтвержденныеДокументы.ТекущаяСтраница = Элементы.СтраницаНеПодтвержденныеДокументы_НетДокументов
			И Элементы.ПанельНеЗагруженныеДокументы.ТекущаяСтраница = Элементы.СтраницаНеЗагруженныеДокументы_НетДокументов
			И (Объект.ОстаткиВРегистре1.Пустая() ИЛИ Объект.ОстаткиВРегистре2.Пустая()) Тогда
			ЗапроситьОстаткиЕГАИС();
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаПроверкаДанных_ПриПереходеДалее(Отказ)
	
	ЗаполнитьТаблицуОстатковНаСервере();
	
	ПроверитьКорректностьОстатков();
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаПросмотрОстатков_ПриОткрытии(Отказ, ПропуститьСтраницу, ЭтоПереходДалее)
	
	ПроверитьКорректностьОстатков();
	
	МассивСтрок = Объект.ТаблицаОстатков.НайтиСтроки(Новый Структура("ЕстьОшибка", Истина));
	Если МассивСтрок.Количество() = 0 Тогда
		ПропуститьСтраницу = Истина;
	Иначе
		ТекущийЭлемент = Элементы.ТаблицаОстатков;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаПросмотрОстатков_ПриПереходеДалее(Отказ)
	
	Если Объект.ТаблицаКорректировки.Количество() = 0 Тогда
		РассчитатьКоличествоКорректировки();
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаСозданиеДокументов_ПриПереходеДалее(Отказ)
	
	Если НЕ СозданиеДокументовЗавершено Тогда
		СоздатьДокументыКорректировкиОстатков();
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаОкончание_ПриОткрытии(Отказ, ПропуститьСтраницу, ЭтоПереходДалее)
	
	Объект.СозданныеДокументы.Очистить();
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаОкончание_ПриПереходеНазад(Отказ)
	
	Если Объект.СозданныеДокументы.Количество() > 0 Тогда
		Отказ = Истина;
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru='Продолжить'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru='Отмена'"));
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения("УдалениеДокументов_Подтверждение", ЭтотОбъект),
			НСтр("ru='Созданные документы будут удалены'"),
			Кнопки);
	Иначе
		СозданиеДокументовЗавершено = Ложь;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область НачальныеДанные

&НаКлиентеНаСервереБезКонтекста
Процедура ПриИзмененииВариантаКорректировкиОстатков(Форма)
	
	Форма.Объект.ТаблицаОстатков.Очистить();
	Форма.Объект.ТаблицаКорректировки.Очистить();
	Форма.Объект.СозданныеДокументы.Очистить();
	
	Если Форма.КорректироватьТекущиеОстатки = 1 Тогда
		Форма.Элементы.ПанельВариантКорректировкиОстатков.ТекущаяСтраница = Форма.Элементы.СтраницаКорректировкаНаТекущуюДату;
	Иначе
		Форма.Элементы.ПанельВариантКорректировкиОстатков.ТекущаяСтраница = Форма.Элементы.СтраницаКорректировкаНаДатуОстатковЕГАИС;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьПомощник()
	
	КорректироватьТекущиеОстатки = 1;
	ПриИзмененииВариантаКорректировкиОстатков(ЭтотОбъект);
	
	ВариантОтбораСтрокОстатков = "Ошибочные";
	УстановитьОтборТаблицыОстатков(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДатуУчетныхОстатков()
	
	Объект.ДатаУчетныхОстатков = '00010101';
	
	Если КорректироватьТекущиеОстатки = 1 Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ДатаУчетныхОстатков = ДатаОстатковЕГАИС();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПредставлениеДатыОстатковЕГАИС()
	
	ПредставлениеЭлемента = НСтр("ru='На дату получения остатков из ЕГАИС (%1)'");
	
	ДатаОстатковЕГАИС = ДатаОстатковЕГАИС();
	
	Если НЕ ЗначениеЗаполнено(ДатаОстатковЕГАИС) Тогда
		ПредставлениеЭлемента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПредставлениеЭлемента, НСтр("ru='не определена'"));
	Иначе
		ПредставлениеЭлемента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПредставлениеЭлемента, ДатаОстатковЕГАИС);
	КонецЕсли;
	
	ЭлементСписка = Элементы.КорректироватьТекущиеОстатки.СписокВыбора.НайтиПоЗначению(0);
	Если ЭлементСписка <> Неопределено Тогда
		ЭлементСписка.Представление = ПредставлениеЭлемента;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ДатаОстатковЕГАИС()
	
	МассивСсылок = Новый Массив;
	Если НЕ Объект.ОстаткиВРегистре1.Пустая() Тогда
		МассивСсылок.Добавить(Объект.ОстаткиВРегистре1);
	КонецЕсли;
	
	Если НЕ Объект.ОстаткиВРегистре2.Пустая() Тогда
		МассивСсылок.Добавить(Объект.ОстаткиВРегистре2);
	КонецЕсли;
	
	Если МассивСсылок.Количество() = 0 Тогда
		Возврат '00010101';
	КонецЕсли;
	
	ДатаОстатковРегистра1 = '00010101';
	ДатаОстатковРегистра2 = '00010101';
	
	РеквизитыОбъектов = ЗначенияРеквизитовОбъектов(МассивСсылок, "Дата");
	
	Если Объект.ЭтоСклад И РеквизитыОбъектов[Объект.ОстаткиВРегистре1] <> Неопределено Тогда
		ДатаОстатковРегистра1 = РеквизитыОбъектов[Объект.ОстаткиВРегистре1].Дата;
	КонецЕсли;
	Если Объект.ЭтоТорговыйЗал И РеквизитыОбъектов[Объект.ОстаткиВРегистре2] <> Неопределено Тогда
		ДатаОстатковРегистра2 = РеквизитыОбъектов[Объект.ОстаткиВРегистре2].Дата;
	КонецЕсли;
	
	Возврат Макс(ДатаОстатковРегистра1, ДатаОстатковРегистра2);
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьДокументыЗапросаОстатков()
	
	Если НЕ Объект.ОрганизацияЕГАИС.Пустая() Тогда
		ЗаполнитьДокументыЗапросаОстатковНаСервере(Объект.ОрганизацияЕГАИС, Объект.ОстаткиВРегистре1, Объект.ОстаткиВРегистре2);
	Иначе
		Объект.ОстаткиВРегистре1 = ПредопределенноеЗначение("Документ.ОстаткиЕГАИС.ПустаяСсылка");
		Объект.ОстаткиВРегистре2 = ПредопределенноеЗначение("Документ.ОстаткиЕГАИС.ПустаяСсылка");
	КонецЕсли;
	
	УстановитьПредставлениеДатыОстатковЕГАИС();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДокументыЗапросаОстатковНаСервере(ОрганизацияЕГАИС, ОстаткиПоРегистру1, ОстаткиПоРегистру2)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОрганизацияЕГАИС", ОрганизацияЕГАИС);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОстаткиЕГАИС.Дата КАК Дата,
	|	ОстаткиЕГАИС.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ОстаткиЕГАИС КАК ОстаткиЕГАИС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
	|		ПО ОстаткиЕГАИС.Ссылка = СтатусыДокументовЕГАИС.Документ
	|ГДЕ
	|	ОстаткиЕГАИС.ОрганизацияЕГАИС = &ОрганизацияЕГАИС
	|	И ОстаткиЕГАИС.Проведен
	|	И ОстаткиЕГАИС.ВидДокумента = &ВидДокумента
	|	И СтатусыДокументовЕГАИС.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиОстатковЕГАИС.ПолученыОстатки)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ";
	
	Запрос.УстановитьПараметр("ВидДокумента", Перечисления.ВидыДокументовЕГАИС.ЗапросОстатковВРегистре1);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ОстаткиПоРегистру1 = РезультатЗапроса.Выгрузить()[0].Ссылка;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ВидДокумента", Перечисления.ВидыДокументовЕГАИС.ЗапросОстатковВРегистре2);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ОстаткиПоРегистру2 = РезультатЗапроса.Выгрузить()[0].Ссылка;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаДанных

&НаКлиенте
Процедура ВыполнитьПредварительнуюПроверкуДанных()
	
	ВыполнитьПредварительнуюПроверкуДанныхНаСервере();
	
	Если Элементы.ПанельНеПодтвержденныеДокументы.ТекущаяСтраница = Элементы.СтраницаНеПодтвержденныеДокументы_НетДокументов Тогда
		Элементы.ПанельНеЗагруженныеДокументы.ТекущаяСтраница = Элементы.СтраницаНеЗагруженныеДокументы_НетДокументов;
		Элементы.НадписьОстаткиЕГАИС_ЗапроситьОстатки.Доступность = Истина;
		
		ПроверкаДанных_ДоступностьКомандыДалее();
	Иначе
		ИнтеграцияЕГАИСКлиент.ПроверитьВходящиеДокументы(
			Новый ОписаниеОповещения("ПроверкаДанных_ПослеПроверкиНезагруженныхДокументов", ЭтотОбъект),
			Объект.ОрганизацияЕГАИС);
	КонецЕсли;
	
	ВыполнитьПредварительнуюПроверкуДанных = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПредварительнуюПроверкуДанныхНаСервере()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПроверитьНаличиеИнвентаризации();
	
	НайтиДокументыТребующиеОформления();
	
	НайтиДокументыОжидающиеПодтверждения();
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьНаличиеИнвентаризации()
	
	Если КорректироватьТекущиеОстатки = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстОшибкиСклад = "";
	ТекстОшибкиТорговыйЗал = "";
	ОтчетПоРасхождениямСклад = Истина;
	ОтчетПоРасхождениямТорговыйЗал = Истина;
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ОрганизацияЕГАИС, "Контрагент, ТорговыйОбъект");
	
	КорректировкаОстатковЕГАИСПереопределяемый.ПроверитьНаличиеИнвентаризации(
		ЗначенияРеквизитов.Контрагент,
		ЗначенияРеквизитов.ТорговыйОбъект,
		ТекстОшибкиСклад,
		ТекстОшибкиТорговыйЗал,
		ОтчетПоРасхождениямСклад,
		ОтчетПоРасхождениямТорговыйЗал);
		
	Если НЕ ПустаяСтрока(ТекстОшибкиСклад) Тогда
		Элементы.ПанельПроверкаИнвентаризацииНаСкладе.ТекущаяСтраница = Элементы.СтраницаПроверкаИнвентаризацииНаСкладе_Предупреждение;
		Если ТипЗнч(ТекстОшибкиСклад) = Тип("ФорматированнаяСтрока") Тогда
			ТекстОшибкиПроверкиИнвентаризацииНаСкладе = ТекстОшибкиСклад;
		Иначе
			ТекстОшибкиПроверкиИнвентаризацииНаСкладе = Новый ФорматированнаяСтрока(ТекстОшибкиСклад);
		КонецЕсли;
	Иначе
		Если ОтчетПоРасхождениямСклад Тогда
			Элементы.ПанельПроверкаИнвентаризацииНаСкладе.ТекущаяСтраница = Элементы.СтраницаПроверкаИнвентаризацииНаСкладе_Успешно;
		Иначе
			Элементы.ПанельПроверкаИнвентаризацииНаСкладе.ТекущаяСтраница = Элементы.СтраницаПроверкаИнвентаризацииНаСкладе_УспешноБезОтчета;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекстОшибкиТорговыйЗал) Тогда
		Элементы.ПанельПроверкаИнвентаризацииВТорговомЗале.ТекущаяСтраница = Элементы.СтраницаПроверкаИнвентаризацииВТорговомЗале_Предупреждение;
		Если ТипЗнч(ТекстОшибкиТорговыйЗал) = Тип("ФорматированнаяСтрока") Тогда
			ТекстОшибкиПроверкиИнвентаризацииВТорговомЗале = ТекстОшибкиТорговыйЗал;
		Иначе
			ТекстОшибкиПроверкиИнвентаризацииВТорговомЗале = Новый ФорматированнаяСтрока(ТекстОшибкиТорговыйЗал);
		КонецЕсли;
	Иначе
		Если ОтчетПоРасхождениямТорговыйЗал Тогда
			Элементы.ПанельПроверкаИнвентаризацииВТорговомЗале.ТекущаяСтраница = Элементы.СтраницаПроверкаИнвентаризацииВТорговомЗале_Успешно;
		Иначе
			Элементы.ПанельПроверкаИнвентаризацииВТорговомЗале.ТекущаяСтраница = Элементы.СтраницаПроверкаИнвентаризацииВТорговомЗале_УспешноБезОтчета;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НайтиДокументыТребующиеОформления()
	
	НеоформленныеДокументы.Очистить();
	
	ТаблицаДокументов = НеоформленныеДокументы.Выгрузить();
	
	КорректировкаОстатковЕГАИСПереопределяемый.ПриПроверкеНеоформленныхДокументов(ТаблицаДокументов, Объект.ОрганизацияЕГАИС);
	
	НеоформленныеДокументы.Загрузить(ТаблицаДокументов);
	
	Если НеоформленныеДокументы.Количество() = 0 Тогда
		Элементы.ПанельНеоформленныеДокументы.ТекущаяСтраница = Элементы.СтраницаНеоформленныеДокументы_НетДокументов;
	Иначе
		Элементы.ПанельНеоформленныеДокументы.ТекущаяСтраница = Элементы.СтраницаНеоформленныеДокументы_ЕстьДокументы;
		
		ТекстОшибкиНеоформленныеДокументы = СформироватьТекстОшибкиИзТаблицыДокументов(НеоформленныеДокументы, "НеоформленныеДокументы");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НайтиДокументыОжидающиеПодтверждения()
	
	НеподтвержденныеДокументы.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОрганизацияЕГАИС"                         , Объект.ОрганизацияЕГАИС);
	Запрос.УстановитьПараметр("ВсеТребующиеОжиданияАктПостановкиНаБаланс", Документы.АктПостановкиНаБалансЕГАИС.ВсеТребующиеОжидания());
	Запрос.УстановитьПараметр("ВсеТребующиеОжиданияАктСписания"          , Документы.АктСписанияЕГАИС.ВсеТребующиеОжидания());
	Запрос.УстановитьПараметр("ВсеТребующиеОжиданияВозвратИзРегистра2"   , Документы.ВозвратИзРегистра2ЕГАИС.ВсеТребующиеОжидания());
	Запрос.УстановитьПараметр("ВсеТребующиеОжиданияПередачаВРегистр2"    , Документы.ПередачаВРегистр2ЕГАИС.ВсеТребующиеОжидания());
	Запрос.УстановитьПараметр("ВсеТребующиеОжиданияТТНИсходящая"         , Документы.ТТНИсходящаяЕГАИС.ВсеТребующиеОжидания());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	АктПостановкиНаБалансЕГАИС.Ссылка КАК ДокументСсылка,
	|	ЗНАЧЕНИЕ(Документ.АктПостановкиНаБалансЕГАИС.ПустаяСсылка) КАК ТипЗначения
	|ИЗ
	|	Документ.АктПостановкиНаБалансЕГАИС КАК АктПостановкиНаБалансЕГАИС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
	|		ПО АктПостановкиНаБалансЕГАИС.Ссылка = СтатусыДокументовЕГАИС.Документ
	|ГДЕ
	|	АктПостановкиНаБалансЕГАИС.ОрганизацияЕГАИС = &ОрганизацияЕГАИС
	|	И АктПостановкиНаБалансЕГАИС.Проведен
	|	И СтатусыДокументовЕГАИС.ДальнейшееДействие1 В(&ВсеТребующиеОжиданияАктПостановкиНаБаланс)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АктСписанияЕГАИС.Ссылка,
	|	ЗНАЧЕНИЕ(Документ.АктСписанияЕГАИС.ПустаяСсылка)
	|ИЗ
	|	Документ.АктСписанияЕГАИС КАК АктСписанияЕГАИС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
	|		ПО АктСписанияЕГАИС.Ссылка = СтатусыДокументовЕГАИС.Документ
	|ГДЕ
	|	АктСписанияЕГАИС.ОрганизацияЕГАИС = &ОрганизацияЕГАИС
	|	И АктСписанияЕГАИС.Проведен
	|	И СтатусыДокументовЕГАИС.ДальнейшееДействие1 В(&ВсеТребующиеОжиданияАктСписания)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВозвратИзРегистра2ЕГАИС.Ссылка,
	|	ЗНАЧЕНИЕ(Документ.ВозвратИзРегистра2ЕГАИС.ПустаяСсылка)
	|ИЗ
	|	Документ.ВозвратИзРегистра2ЕГАИС КАК ВозвратИзРегистра2ЕГАИС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
	|		ПО ВозвратИзРегистра2ЕГАИС.Ссылка = СтатусыДокументовЕГАИС.Документ
	|ГДЕ
	|	ВозвратИзРегистра2ЕГАИС.ОрганизацияЕГАИС = &ОрганизацияЕГАИС
	|	И ВозвратИзРегистра2ЕГАИС.Проведен
	|	И СтатусыДокументовЕГАИС.ДальнейшееДействие1 В(&ВсеТребующиеОжиданияВозвратИзРегистра2)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПередачаВРегистр2ЕГАИС.Ссылка,
	|	ЗНАЧЕНИЕ(Документ.ПередачаВРегистр2ЕГАИС.ПустаяСсылка)
	|ИЗ
	|	Документ.ПередачаВРегистр2ЕГАИС КАК ПередачаВРегистр2ЕГАИС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
	|		ПО ПередачаВРегистр2ЕГАИС.Ссылка = СтатусыДокументовЕГАИС.Документ
	|ГДЕ
	|	ПередачаВРегистр2ЕГАИС.ОрганизацияЕГАИС = &ОрганизацияЕГАИС
	|	И ПередачаВРегистр2ЕГАИС.Проведен
	|	И СтатусыДокументовЕГАИС.ДальнейшееДействие1 В(&ВсеТребующиеОжиданияПередачаВРегистр2)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТТНИсходящаяЕГАИС.Ссылка,
	|	ЗНАЧЕНИЕ(Документ.ТТНИсходящаяЕГАИС.ПустаяСсылка)
	|ИЗ
	|	Документ.ТТНИсходящаяЕГАИС КАК ТТНИсходящаяЕГАИС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
	|		ПО ТТНИсходящаяЕГАИС.Ссылка = СтатусыДокументовЕГАИС.Документ
	|ГДЕ
	|	ТТНИсходящаяЕГАИС.Грузоотправитель = &ОрганизацияЕГАИС
	|	И ТТНИсходящаяЕГАИС.Проведен
	|	И СтатусыДокументовЕГАИС.ДальнейшееДействие1 В(&ВсеТребующиеОжиданияТТНИсходящая)";
	
	ТаблицаДокументов = НеподтвержденныеДокументы.Выгрузить();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаТаблицы = ТаблицаДокументов.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);
	КонецЦикла;
	
	КорректировкаОстатковЕГАИСПереопределяемый.ПриПроверкеНеподтвержденныхДокументов(ТаблицаДокументов, Объект.ОрганизацияЕГАИС);
	
	НеПодтвержденныеДокументы.Загрузить(ТаблицаДокументов);
	
	Если НеПодтвержденныеДокументы.Количество() = 0 Тогда
		Элементы.ПанельНеПодтвержденныеДокументы.ТекущаяСтраница = Элементы.СтраницаНеПодтвержденныеДокументы_НетДокументов;
	Иначе
		Элементы.ПанельНеПодтвержденныеДокументы.ТекущаяСтраница = Элементы.СтраницаНеПодтвержденныеДокументы_ЕстьДокументы;
		
		ТекстОшибкиНеподтвержденныеДокументы = СформироватьТекстОшибкиИзТаблицыДокументов(НеподтвержденныеДокументы, "НеподтвержденныеДокументы");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СформироватьТекстОшибкиИзТаблицыДокументов(ТаблицаДокументов, ИмяТаблицы)
	
	ТипыДокументов = Новый Массив;
	ТипыДокументов.Добавить(Метаданные.Документы.АктПостановкиНаБалансЕГАИС);
	ТипыДокументов.Добавить(Метаданные.Документы.АктСписанияЕГАИС);
	ТипыДокументов.Добавить(Метаданные.Документы.ВозвратИзРегистра2ЕГАИС);
	ТипыДокументов.Добавить(Метаданные.Документы.ПередачаВРегистр2ЕГАИС);
	ТипыДокументов.Добавить(Метаданные.Документы.ТТНВходящаяЕГАИС);
	ТипыДокументов.Добавить(Метаданные.Документы.ТТНИсходящаяЕГАИС);
	
	ВидыДокументов = Новый Массив;
	
	Для Каждого ТипДокумента Из ТипыДокументов Цикл
		МассивСтрок = ТаблицаДокументов.НайтиСтроки(Новый Структура("ТипЗначения", Документы[ТипДокумента.Имя].ПустаяСсылка()));
		Если МассивСтрок.Количество() > 0 Тогда
			Если ВидыДокументов.Количество() > 0 Тогда
				ВидыДокументов.Добавить(", ");
			КонецЕсли;
			ВидыДокументов.Добавить(
			Новый ФорматированнаяСтрока(ТипДокумента.ПредставлениеСписка + " (" + МассивСтрок.Количество() + ")",,,,
			ИмяТаблицы + "_" + ТипДокумента.Имя));
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый ФорматированнаяСтрока(ВидыДокументов);
	
КонецФункции

&НаКлиенте
Процедура ПроверкаДанных_ПослеПроверкиНезагруженныхДокументов(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ ПустаяСтрока(Результат.ТекстОшибки) Тогда
		СтрокиПроверки = Новый Массив;
		СтрокиПроверки.Добавить(НСтр("ru='Ошибка получения списка входящих документов:'"));
		СтрокиПроверки.Добавить(Символы.ПС);
		СтрокиПроверки.Добавить(Результат.ТекстОшибки);
		
		Элементы.ПанельНезагруженныеДокументы.ТекущаяСтраница = Элементы.СтраницаНезагруженныеДокументы_Ошибка;
		ТекстОшибкиНезагруженныеДокументы = Новый ФорматированнаяСтрока(СтрокиПроверки,, ОбщегоНазначенияКлиент.ЦветСтиля("ПоясняющийОшибкуТекст"));
		Элементы.НадписьОстаткиЕГАИС_ЗапроситьОстатки.Доступность = Ложь;
	Иначе
		Если Результат.ДанныеОбработки.Количество() > 0 Тогда
			
			СтрокиПроверки = Новый Массив;
			СтрокиПроверки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='В УТМ присутствуют незагруженные'"),, ОбщегоНазначенияКлиент.ЦветСтиля("ПоясняющийТекст")));
			СтрокиПроверки.Добавить(" ");
			СтрокиПроверки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='документы ('") + Результат.ДанныеОбработки.Количество() + ")",,,, "ПоказатьНезагруженныеДокументы"));
			СтрокиПроверки.Добавить(". ");
			СтрокиПроверки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='Выполнить обмен с ЕГАИС'"),,,, "ВыполнитьОбмен"));
			
			Элементы.ПанельНезагруженныеДокументы.ТекущаяСтраница = Элементы.СтраницаНезагруженныеДокументы_ЕстьДокументы;
			ТекстОшибкиНезагруженныеДокументы = Новый ФорматированнаяСтрока(СтрокиПроверки);
		
		Иначе
			Элементы.ПанельНезагруженныеДокументы.ТекущаяСтраница = Элементы.СтраницаНезагруженныеДокументы_НетДокументов;
		КонецЕсли;
		
		Элементы.НадписьОстаткиЕГАИС_ЗапроситьОстатки.Доступность = Истина;
	КонецЕсли;
	
	ПроверкаДанных_ДоступностьКомандыДалее();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаДанных_ДоступностьКомандыДалее()
	
	Элементы.ПерейтиВпередПроверкаДанных.Доступность = 
		Элементы.ПанельНезагруженныеДокументы.ТекущаяСтраница <> Элементы.СтраницаНезагруженныеДокументы_Ошибка
		И Элементы.ПанельОстаткиЕГАИС.ТекущаяСтраница = Элементы.СтраницаОстаткиЕГАИС_ОстаткиПолучены;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗавершенииВыполненияОбмена(Результат, ДополнительныеПараметры) Экспорт
	
	ВыполнитьПредварительнуюПроверкуДанных();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапускПриложения_Завершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ПолучениеОстатковЕГАИС

&НаКлиенте
Процедура ЗапроситьОстаткиЕГАИС()
	
	Если Элементы.ПанельНеподтвержденныеДокументы.ТекущаяСтраница <> Элементы.СтраницаНеподтвержденныеДокументы_НетДокументов
		ИЛИ Элементы.ПанельНезагруженныеДокументы.ТекущаяСтраница <> Элементы.СтраницаНезагруженныеДокументы_НетДокументов Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru='Запросить остатки'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru='Отмена'"));
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ЗапросОстатковЕГАИС_Подтверждение", ЭтотОбъект),
			НСтр("ru='Обнаружены ошибки в ходе предварительной проверки данных ЕГАИС'"), Кнопки);
		
	Иначе
		
		ЗапросОстатковЕГАИС_Подтверждение(КодВозвратаДиалога.Да, Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапросОстатковЕГАИС_Подтверждение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ПанельОстаткиЕГАИС.ТекущаяСтраница = Элементы.СтраницаОстаткиЕГАИС_ОжиданиеПолученияОстатков;
	Элементы.ПерейтиНазадПроверкаДанных.Доступность = Ложь;
	
	Объект.ОстаткиВРегистре1 = ПредопределенноеЗначение("Документ.ОстаткиЕГАИС.ПустаяСсылка");
	Объект.ОстаткиВРегистре2 = ПредопределенноеЗначение("Документ.ОстаткиЕГАИС.ПустаяСсылка");
	
	СоздатьДокументыЗапросаОстатков();
	
	ТекстОшибкиПолученияОстатковЕГАИС = "";
	
	ИнтеграцияЕГАИСКлиент.ПодготовитьКПередаче(
		Объект.ОстаткиВРегистре1,
		ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ЗапроситеОстатки"));
		
	ИнтеграцияЕГАИСКлиент.ПодготовитьКПередаче(
		Объект.ОстаткиВРегистре2,
		ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ЗапроситеОстатки"));
		
	ПодключитьОбработчикОжидания("ВыполнитьОбмен", 30, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбмен()
	
	ИнтеграцияЕГАИСКлиент.ВыполнитьОбмен(
		Объект.ОрганизацияЕГАИС,
		Новый ОписаниеОповещения("ПриЗавершенииОбмена", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗавершенииОбмена(Изменения, ДополнительныеПараметры) Экспорт
	
	ПолученыОстаткиПоРегистру1 = Ложь;
	ПолученыОстаткиПоРегистру2 = Ложь;
	
	Если ПустаяСтрока(ТекстОшибкиПолученияОстатковЕГАИС) Тогда
		
		СтатусыДокументов = Новый Соответствие;
		Если НЕ Объект.ОстаткиВРегистре1.Пустая() ИЛИ НЕ Объект.ОстаткиВРегистре2.Пустая() Тогда
			МассивДокументов = Новый Массив;
			МассивДокументов.Добавить(Объект.ОстаткиВРегистре1);
			МассивДокументов.Добавить(Объект.ОстаткиВРегистре2);
			
			СтатусыДокументов = СтатусыДокументовЕГАИС(МассивДокументов);
		КонецЕсли;
		
		СтатусОбработки = СтатусыДокументов[Объект.ОстаткиВРегистре1];
		
		Если СтатусОбработки <> Неопределено Тогда
			Если СтатусОбработки.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиОстатковЕГАИС.ОшибкаПередачи") Тогда
				ТекстОшибкиПолученияОстатковЕГАИС = СтатусОбработки.ТекстОшибки;
				Если ПустаяСтрока(ТекстОшибкиПолученияОстатковЕГАИС) Тогда
					ТекстОшибкиПолученияОстатковЕГАИС = НСтр("ru='Ошибка получения остатков из ЕГАИС.'");
				Иначе
					ТекстОшибкиПолученияОстатковЕГАИС = НСтр("ru='Ошибка получения остатков из ЕГАИС:'") + Символы.ПС + ТекстОшибкиПолученияОстатковЕГАИС;
				КонецЕсли;
			ИначеЕсли СтатусОбработки.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиОстатковЕГАИС.ПолученыОстатки") Тогда
				ПолученыОстаткиПоРегистру1 = Истина;
			КонецЕсли;
		КонецЕсли;
		
		СтатусОбработки = СтатусыДокументов[Объект.ОстаткиВРегистре2];
		
		Если СтатусОбработки <> Неопределено Тогда
			Если СтатусОбработки.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиОстатковЕГАИС.ОшибкаПередачи") Тогда
				ТекстОшибкиПолученияОстатковЕГАИС = СтатусОбработки.ТекстОшибки;
				Если ПустаяСтрока(ТекстОшибкиПолученияОстатковЕГАИС) Тогда
					ТекстОшибкиПолученияОстатковЕГАИС = НСтр("ru='Ошибка получения остатков из ЕГАИС.'");
				Иначе
					ТекстОшибкиПолученияОстатковЕГАИС = НСтр("ru='Ошибка получения остатков из ЕГАИС:'") + Символы.ПС + ТекстОшибкиПолученияОстатковЕГАИС;
				КонецЕсли;
			ИначеЕсли СтатусОбработки.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиОстатковЕГАИС.ПолученыОстатки") Тогда
				ПолученыОстаткиПоРегистру2 = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ПолученыОстаткиПоРегистру1 И ПолученыОстаткиПоРегистру2 Тогда
		
		Элементы.ПанельОстаткиЕГАИС.ТекущаяСтраница = Элементы.СтраницаОстаткиЕГАИС_ОстаткиПолучены;
		Элементы.ПерейтиНазадПроверкаДанных.Доступность = Истина;
		
		ОтключитьОбработчикОжидания("ВыполнитьОбмен");
		
	ИначеЕсли НЕ ПустаяСтрока(ТекстОшибкиПолученияОстатковЕГАИС) Тогда
		
		Элементы.ПанельОстаткиЕГАИС.ТекущаяСтраница = Элементы.СтраницаОстаткиЕГАИС_ОшибкаПолученияОстатков;
		Элементы.ПерейтиНазадПроверкаДанных.Доступность = Истина;
		
		ОтключитьОбработчикОжидания("ВыполнитьОбмен");
		
	КонецЕсли;
	
	ПроверкаДанных_ДоступностьКомандыДалее();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СтатусыДокументовЕГАИС(МассивДокументов)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокДокументов", МассивДокументов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтатусыДокументовЕГАИС.Документ КАК Документ,
	|	СтатусыДокументовЕГАИС.Статус КАК Статус
	|ИЗ
	|	РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
	|ГДЕ
	|	СтатусыДокументовЕГАИС.Документ В(&СписокДокументов)";
	
	ТекстыПоследнихОшибок = Новый Соответствие;
	
	Для Каждого ДокументСсылка Из МассивДокументов Цикл
		ТекстыПоследнихОшибок.Вставить(ДокументСсылка, ТекстПоследнейОшибкиОбмена(ДокументСсылка));
	КонецЦикла;
	
	Результат = Новый Соответствие;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтатусСтруктура = Новый Структура;
		СтатусСтруктура.Вставить("Статус", Выборка.Статус);
		СтатусСтруктура.Вставить("ТекстОшибки", "");
		
		Если ТекстыПоследнихОшибок[Выборка.Документ] <> Неопределено Тогда
			СтатусСтруктура.ТекстОшибки = ТекстыПоследнихОшибок[Выборка.Документ];
		КонецЕсли;
		
		Результат.Вставить(Выборка.Документ, СтатусСтруктура);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция СоздатьДокументыЗапросаОстатков()
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	Если Объект.ОстаткиВРегистре1.Пустая() Тогда
		ОбработкаОбъект.СоздатьДокументЗапросаОстатков(Перечисления.ВидыДокументовЕГАИС.ЗапросОстатковВРегистре1);
	КонецЕсли;
	
	Если Объект.ОстаткиВРегистре2.Пустая() Тогда
		ОбработкаОбъект.СоздатьДокументЗапросаОстатков(Перечисления.ВидыДокументовЕГАИС.ЗапросОстатковВРегистре2);
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
	ЗаполнитьСлужебныеРеквизитыТабличныхЧастей();
	
КонецФункции

&НаСервереБезКонтекста
Функция ТекстПоследнейОшибкиОбмена(ДокументСсылка)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Документ", ДокументСсылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕГАИСПрисоединенныеФайлы.Описание КАК Описание,
	|	ЕГАИСПрисоединенныеФайлы.ДатаСоздания КАК ДатаСоздания,
	|	ЕГАИСПрисоединенныеФайлы.СтатусОбработки КАК СтатусОбработки
	|ИЗ
	|	Справочник.ЕГАИСПрисоединенныеФайлы КАК ЕГАИСПрисоединенныеФайлы
	|ГДЕ
	|	ЕГАИСПрисоединенныеФайлы.Документ = &Документ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаСоздания УБЫВ";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Если Выборка.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийЕГАИС.Ошибка Тогда
			Возврат Выборка.Описание;
		КонецЕсли;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

#КонецОбласти

#Область ПросмотрОстатков

&НаСервере
Процедура ЗаполнитьТаблицуОстатковНаСервере()
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ЗаполнитьТаблицыОстатков();
	
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
	ОбновитьДанныеТаблицыОстатковНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеТаблицыОстатковНаСервере()
	
	ЗаполнитьСводнуюТаблицуОстатков();
	
	ЗаполнитьСлужебныеРеквизитыТабличныхЧастей();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСводнуюТаблицуОстатков()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("УчетныеОстатки"                             , Объект.УчетныеОстатки.Выгрузить());
	Запрос.УстановитьПараметр("ОстаткиЕГАИС"                               , Объект.ОстаткиЕГАИС.Выгрузить());
	Запрос.УстановитьПараметр("КорректироватьОстаткиНемаркируемойПродукции", Объект.КорректироватьОстаткиНемаркируемойПродукции);
	Запрос.УстановитьПараметр("ПустаяНоменклатура"                         , ПустаяНоменклатура);
	Запрос.УстановитьПараметр("ПустаяХарактеристика"                       , ПустаяХарактеристика);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УчетныеОстатки.Номенклатура КАК Номенклатура,
	|	УчетныеОстатки.Характеристика КАК Характеристика,
	|	УчетныеОстатки.ПродаетсяВРозлив КАК ПродаетсяВРозлив,
	|	УчетныеОстатки.ОбъемДАЛ КАК ОбъемДАЛ,
	|	УчетныеОстатки.ТипПродукции КАК ТипПродукции,
	|	УчетныеОстатки.ОстатокСкладБазЕд КАК ОстатокСкладБазЕд,
	|	УчетныеОстатки.ОстатокТорговыйЗалБазЕд КАК ОстатокТорговыйЗалБазЕд,
	|	УчетныеОстатки.ОстатокСклад КАК ОстатокСклад,
	|	УчетныеОстатки.ОстатокТорговыйЗал КАК ОстатокТорговыйЗал
	|ПОМЕСТИТЬ УчетныеОстатки
	|ИЗ
	|	&УчетныеОстатки КАК УчетныеОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УчетныеОстатки.Номенклатура КАК Номенклатура,
	|	УчетныеОстатки.Характеристика КАК Характеристика,
	|	СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция КАК АлкогольнаяПродукция
	|ПОМЕСТИТЬ УчетныеОстаткиСопоставление
	|ИЗ
	|	УчетныеОстатки КАК УчетныеОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
	|		ПО УчетныеОстатки.Номенклатура = СоответствиеНоменклатурыЕГАИС.Номенклатура
	|			И УчетныеОстатки.Характеристика = СоответствиеНоменклатурыЕГАИС.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УчетныеОстаткиСопоставление.АлкогольнаяПродукция КАК АлкогольнаяПродукция
	|ПОМЕСТИТЬ УчетныеОстаткиАлкогольнаяПродукция
	|ИЗ
	|	УчетныеОстаткиСопоставление КАК УчетныеОстаткиСопоставление
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УчетныеОстаткиАлкогольнаяПродукция.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	КОЛИЧЕСТВО(СоответствиеНоменклатурыЕГАИС.Номенклатура) КАК КоличествоЗаписей
	|ПОМЕСТИТЬ УчетныеОстаткиСопоставленнаяАлкогольнаяПродукция
	|ИЗ
	|	УчетныеОстаткиАлкогольнаяПродукция КАК УчетныеОстаткиАлкогольнаяПродукция
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
	|		ПО УчетныеОстаткиАлкогольнаяПродукция.АлкогольнаяПродукция = СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция
	|
	|СГРУППИРОВАТЬ ПО
	|	УчетныеОстаткиАлкогольнаяПродукция.АлкогольнаяПродукция
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АлкогольнаяПродукция
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УчетныеОстаткиСопоставление.Номенклатура КАК Номенклатура,
	|	УчетныеОстаткиСопоставление.Характеристика КАК Характеристика,
	|	УчетныеОстаткиСопоставление.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	УчетныеОстаткиСопоставленнаяАлкогольнаяПродукция.КоличествоЗаписей КАК КоличествоЗаписей
	|ПОМЕСТИТЬ УчетныеОстаткиСопоставлениеКоличество
	|ИЗ
	|	УчетныеОстаткиСопоставление КАК УчетныеОстаткиСопоставление
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ УчетныеОстаткиСопоставленнаяАлкогольнаяПродукция КАК УчетныеОстаткиСопоставленнаяАлкогольнаяПродукция
	|		ПО УчетныеОстаткиСопоставление.АлкогольнаяПродукция = УчетныеОстаткиСопоставленнаяАлкогольнаяПродукция.АлкогольнаяПродукция
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ОстаткиЕГАИС.АлкогольнаяПродукция КАК Справочник.КлассификаторАлкогольнойПродукцииЕГАИС) КАК АлкогольнаяПродукция,
	|	ОстаткиЕГАИС.ОстатокРегистр1 КАК ОстатокРегистр1,
	|	ОстаткиЕГАИС.ОстатокРегистр2 КАК ОстатокРегистр2
	|ПОМЕСТИТЬ ОстаткиЕГАИС
	|ИЗ
	|	&ОстаткиЕГАИС КАК ОстаткиЕГАИС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	КОЛИЧЕСТВО(СоответствиеНоменклатурыЕГАИС.Номенклатура) КАК КоличествоЗаписей
	|ПОМЕСТИТЬ ОстаткиЕГАИССопоставленнаяАлкогольнаяПродукция
	|ИЗ
	|	РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОстаткиЕГАИС КАК ОстаткиЕГАИС
	|		ПО СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция = ОстаткиЕГАИС.АлкогольнаяПродукция
	|
	|СГРУППИРОВАТЬ ПО
	|	СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(СоответствиеНоменклатурыЕГАИС.Номенклатура) = 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиЕГАИС.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	ОстаткиЕГАИС.ОстатокРегистр1 КАК ОстатокРегистр1,
	|	ОстаткиЕГАИС.ОстатокРегистр2 КАК ОстатокРегистр2,
	|	ЕСТЬNULL(СоответствиеНоменклатурыЕГАИС.Номенклатура, &ПустаяНоменклатура) КАК Номенклатура,
	|	ЕСТЬNULL(СоответствиеНоменклатурыЕГАИС.Характеристика, &ПустаяХарактеристика) КАК Характеристика
	|ПОМЕСТИТЬ ОстаткиЕГАИССопоставленные
	|ИЗ
	|	РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОстаткиЕГАИССопоставленнаяАлкогольнаяПродукция КАК ОстаткиЕГАИССопоставленнаяАлкогольнаяПродукция
	|		ПО СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция = ОстаткиЕГАИССопоставленнаяАлкогольнаяПродукция.АлкогольнаяПродукция
	|		ПРАВОЕ СОЕДИНЕНИЕ ОстаткиЕГАИС КАК ОстаткиЕГАИС
	|		ПО СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция = ОстаткиЕГАИС.АлкогольнаяПродукция
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	|	ВложенныйЗапрос.Характеристика КАК Характеристика,
	|	ВложенныйЗапрос.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	МАКСИМУМ(ВложенныйЗапрос.ПродаетсяВРозлив) КАК ПродаетсяВРозлив,
	|	МАКСИМУМ(ВложенныйЗапрос.ОбъемДАЛ) КАК ОбъемДАЛ,
	|	МАКСИМУМ(ВложенныйЗапрос.ТипПродукции) КАК ТипПродукции,
	|	СУММА(ВложенныйЗапрос.ОстатокСкладБазЕд) КАК ОстатокСкладБазЕд,
	|	СУММА(ВложенныйЗапрос.ОстатокТорговыйЗалБазЕд) КАК ОстатокТорговыйЗалБазЕд,
	|	СУММА(ВложенныйЗапрос.ОстатокСклад) КАК ОстатокСклад,
	|	СУММА(ВложенныйЗапрос.ОстатокТорговыйЗал) КАК ОстатокТорговыйЗал,
	|	СУММА(ВложенныйЗапрос.ОстатокРегистр1) КАК ОстатокРегистр1,
	|	СУММА(ВложенныйЗапрос.ОстатокРегистр2) КАК ОстатокРегистр2,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.Номенклатура <> &ПустаяНоменклатура
	|			ТОГДА ПРЕДСТАВЛЕНИЕ(ВложенныйЗапрос.Номенклатура)
	|		ИНАЧЕ ВложенныйЗапрос.АлкогольнаяПродукция.Наименование
	|	КОНЕЦ КАК Наименование
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА ЕСТЬNULL(УчетныеОстаткиСопоставлениеКоличество.КоличествоЗаписей, 0) <= 1
	|				ТОГДА УчетныеОстатки.Номенклатура
	|			ИНАЧЕ &ПустаяНоменклатура
	|		КОНЕЦ КАК Номенклатура,
	|		ВЫБОР
	|			КОГДА ЕСТЬNULL(УчетныеОстаткиСопоставлениеКоличество.КоличествоЗаписей, 0) <= 1
	|				ТОГДА УчетныеОстатки.Характеристика
	|			ИНАЧЕ &ПустаяХарактеристика
	|		КОНЕЦ КАК Характеристика,
	|		ЕСТЬNULL(УчетныеОстаткиСопоставлениеКоличество.АлкогольнаяПродукция, ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка)) КАК АлкогольнаяПродукция,
	|		УчетныеОстатки.ПродаетсяВРозлив КАК ПродаетсяВРозлив,
	|		УчетныеОстатки.ОбъемДАЛ КАК ОбъемДАЛ,
	|		УчетныеОстатки.ТипПродукции КАК ТипПродукции,
	|		УчетныеОстатки.ОстатокСкладБазЕд КАК ОстатокСкладБазЕд,
	|		УчетныеОстатки.ОстатокТорговыйЗалБазЕд КАК ОстатокТорговыйЗалБазЕд,
	|		УчетныеОстатки.ОстатокСклад КАК ОстатокСклад,
	|		УчетныеОстатки.ОстатокТорговыйЗал КАК ОстатокТорговыйЗал,
	|		0 КАК ОстатокРегистр1,
	|		0 КАК ОстатокРегистр2
	|	ИЗ
	|		УчетныеОстатки КАК УчетныеОстатки
	|			ЛЕВОЕ СОЕДИНЕНИЕ УчетныеОстаткиСопоставлениеКоличество КАК УчетныеОстаткиСопоставлениеКоличество
	|			ПО УчетныеОстатки.Номенклатура = УчетныеОстаткиСопоставлениеКоличество.Номенклатура
	|				И УчетныеОстатки.Характеристика = УчетныеОстаткиСопоставлениеКоличество.Характеристика
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОстаткиЕГАИС.Номенклатура,
	|		ОстаткиЕГАИС.Характеристика,
	|		ОстаткиЕГАИС.АлкогольнаяПродукция,
	|		ВЫБОР
	|			КОГДА ОстаткиЕГАИС.АлкогольнаяПродукция.ТипПродукции = ЗНАЧЕНИЕ(Перечисление.ТипыПродукцииЕГАИС.Неупакованная)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ,
	|		0,
	|		ОстаткиЕГАИС.АлкогольнаяПродукция.ТипПродукции,
	|		0,
	|		0,
	|		0,
	|		0,
	|		ОстаткиЕГАИС.ОстатокРегистр1,
	|		ОстаткиЕГАИС.ОстатокРегистр2
	|	ИЗ
	|		ОстаткиЕГАИССопоставленные КАК ОстаткиЕГАИС) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Характеристика,
	|	ВложенныйЗапрос.АлкогольнаяПродукция,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.Номенклатура <> &ПустаяНоменклатура
	|			ТОГДА ПРЕДСТАВЛЕНИЕ(ВложенныйЗапрос.Номенклатура)
	|		ИНАЧЕ ВложенныйЗапрос.АлкогольнаяПродукция.Наименование
	|	КОНЕЦ";
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	ТаблицаЗапроса.Сортировать("Наименование");
	
	ТаблицаЗапроса.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	
	НомерСтроки = 1;
	Для Каждого СтрокаТаблицы Из ТаблицаЗапроса Цикл
		СтрокаТаблицы.НомерСтроки = НомерСтроки;
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	КорректировкаОстатковЕГАИСПереопределяемый.ЗаполнитьКоэффициентПересчетаВДАЛ(ТаблицаЗапроса);
	
	Объект.ТаблицаОстатков.Загрузить(ТаблицаЗапроса);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКорректностьОстатков(ПроверяемыеСтроки = Неопределено)
	
	Если ПроверяемыеСтроки = Неопределено Тогда
		МассивСтрок = Объект.ТаблицаОстатков.НайтиСтроки(Новый Структура("ЕстьОшибка", Истина));
	Иначе
		МассивСтрок = ПроверяемыеСтроки;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из МассивСтрок Цикл
		СтрокаТаблицы.ЕстьОшибка = Ложь;
		СтрокаТаблицы.ТекстОшибки = "";
		СтрокаТаблицы.ИндексКартинкиСтрок = 0;
	КонецЦикла;
	
	
	// Проверка заполнения реквизита ОбъемДАЛ для разливной продукции.
	Если ПроверяемыеСтроки = Неопределено Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("ПродаетсяВРозлив", Истина);
		Отбор.Вставить("ОбъемДАЛ", 0);
		
		МассивСтрок = Объект.ТаблицаОстатков.НайтиСтроки(Отбор);
	Иначе
		МассивСтрок = Новый Массив;
		Для Каждого СтрокаТаблицы Из ПроверяемыеСтроки Цикл
			Если СтрокаТаблицы.ПродаетсяВРозлив И СтрокаТаблицы.ОбъемДАЛ = 0 Тогда
				МассивСтрок.Добавить(СтрокаТаблицы);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если МассивСтрок.Количество() <> 0 Тогда
		Для Каждого СтрокаТаблицы Из МассивСтрок Цикл
			СтрокаТаблицы.ЕстьОшибка = Истина;
			СтрокаТаблицы.ТекстОшибки = НСтр("ru='Не указан объем в декалитрах базовой единицы измерения.'");
			СтрокаТаблицы.ИндексКартинкиСтрок = 1;
		КонецЦикла;
	КонецЕсли;
	
	
	// Проверка заполнения признака продажи в розлив.
	Если ПроверяемыеСтроки = Неопределено Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("ПродаетсяВРозлив", Ложь);
		Отбор.Вставить("ТипПродукции", ПредопределенноеЗначение("Перечисление.ТипыПродукцииЕГАИС.Неупакованная"));
		
		МассивСтрок = Объект.ТаблицаОстатков.НайтиСтроки(Отбор);
	Иначе
		МассивСтрок = Новый Массив;
		Для Каждого СтрокаТаблицы Из ПроверяемыеСтроки Цикл
			Если НЕ СтрокаТаблицы.ПродаетсяВРозлив
				И СтрокаТаблицы.ТипПродукции = ПредопределенноеЗначение("Перечисление.ТипыПродукцииЕГАИС.Неупакованная") Тогда
				МассивСтрок.Добавить(СтрокаТаблицы);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если МассивСтрок.Количество() <> 0 Тогда
		Для Каждого СтрокаТаблицы Из МассивСтрок Цикл
			СтрокаТаблицы.ЕстьОшибка = Истина;
			СтрокаТаблицы.ТекстОшибки = НСтр("ru='Не указан признак продажи в розлив.'");
			СтрокаТаблицы.ИндексКартинкиСтрок = 1;
		КонецЦикла;
	КонецЕсли;
	
	
	// Проверка отсутствия несопоставленной номенклатуры.
	Если ПроверяемыеСтроки = Неопределено Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("Сопоставлено", Ложь);
		МассивСтрок = Объект.ТаблицаОстатков.НайтиСтроки(Отбор);
	Иначе
		МассивСтрок = Новый Массив;
		Для Каждого СтрокаТаблицы Из ПроверяемыеСтроки Цикл
			Если НЕ СтрокаТаблицы.Сопоставлено Тогда
				МассивСтрок.Добавить(СтрокаТаблицы);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если МассивСтрок.Количество() <> 0 Тогда
		Для Каждого СтрокаТаблицы Из МассивСтрок Цикл
			СтрокаТаблицы.ЕстьОшибка = Истина;
			СтрокаТаблицы.ТекстОшибки = НСтр("ru='Номенклатура не сопоставлена с классификатором алкогольной продукции.'");
			СтрокаТаблицы.ИндексКартинкиСтрок = 1;
		КонецЦикла;
	КонецЕсли;
	
	
	Если ПроверяемыеСтроки = Неопределено Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("Номенклатура"          , ПустаяНоменклатура);
		Отбор.Вставить("Характеристика"        , ПустаяХарактеристика);
		Отбор.Вставить("СопоставленоКоличество", 0);
		
		МассивСтрок = Объект.ТаблицаОстатков.НайтиСтроки(Отбор);
	Иначе
		МассивСтрок = Новый Массив;
		Для Каждого СтрокаТаблицы Из ПроверяемыеСтроки Цикл
			Если СтрокаТаблицы.Номенклатура.Пустая() И СтрокаТаблицы.Характеристика.Пустая() И СтрокаТаблицы.СопоставленоКоличество = 0 Тогда
				МассивСтрок.Добавить(СтрокаТаблицы);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если МассивСтрок.Количество() <> 0 Тогда
		Для Каждого СтрокаТаблицы Из МассивСтрок Цикл
			СтрокаТаблицы.ЕстьОшибка = Истина;
			СтрокаТаблицы.ТекстОшибки = НСтр("ru='Номенклатура не сопоставлена с классификатором алкогольной продукции.'");
			СтрокаТаблицы.ИндексКартинкиСтрок = 1;
		КонецЦикла;
	КонецЕсли;
	
	
	Если Объект.ТаблицаОстатков.Количество() = 0 Тогда
		НоваяСтраница = Элементы.СтраницаПроверкаОстатковОшибка;
	ИначеЕсли Объект.ТаблицаОстатков.НайтиСтроки(Новый Структура("ЕстьОшибка", Истина)).Количество() > 0 Тогда
		НоваяСтраница = Элементы.СтраницаПроверкаОстатковПредупреждение;
	Иначе
		НоваяСтраница = Элементы.СтраницаПроверкаОстатковУспешно;
	КонецЕсли;
	
	Если Элементы.ПанельПроверкаОстатков.ТекущаяСтраница <> НоваяСтраница Тогда
		Элементы.ПанельПроверкаОстатков.ТекущаяСтраница = НоваяСтраница;
	КонецЕсли;
	
	УстановитьОтборТаблицыОстатков(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборТаблицыОстатков(Форма)
	
	Если Форма.ВариантОтбораСтрокОстатков = "Ошибочные" Тогда
		Форма.Элементы.ТаблицаОстатков.ОтборСтрок = Новый ФиксированнаяСтруктура("ЕстьОшибка", Истина);
	Иначе
		Форма.Элементы.ТаблицаОстатков.ОтборСтрок = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаписатьСоответствиеАлкогольнойПродукции(Номенклатура, Характеристика, АлкогольнаяПродукция)
	
	Результат = Новый Структура;
	Результат.Вставить("Номенклатура"               , Неопределено);
	Результат.Вставить("Характеристика"             , Неопределено);
	Результат.Вставить("АлкогольнаяПродукция"       , Неопределено);
	Результат.Вставить("Сопоставлено"               , Ложь);
	Результат.Вставить("СопоставленоКоличество"     , 0);
	Результат.Вставить("СопоставлениеНоменклатура"  , "");
	Результат.Вставить("СопоставлениеХарактеристика", "");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Характеристика);
	Запрос.УстановитьПараметр("АлкогольнаяПродукция", АлкогольнаяПродукция);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция КАК АлкогольнаяПродукция
	|ИЗ
	|	РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
	|ГДЕ
	|	СоответствиеНоменклатурыЕГАИС.Номенклатура = &Номенклатура
	|	И СоответствиеНоменклатурыЕГАИС.Характеристика = &Характеристика
	|	И СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция <> &АлкогольнаяПродукция";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВызватьИсключение НСтр("ru='Выбранная номенклатура имеет связку с другой алкогольной продукцией.'");
	КонецЕсли;
	
	Порядок = 0;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МАКСИМУМ(СоответствиеНоменклатурыЕГАИС.Порядок) КАК Порядок
	|ИЗ
	|	РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
	|ГДЕ
	|	СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция = &АлкогольнаяПродукция";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если ТипЗнч(Выборка.Порядок) = Тип("Число") Тогда
			Порядок = Выборка.Порядок;
		КонецЕсли;
	КонецЕсли;
	
	Запись = РегистрыСведений.СоответствиеНоменклатурыЕГАИС.СоздатьМенеджерЗаписи();
	Запись.Номенклатура         = Номенклатура;
	Запись.Характеристика       = Характеристика;
	Запись.АлкогольнаяПродукция = АлкогольнаяПродукция;
	Запись.Порядок              = Порядок + 1;
	Запись.Записать();
	
	ТаблицаСопоставления = Новый ТаблицаЗначений;
	ТаблицаСопоставления.Колонки.Добавить("АлкогольнаяПродукция", Новый ОписаниеТипов("СправочникСсылка.КлассификаторАлкогольнойПродукцииЕГАИС"));
	
	СтрокаТаблицы = ТаблицаСопоставления.Добавить();
	СтрокаТаблицы.АлкогольнаяПродукция = АлкогольнаяПродукция;
	
	ИнтеграцияЕГАИС.ЗаполнитьСопоставленнуюПродукцию(ТаблицаСопоставления);
	
	ЗаполнитьЗначенияСвойств(Результат, ТаблицаСопоставления[0]);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция РеквизитыСопоставления()
	
	Возврат "Сопоставлено, СопоставленоКоличество, СопоставлениеНоменклатура, СопоставлениеХарактеристика";
	
КонецФункции

#КонецОбласти

#Область СозданиеДокументов

&НаСервере
Процедура РассчитатьКоличествоКорректировки()
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.РассчитатьКоличествоКорректировки();
	
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
	ЗаполнитьСлужебныеРеквизитыТабличныхЧастей();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалениеДокументов_Подтверждение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьДокументыКорректировкиОстатков();
	
	ИзменитьПорядковыйНомерПерехода(-1);
	
КонецПроцедуры

&НаСервере
Процедура СоздатьДокументыКорректировкиОстатков()
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.СоздатьДокументыКорректировкиОстатков();
	
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
	ЗаполнитьСлужебныеРеквизитыТабличныхЧастей();
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		СозданныеДокументы,
		"СписокДокументов",
		Объект.СозданныеДокументы.Выгрузить().ВыгрузитьКолонку("ДокументСсылка"),
		Истина);
		
	СозданиеДокументовЗавершено = Истина;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДокументыКорректировкиОстатков()
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтатусыНовыхДокументов = Новый Массив;
	СтатусыНовыхДокументов.Добавить(Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.Черновик);
	СтатусыНовыхДокументов.Добавить(Перечисления.СтатусыОбработкиАктаСписанияЕГАИС.Черновик);
	СтатусыНовыхДокументов.Добавить(Перечисления.СтатусыОбработкиВозвратаИзРегистра2ЕГАИС.Черновик);
	СтатусыНовыхДокументов.Добавить(Перечисления.СтатусыОбработкиПередачиВРегистр2ЕГАИС.Черновик);
	
	НовыеДокументы = Объект.СозданныеДокументы.Выгрузить(, "ДокументСсылка").ВыгрузитьКолонку("ДокументСсылка");
	
	Если НовыеДокументы.Количество() > 0 Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("СтатусыНовыхДокументов", СтатусыНовыхДокументов);
		Запрос.УстановитьПараметр("НовыеДокументы", НовыеДокументы);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СтатусыДокументовЕГАИС.Документ КАК Документ
		|ИЗ
		|	РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
		|ГДЕ
		|	СтатусыДокументовЕГАИС.Документ В(&НовыеДокументы)
		|	И СтатусыДокументовЕГАИС.Статус В(&СтатусыНовыхДокументов)";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Док = Выборка.Документ.ПолучитьОбъект();
			Док.Удалить();
		КонецЦикла;
	КонецЕсли;
	
	Объект.СозданныеДокументы.Очистить();
	
	СозданиеДокументовЗавершено = Ложь;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИмяДокумента(ДокументСсылка)
	
	Возврат ДокументСсылка.Метаданные().Имя;
	
КонецФункции

&НаКлиенте
Процедура ПросмотрДокумента_Завершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Элементы.СозданныеДокументы.Обновить();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПроведенныеДокументыДляВыгрузки(МассивДокументов)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокДокументов", МассивДокументов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	АктПостановкиНаБалансЕГАИС.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.АктПостановкиНаБалансЕГАИС КАК АктПостановкиНаБалансЕГАИС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
	|		ПО АктПостановкиНаБалансЕГАИС.Ссылка = СтатусыДокументовЕГАИС.Документ
	|ГДЕ
	|	АктПостановкиНаБалансЕГАИС.Проведен
	|	И АктПостановкиНаБалансЕГАИС.Ссылка В(&СписокДокументов)
	|	И СтатусыДокументовЕГАИС.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.Черновик)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АктСписанияЕГАИС.Ссылка
	|ИЗ
	|	Документ.АктСписанияЕГАИС КАК АктСписанияЕГАИС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
	|		ПО АктСписанияЕГАИС.Ссылка = СтатусыДокументовЕГАИС.Документ
	|ГДЕ
	|	АктСписанияЕГАИС.Проведен
	|	И АктСписанияЕГАИС.Ссылка В(&СписокДокументов)
	|	И СтатусыДокументовЕГАИС.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиАктаСписанияЕГАИС.Черновик)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВозвратИзРегистра2ЕГАИС.Ссылка
	|ИЗ
	|	Документ.ВозвратИзРегистра2ЕГАИС КАК ВозвратИзРегистра2ЕГАИС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
	|		ПО ВозвратИзРегистра2ЕГАИС.Ссылка = СтатусыДокументовЕГАИС.Документ
	|ГДЕ
	|	ВозвратИзРегистра2ЕГАИС.Проведен
	|	И ВозвратИзРегистра2ЕГАИС.Ссылка В(&СписокДокументов)
	|	И СтатусыДокументовЕГАИС.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиВозвратаИзРегистра2ЕГАИС.Черновик)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПередачаВРегистр2ЕГАИС.Ссылка
	|ИЗ
	|	Документ.ПередачаВРегистр2ЕГАИС КАК ПередачаВРегистр2ЕГАИС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
	|		ПО ПередачаВРегистр2ЕГАИС.Ссылка = СтатусыДокументовЕГАИС.Документ
	|ГДЕ
	|	ПередачаВРегистр2ЕГАИС.Проведен
	|	И ПередачаВРегистр2ЕГАИС.Ссылка В(&СписокДокументов)
	|	И СтатусыДокументовЕГАИС.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиПередачиВРегистр2ЕГАИС.Черновик)";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СопоставлениеКлассификаторов

&НаСервере
Функция ПоместитьНесопоставленныеТоварыВоВремененноеХранилище()
	
	Товары = Объект.ТаблицаОстатков.Выгрузить(,"АлкогольнаяПродукция, Номенклатура, Характеристика");
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("АлкогольнаяПродукция", Справочники.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка());
	
	МассивСтрок = Товары.НайтиСтроки(ПараметрыОтбора);
	Для Каждого СтрокаТаблицы Из МассивСтрок Цикл
		Товары.Удалить(СтрокаТаблицы);
	КонецЦикла;
	
	Товары.Колонки.Добавить(
		"ИдентификаторУпаковки",
		Новый ОписаниеТипов(
			"Строка",,
			Новый КвалификаторыСтроки(50)));
	
	Возврат ПоместитьВоВременноеХранилище(Товары, УникальныйИдентификатор);
	
КонецФункции

#КонецОбласти

#Область МеханизмПомощникаКорректировкиОстатков

&НаСервере
Процедура СценарийКорректировкиОстатковЕГАИС()
	
	ТаблицаПереходов.Очистить();
	
	// 1. Исходные данные.
	ТаблицаПереходовНоваяСтрока(
		1,                                           // Порядковый номер перехода.
		"СтраницаНачальныеДанные",                   // Основная страница.
		"СтраницаНавигацииНачало",                   // Страница панели навигации.
		,                                            // Обработчик, вызываемый при открытии страницы.
		"СтраницаНачальныеДанные_ПриПереходеДалее"); // Обработчик, вызываемый перед переходом на следующую страницу.
		
		
	// 2. Проверка данных.
	ТаблицаПереходовНоваяСтрока(
		2,                                          // Порядковый номер перехода.
		"СтраницаПроверкаДанных",                   // Основная страница.
		"СтраницаНавигацииПроверкаДанных",          // Страница панели навигации.
		"СтраницаПроверкаДанных_ПриОткрытии",       // Обработчик, вызываемый при открытии страницы.
		"СтраницаПроверкаДанных_ПриПереходеДалее"); // Обработчик, вызываемый перед переходом на следующую страницу.
		
		
	// 3. Просмотр остатков.
	ТаблицаПереходовНоваяСтрока(
		3,                                            // Порядковый номер перехода.
		"СтраницаПросмотрОстатков",                   // Основная страница.
		"СтраницаНавигацииПросмотрОстатков",          // Страница панели навигации.
		"СтраницаПросмотрОстатков_ПриОткрытии",       // Обработчик, вызываемый при открытии страницы.
		"СтраницаПросмотрОстатков_ПриПереходеДалее"); // Обработчик, вызываемый перед переходом на следующую страницу.
		
		
	// 4. Создание корректировочных документов.
	ТаблицаПереходовНоваяСтрока(
		4,                                              // Порядковый номер перехода.
		"СтраницаСозданиеДокументов",                   // Основная страница.
		"СтраницаНавигацииСозданиеДокументов",          // Страница панели навигации.
		"",                                             // Обработчик, вызываемый при открытии страницы.
		"СтраницаСозданиеДокументов_ПриПереходеДалее"); // Обработчик, вызываемый перед переходом на следующую страницу.
		
	// 5. Выгрузка созданных документов.
	ТаблицаПереходовНоваяСтрока(
		5,                                     // Порядковый номер перехода.
		"СтраницаОкончание",                   // Основная страница.
		"СтраницаНавигацииВыгрузкаДокументов", // Страница панели навигации.
		,                                      // Обработчик, вызываемый при открытии страницы.
		,                                      // Обработчик, вызываемый перед переходом на следующую страницу.
		"СтраницаОкончание_ПриПереходеНазад"); // Обработчик, вызываемый перед переходом на предыдущую страницу.
		
	// 6. Просмотр результатов.
	ТаблицаПереходовНоваяСтрока(
		6,                                     // Порядковый номер перехода.
		"СтраницаОкончание",                   // Основная страница.
		"СтраницаНавигацииОкончание",          // Страница панели навигации.
		"СтраницаОкончание_ПриОткрытии");      // Обработчик, вызываемый при открытии страницы.
	
КонецПроцедуры

&НаСервере
Процедура ТаблицаПереходовНоваяСтрока(ПорядковыйНомерПерехода,
									ИмяОсновнойСтраницы,
									ИмяСтраницыНавигации,
									ИмяОбработчикаПриОткрытии = "",
									ИмяОбработчикаПриПереходеДалее = "",
									ИмяОбработчикаПриПереходеНазад = "",
									ДлительнаяОперация = Ложь,
									ИмяОбработчикаДлительнойОперации = "")
	НоваяСтрока = ТаблицаПереходов.Добавить();
	
	НоваяСтрока.ПорядковыйНомерПерехода = ПорядковыйНомерПерехода;
	НоваяСтрока.ИмяОсновнойСтраницы     = ИмяОсновнойСтраницы;
	НоваяСтрока.ИмяСтраницыНавигации    = ИмяСтраницыНавигации;
	
	НоваяСтрока.ИмяОбработчикаПриПереходеДалее = ИмяОбработчикаПриПереходеДалее;
	НоваяСтрока.ИмяОбработчикаПриПереходеНазад = ИмяОбработчикаПриПереходеНазад;
	НоваяСтрока.ИмяОбработчикаПриОткрытии      = ИмяОбработчикаПриОткрытии;
	
	НоваяСтрока.ДлительнаяОперация = ДлительнаяОперация;
	НоваяСтрока.ИмяОбработчикаДлительнойОперации = ИмяОбработчикаДлительнойОперации;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПорядковыйНомерПерехода(Итератор)
	
	ОчиститьСообщения();
	
	УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + Итератор);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПорядковыйНомерПерехода(Знач Значение)
	
	ЭтоПереходДалее = (Значение > ПорядковыйНомерПерехода);
	
	ПорядковыйНомерПерехода = Значение;
	
	Если ПорядковыйНомерПерехода < 0 Тогда
		
		ПорядковыйНомерПерехода = 0;
		
	КонецЕсли;
	
	ПорядковыйНомерПереходаПриИзменении(ЭтоПереходДалее);
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядковыйНомерПереходаПриИзменении(Знач ЭтоПереходДалее)
	
	// Выполняем обработчики событий перехода
	ВыполнитьОбработчикиСобытийПерехода(ЭтоПереходДалее);
	
	// Устанавливаем отображение страниц
	СтрокиПереходаТекущие = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не определена страница для отображения.'");
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	Элементы.ПанельОсновная.ТекущаяСтраница  = Элементы[СтрокаПереходаТекущая.ИмяОсновнойСтраницы];
	Элементы.ПанельНавигации.ТекущаяСтраница = Элементы[СтрокаПереходаТекущая.ИмяСтраницыНавигации];
	
	// Устанавливаем текущую кнопку по умолчанию
	ИменаКоманд = Новый Массив;
	ИменаКоманд.Добавить("ПерейтиВперед");
	ИменаКоманд.Добавить("ВыгрузитьВЕГАИС");
	ИменаКоманд.Добавить("Готово");
	
	Для Каждого ИмяКоманды Из ИменаКоманд Цикл
		Кнопка = ПолучитьКнопкуФормыПоИмениКоманды(Элементы.ПанельНавигации.ТекущаяСтраница, ИмяКоманды);
		
		Если Кнопка <> Неопределено Тогда
			Кнопка.КнопкаПоУмолчанию = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ЭтоПереходДалее И СтрокаПереходаТекущая.ДлительнаяОперация Тогда
		
		ПодключитьОбработчикОжидания("ВыполнитьОбработчикДлительнойОперации", 1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбработчикиСобытийПерехода(Знач ЭтоПереходДалее)
	
	// Обработчики событий переходов
	Если ЭтоПереходДалее Тогда
		
		СтрокиПерехода = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода - 1));
		
		Если СтрокиПерехода.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		СтрокаПерехода = СтрокиПерехода[0];
		
		// обработчик ПриПереходеДалее
		Если Не ПустаяСтрока(СтрокаПерехода.ИмяОбработчикаПриПереходеДалее)
			И Не СтрокаПерехода.ДлительнаяОперация Тогда
			
			ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ)";
			ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПерехода.ИмяОбработчикаПриПереходеДалее);
			
			Отказ = Ложь;
			
			РезультатВыполнения = Вычислить(ИмяПроцедуры);
			
			Если Отказ Тогда
				
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		СтрокиПерехода = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода + 1));
		
		Если СтрокиПерехода.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		СтрокаПерехода = СтрокиПерехода[0];
		
		// обработчик ПриПереходеНазад
		Если Не ПустаяСтрока(СтрокаПерехода.ИмяОбработчикаПриПереходеНазад)
			И Не СтрокаПерехода.ДлительнаяОперация Тогда
			
			ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ)";
			ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПерехода.ИмяОбработчикаПриПереходеНазад);
			
			Отказ = Ложь;
			
			РезультатВыполнения = Вычислить(ИмяПроцедуры);
			
			Если Отказ Тогда
				
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокиПереходаТекущие = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не определена страница для отображения.'");
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	Если СтрокаПереходаТекущая.ДлительнаяОперация И Не ЭтоПереходДалее Тогда
		
		УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
		Возврат;
	КонецЕсли;
	
	// обработчик ПриОткрытии
	Если Не ПустаяСтрока(СтрокаПереходаТекущая.ИмяОбработчикаПриОткрытии) Тогда
		
		ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ, ПропуститьСтраницу, ЭтоПереходДалее)";
		ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПереходаТекущая.ИмяОбработчикаПриОткрытии);
		
		Отказ = Ложь;
		ПропуститьСтраницу = Ложь;
		
		РезультатВыполнения = Вычислить(ИмяПроцедуры);
		
		Если Отказ Тогда
			
			УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
			
			Возврат;
			
		ИначеЕсли ПропуститьСтраницу Тогда
			
			Если ЭтоПереходДалее Тогда
				
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
				
				Возврат;
				
			Иначе
				
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбработчикДлительнойОперации()
	
	СтрокиПереходаТекущие = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не определена страница для отображения.'");
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	// обработчик ОбработкаДлительнойОперации
	Если Не ПустаяСтрока(СтрокаПереходаТекущая.ИмяОбработчикаДлительнойОперации) Тогда
		
		ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ, ПерейтиДалее)";
		ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПереходаТекущая.ИмяОбработчикаДлительнойОперации);
		
		Отказ = Ложь;
		ПерейтиДалее = Истина;
		
		РезультатВыполнения = Вычислить(ИмяПроцедуры);
		
		Если Отказ Тогда
			
			УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
			
			Возврат;
			
		ИначеЕсли ПерейтиДалее Тогда
			
			УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
			
			Возврат;
			
		КонецЕсли;
		
	Иначе
		
		УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьКнопкуФормыПоИмениКоманды(ЭлементФормы, ИмяКоманды)
	
	Для Каждого Элемент Из ЭлементФормы.ПодчиненныеЭлементы Цикл
		
		Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
			
			ЭлементФормыПоИмениКоманды = ПолучитьКнопкуФормыПоИмениКоманды(Элемент, ИмяКоманды);
			
			Если ЭлементФормыПоИмениКоманды <> Неопределено Тогда
				
				Возврат ЭлементФормыПоИмениКоманды;
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Элемент) = Тип("КнопкаФормы")
			И СтрНайти(Элемент.ИмяКоманды, ИмяКоманды) > 0 Тогда
			
			Возврат Элемент;
			
		Иначе
			
			Продолжить;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

&НаКлиенте
Процедура ОпределитьТипТорговогоОбъекта()
	
	Если ЗначениеЗаполнено(Объект.ОрганизацияЕГАИС) Тогда
		ОпределитьТипТорговогоОбъектаНаСервере(Объект.ОрганизацияЕГАИС, Объект.ЭтоСклад, Объект.ЭтоТорговыйЗал);
	Иначе
		Объект.ЭтоСклад = Ложь;
		Объект.ЭтоТорговыйЗал = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОпределитьТипТорговогоОбъектаНаСервере(ОрганизацияЕГАИС, ЭтоСклад, ЭтоТорговыйЗал)
	
	ТорговыйОбъект = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОрганизацияЕГАИС, "ТорговыйОбъект");
	
	Если ТорговыйОбъект <> Неопределено Тогда
		КорректировкаОстатковЕГАИСПереопределяемый.ПриОпределенииТипаТорговогоОбъекта(ТорговыйОбъект, ЭтоСклад, ЭтоТорговыйЗал);
	Иначе
		ЭтоСклад = Ложь;
		ЭтоТорговыйЗал = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНастройкиОбменаЕГАИС()
	
	НастройкиОбменаЕГАИС.Очистить();
	
	НастройкиОбмена = ИнтеграцияЕГАИСВызовСервера.НастройкиОбменаЕГАИС();
	
	Для Каждого КлючИЗначение Из НастройкиОбмена.ОбменНаСервере Цикл
		СтрокаТаблицы = НастройкиОбменаЕГАИС.Добавить();
		СтрокаТаблицы.ОрганизацияЕГАИС = КлючИЗначение.Ключ;
		СтрокаТаблицы.ОбменНаСервере = Истина;
		СтрокаТаблицы.НастройкаОбмена = КлючИЗначение.Значение;
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из НастройкиОбмена.ОбменНаКлиенте Цикл
		СтрокаТаблицы = НастройкиОбменаЕГАИС.Добавить();
		СтрокаТаблицы.ОрганизацияЕГАИС = КлючИЗначение.Ключ;
		СтрокаТаблицы.ОбменНаСервере = Ложь;
		СтрокаТаблицы.НастройкаОбмена = КлючИЗначение.Значение;
	КонецЦикла;
	
	ОрганизацииЕГАИСБезНастроекОбмена.ЗагрузитьЗначения(НастройкиОбмена.БезНастроек);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОпределитьТранспортныйМодуль(Форма)
	
	Форма.ТранспортныйМодуль = Неопределено;
	
	Отбор = Неопределено;
	Если НЕ Форма.Объект.ОрганизацияЕГАИС.Пустая() Тогда
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("ОрганизацияЕГАИС", Форма.Объект.ОрганизацияЕГАИС);
		МассивСтрок = Форма.НастройкиОбменаЕГАИС.НайтиСтроки(ПараметрыОтбора);
	Иначе
		МассивСтрок = Форма.НастройкиОбменаЕГАИС;
	КонецЕсли;
	
	Если МассивСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СписокВыбора = Форма.Элементы.ОрганизацияЕГАИС.СписокВыбора;
	Если СписокВыбора.Количество() = 0 Тогда
		Для Каждого СтрокаТаблицы Из МассивСтрок Цикл
			Если СписокВыбора.НайтиПоЗначению(СтрокаТаблицы.ОрганизацияЕГАИС) = Неопределено Тогда
				СписокВыбора.Добавить(СтрокаТаблицы.ОрганизацияЕГАИС);
			КонецЕсли;
			Если Форма.Объект.ОрганизацияЕГАИС.Пустая() Тогда
				Форма.Объект.ОрганизацияЕГАИС = СтрокаТаблицы.ОрганизацияЕГАИС;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Форма.ТранспортныйМодуль = МассивСтрок[0].НастройкаОбмена;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьПриИзмененииТорговогоОбъекта(Форма)
	
	Форма.Элементы.ПанельПроверкаИнвентаризацииНаСкладе.Видимость = Форма.Объект.ЭтоСклад;
	Форма.Элементы.ПанельПроверкаИнвентаризацииВТорговомЗале.Видимость = Форма.Объект.ЭтоТорговыйЗал;
	
	Форма.Элементы.ТаблицаОстатковОстатокСклад.Видимость = Форма.Объект.ЭтоСклад;
	Форма.Элементы.ТаблицаОстатковОстатокТорговыйЗал.Видимость = Форма.Объект.ЭтоТорговыйЗал;
	
	Форма.Элементы.ТаблицаКорректировкиОстатокСклад.Видимость = Форма.Объект.ЭтоСклад;
	Форма.Элементы.ТаблицаКорректировкиОстатокТорговыйЗал.Видимость = Форма.Объект.ЭтоТорговыйЗал;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	ГосударственныеИнформационныеСистемыПереопределяемый.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(
		ЭтотОбъект,
		"ТаблицаОстатковХарактеристика",
		"Объект.ТаблицаОстатков.ХарактеристикиИспользуются");
	
	ГосударственныеИнформационныеСистемыПереопределяемый.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(
		ЭтотОбъект,
		"ТаблицаКорректировкиХарактеристика",
		"Объект.ТаблицаКорректировки.ХарактеристикиИспользуются");
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаОстатковНоменклатура.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТаблицаОстатков.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("Объект.ТаблицаОстатков.СопоставлениеНоменклатура"));
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаОстатковХарактеристика.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТаблицаОстатков.Характеристика");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТаблицаОстатков.ХарактеристикиИспользуются");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("Объект.ТаблицаОстатков.СопоставлениеХарактеристика"));
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаОстатковНоменклатура.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТаблицаОстатков.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТаблицаОстатков.СопоставленоКоличество");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаПроблемаЕГАИС);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаОстатковХарактеристика.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТаблицаОстатков.Характеристика");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТаблицаОстатков.ХарактеристикиИспользуются");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТаблицаОстатков.СопоставленоКоличество");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаПроблемаЕГАИС);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаОстатковНоменклатура.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТаблицаОстатков.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТаблицаОстатков.СопоставленоКоличество");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
	ОтборЭлемента.ПравоеЗначение = 1;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветГиперссылкиГИСМ);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаОстатковХарактеристика.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТаблицаОстатков.Характеристика");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТаблицаОстатков.ХарактеристикиИспользуются");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТаблицаОстатков.СопоставленоКоличество");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
	ОтборЭлемента.ПравоеЗначение = 1;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветГиперссылкиГИСМ);
	
	// Несопоставленная алкогольная продукция
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Использование = Истина;
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<Не сопоставлено>'"));
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаПроблемаЕГАИС);
	
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаОстатковАлкогольнаяПродукция.Имя);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ЭлементОформления.Отбор,
		"Объект.ТаблицаОстатков.АлкогольнаяПродукция",
		Справочники.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка(),
		ВидСравненияКомпоновкиДанных.Равно,
		,
		Истина);
		
	// Единица измерения в таблице остатков.
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Использование = Истина;
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='ДАЛ'"));
	
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаОстатковЕдиницаИзмерения.Имя);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ЭлементОформления.Отбор,
		"Объект.ТаблицаОстатков.ПродаетсяВРозлив",
		Истина,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		Истина);
	
	// Единица измерения в таблице корректировки.
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Использование = Истина;
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='ДАЛ'"));
	
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаКорректировкиЕдиницаИзмерения.Имя);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ЭлементОформления.Отбор,
		"Объект.ТаблицаКорректировки.ПродаетсяВРозлив",
		Истина,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		Истина);
		
	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "СозданныеДокументы.Дата", Элементы.СозданныеДокументыДата.Имя);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗначенияРеквизитовОбъектов(МассивСсылок, ИменаРеквизитов)
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивСсылок, ИменаРеквизитов);
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита);
	
КонецФункции

&НаКлиенте
Процедура ЗакрытиеФормы_Подтверждение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.СозданныеДокументы.Количество() > 0 Тогда
		УдалитьДокументыКорректировкиОстатков();
	КонецЕсли;
	
	ЗакрытьФормуБезусловно = Истина;
	
	Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыТабличныхЧастей()
	
	ГосударственныеИнформационныеСистемыПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(ЭтотОбъект, Объект.ТаблицаОстатков);
	ГосударственныеИнформационныеСистемыПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(ЭтотОбъект, Объект.ТаблицаКорректировки);
	
	ИнтеграцияЕГАИС.ЗаполнитьСопоставленнуюПродукцию(Объект.ТаблицаОстатков);
	
	ВремТаблица = Объект.ТаблицаОстатков.Выгрузить();
	ВремТаблица.ЗаполнитьЗначения(Истина, "Сопоставлено");
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Номенклатура", ПустаяНоменклатура);
	ПараметрыОтбора.Вставить("СопоставленоКоличество", 0);
	
	МассивСтрок = ВремТаблица.НайтиСтроки(ПараметрыОтбора);
	Для Каждого СтрокаТаблицы Из МассивСтрок Цикл
		СтрокаТаблицы.Сопоставлено = Ложь;
	КонецЦикла;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("АлкогольнаяПродукция", Справочники.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка());
	
	МассивСтрок = ВремТаблица.НайтиСтроки(ПараметрыОтбора);
	Для Каждого СтрокаТаблицы Из МассивСтрок Цикл
		СтрокаТаблицы.Сопоставлено = Ложь;
	КонецЦикла;
	
	Объект.ТаблицаОстатков.Загрузить(ВремТаблица);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСлужебныеРеквизиты()
	
	Объект.УчетныеОстатки.Очистить();
	Объект.ОстаткиЕГАИС.Очистить();
	Объект.ТаблицаОстатков.Очистить();
	Объект.ТаблицаКорректировки.Очистить();
	Объект.СозданныеДокументы.Очистить();
	
	Объект.ОстаткиВРегистре1 = ПредопределенноеЗначение("Документ.ОстаткиЕГАИС.ПустаяСсылка");
	Объект.ОстаткиВРегистре2 = ПредопределенноеЗначение("Документ.ОстаткиЕГАИС.ПустаяСсылка");
	
	ТекстОшибкиПолученияОстатковЕГАИС = "";
	Элементы.ПанельОстаткиЕГАИС.ТекущаяСтраница = Элементы.СтраницаОстаткиЕГАИС_ЗапроситьОстатки;
	
	УстановитьПредставлениеДатыОстатковЕГАИС();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьФормаДокумента(ИмяДокумента, ИмяФормы)
	
	Возврат Метаданные.Документы[ИмяДокумента].Формы.Найти(ИмяФормы) <> Неопределено;
	
КонецФункции

#КонецОбласти