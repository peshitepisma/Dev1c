
#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	ИнтеграцияЕГАИСВызовСервера.ПриПолученииФормыДокумента(
		"ТТНИсходящаяЕГАИС",
		ВидФормы,
		Параметры,
		ВыбраннаяФорма,
		ДополнительнаяИнформация,
		СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Подбирает справки Б в табличную часть товары документа по остаткам.
// 
// Параметры:
//   Объект - ДокументОбъект.ТТНИсходящаяЕГАИС - Документ-объект.
//
// Возвращаемое значение:
//  Булево - Истина, если в табличной части все справки заполнены.
//
Функция ПодобратьСправки2(Объект) Экспорт
	
	СтруктураПересчетаСуммы = ИнтеграцияЕГАИСКлиентСервер.СтруктураПересчетаСуммы("Сумма, КоличествоУпаковок, КоличествоФакт");
	
	ИнтеграцияЕГАИС.ПодобратьСправки2ДляСписанияИзРегистра1(
		Объект.Товары,
		Объект.Грузоотправитель,
		Неопределено,
		СтруктураПересчетаСуммы);
	
	Возврат ИнтеграцияЕГАИС.Справки2ЗаполненыВТабличнойЧасти(Объект.Товары);
	
КонецФункции

#Область ДействияПриОбменеЕГАИС

// Статус после подготовки к передаче данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ТТНИсходящаяЕГАИС - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция ЕГАИС
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречисленияСсылка.СтатусыОбработкиТТНИсходящейЕГАИС - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 3.
//
Функция СтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция) Экспорт
	
	Если Операция = Перечисления.ВидыДокументовЕГАИС.ТТН Тогда
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.РассчитатьСтатусыКПередаче(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.КПередаче);
		
	ИначеЕсли Операция = Перечисления.ВидыДокументовЕГАИС.АктТТНОтказ Тогда
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.РассчитатьСтатусыКПередаче(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.АктОтказаКПередаче);
		
	ИначеЕсли Операция = Перечисления.ВидыДокументовЕГАИС.КвитанцияАктаРасхожденийПодтверждение Тогда
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.РассчитатьСтатусыКПередаче(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.АктРасхожденийПодтверждениеКПередаче);
		
	ИначеЕсли Операция = Перечисления.ВидыДокументовЕГАИС.КвитанцияАктаРасхожденийОтказ Тогда
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.РассчитатьСтатусыКПередаче(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.АктРасхожденийОтказКПередаче);
		
	ИначеЕсли Операция = Перечисления.ВидыДокументовЕГАИС.КвитанцияЗапросаНаОтменуПроведенияТТНПодтверждение Тогда
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.РассчитатьСтатусыКПередаче(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ЗапросНаОтменуПроведенияПодтверждениеКПередаче);
		
	ИначеЕсли Операция = Перечисления.ВидыДокументовЕГАИС.КвитанцияЗапросаНаОтменуПроведенияТТНОтказ Тогда
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.РассчитатьСтатусыКПередаче(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ЗапросНаОтменуПроведенияОтказКПередаче);
		
	Иначе
		ВызватьИсключение ИнтеграцияЕГАИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Статус после передачи данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ТТНИсходящаяЕГАИС - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция ЕГАИС
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийЕГАИС - Статус обработки сообщения
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречисленияСсылка.СтатусыОбработкиТТНИсходящейЕГАИС - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 3.
//
Функция СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки) Экспорт
	
	Если Операция = Перечисления.ВидыДокументовЕГАИС.ТТН Тогда
		
		СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыДокументовЕГАИС.СтруктураСтатусы();
		
		СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ПереданВУТМ;
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОжидайтеПолучениеКвитанцииПолученЕГАИС);
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОжидайтеПолучениеКвитанцииПроведенЕГАИС);
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОжидайтеПолучениеУведомленияОРегистрацииДвижения);
		
		СтатусыБазовыйПроцесс.Ошибка = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ОшибкаПередачи;
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПередайтеДанные);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, СтатусыБазовыйПроцесс);
		
	ИначеЕсли Операция = Перечисления.ВидыДокументовЕГАИС.АктТТНОтказ Тогда
		
		СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыДокументовЕГАИС.СтруктураСтатусы();
		
		СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.АктОтказаПереданВУТМ;
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОжидайтеПолучениеКвитанцииПолученЕГАИС);
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОжидайтеПолучениеКвитанцииПроведенЕГАИС);
		
		СтатусыБазовыйПроцесс.Ошибка = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.АктОтказаОшибка;
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОткажитесьОтНакладной);
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, СтатусыБазовыйПроцесс);
		
	ИначеЕсли Операция = Перечисления.ВидыДокументовЕГАИС.КвитанцияАктаРасхожденийПодтверждение Тогда
		
		СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыДокументовЕГАИС.СтруктураСтатусы();
		
		СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.АктРасхожденийПодтверждениеПереданВУТМ;
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОжидайтеПолучениеКвитанцииПолученЕГАИС);
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОжидайтеПолучениеКвитанцииПроведенЕГАИС);
		
		СтатусыБазовыйПроцесс.Ошибка = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.АктРасхожденийПодтверждениеОшибка;
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПодтвердитеАктОРасхождениях);
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, СтатусыБазовыйПроцесс);
		
	ИначеЕсли Операция = Перечисления.ВидыДокументовЕГАИС.КвитанцияАктаРасхожденийОтказ Тогда
		
		СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыДокументовЕГАИС.СтруктураСтатусы();
		
		СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.АктРасхожденийОтказПереданВУТМ;
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОжидайтеПолучениеКвитанцииПолученЕГАИС);
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОжидайтеПолучениеКвитанцииПроведенЕГАИС);
		
		СтатусыБазовыйПроцесс.Ошибка = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.АктРасхожденийОтказОшибка;
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОткажитесьОтАктаОРасхождениях);
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, СтатусыБазовыйПроцесс);
		
	ИначеЕсли Операция = Перечисления.ВидыДокументовЕГАИС.КвитанцияЗапросаНаОтменуПроведенияТТНПодтверждение Тогда
		
		СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыДокументовЕГАИС.СтруктураСтатусы();
		
		СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ЗапросНаОтменуПроведенияПодтверждениеПереданВУТМ;
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОжидайтеПолучениеКвитанцииПолученЕГАИС);
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОжидайтеПолучениеКвитанцииПроведенЕГАИС);
		
		СтатусыБазовыйПроцесс.Ошибка = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ЗапросНаОтменуПроведенияПодтверждениеОшибка;
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПодтвердитеЗапросНаОтменуПроведения);
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, СтатусыБазовыйПроцесс);
		
	ИначеЕсли Операция = Перечисления.ВидыДокументовЕГАИС.КвитанцияЗапросаНаОтменуПроведенияТТНОтказ Тогда
		
		СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыДокументовЕГАИС.СтруктураСтатусы();
		
		СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ЗапросНаОтменуПроведенияОтказПереданВУТМ;
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОжидайтеПолучениеКвитанцииПолученЕГАИС);
		
		СтатусыБазовыйПроцесс.Ошибка = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ЗапросНаОтменуПроведенияОтказОшибка;
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОткажитесьОтЗапросаНаОтменуПроведения);
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, СтатусыБазовыйПроцесс);
		
	Иначе
		ВызватьИсключение ИнтеграцияЕГАИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Статус после получения данных из ЕГАИС.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ТТНИсходящаяЕГАИС - Документ, для которого требуется обновить статус.
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция обмена с ЕГАИС.
//  ДополнительныеПараметры - Неопределено, Структура со свойствами:
//   * СтатусОбработки - Перечисление.СтатусыОбработкиСообщенийЕГАИС - Статус обработки сообщения.
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция, на которую получена квитанция.
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречисленияСсылка.СтатусыОбработкиТТНИсходящейЕГАИС - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 3.
//
Функция СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыДокументовЕГАИС.СтруктураСтатусы();
	СтатусыБазовыйПроцесс.Принят           = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ОбрабатываетсяКлиентом;
	СтатусыБазовыйПроцесс.Обрабатывается   = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ОбрабатываетсяЕГАИС;
	СтатусыБазовыйПроцесс.ОтменаПроведения = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ОтмененКлиентом;
	СтатусыБазовыйПроцесс.Ошибка           = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ОшибкаПередачи;
	СтатусыБазовыйПроцесс.ОшибкаПроведения = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ОшибкаПередачи;
	СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПередайтеДанные);
	СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОжидайтеПолученияПодтверждения);
	СтатусыБазовыйПроцесс.УведомлениеОРегистрацииДвижения = Истина;
	
	СтатусыАктТТНОтказ = РегистрыСведений.СтатусыДокументовЕГАИС.СтруктураСтатусы();
	СтатусыАктТТНОтказ.Принят           = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.Отменен;
	СтатусыАктТТНОтказ.Обрабатывается   = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.АктОтказаОбрабатываетсяЕГАИС;
	СтатусыАктТТНОтказ.Ошибка           = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.АктОтказаОшибка;
	СтатусыАктТТНОтказ.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОткажитесьОтНакладной);
	СтатусыАктТТНОтказ.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОтменитеОперацию);
	СтатусыАктТТНОтказ.УведомлениеОРегистрацииДвижения = Ложь;
	
	СтатусыКвитанцияАктаРасхожденийПодтверждение = РегистрыСведений.СтатусыДокументовЕГАИС.СтруктураСтатусы();
	СтатусыКвитанцияАктаРасхожденийПодтверждение.Принят           = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ПодтвержденСРасхождениями;
	СтатусыКвитанцияАктаРасхожденийПодтверждение.Обрабатывается   = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.АктРасхожденийПодтверждениеОбрабатываетсяЕГАИС;
	СтатусыКвитанцияАктаРасхожденийПодтверждение.Ошибка           = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.АктРасхожденийПодтверждениеОшибка;
	СтатусыКвитанцияАктаРасхожденийПодтверждение.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПодтвердитеАктОРасхождениях);
	СтатусыКвитанцияАктаРасхожденийПодтверждение.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОтменитеОперацию);
	СтатусыКвитанцияАктаРасхожденийПодтверждение.УведомлениеОРегистрацииДвижения = Ложь;
	
	СтатусыКвитанцияАктаРасхожденийОтказ = РегистрыСведений.СтатусыДокументовЕГАИС.СтруктураСтатусы();
	СтатусыКвитанцияАктаРасхожденийОтказ.Принят           = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.Отменен;
	СтатусыКвитанцияАктаРасхожденийОтказ.Обрабатывается   = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.АктРасхожденийОтказОбрабатываетсяЕГАИС;
	СтатусыКвитанцияАктаРасхожденийОтказ.Ошибка           = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.АктРасхожденийОтказОшибка;
	СтатусыКвитанцияАктаРасхожденийОтказ.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОткажитесьОтАктаОРасхождениях);
	СтатусыКвитанцияАктаРасхожденийОтказ.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОтменитеОперацию);
	СтатусыКвитанцияАктаРасхожденийОтказ.УведомлениеОРегистрацииДвижения = Ложь;
	
	СтатусыЗапросНаОтменуПроведенияТТНПодтверждение = РегистрыСведений.СтатусыДокументовЕГАИС.СтруктураСтатусы();
	СтатусыЗапросНаОтменуПроведенияТТНПодтверждение.Принят           = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ОтмененКлиентом;
	СтатусыЗапросНаОтменуПроведенияТТНПодтверждение.Обрабатывается   = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ЗапросНаОтменуПроведенияПодтверждениеОбрабатываетсяЕГАИС;
	СтатусыЗапросНаОтменуПроведенияТТНПодтверждение.ОтменаПроведения = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ОтмененКлиентом;
	СтатусыЗапросНаОтменуПроведенияТТНПодтверждение.Ошибка           = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ЗапросНаОтменуПроведенияПодтверждениеОшибка;
	СтатусыЗапросНаОтменуПроведенияТТНПодтверждение.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПодтвердитеЗапросНаОтменуПроведения);
	СтатусыЗапросНаОтменуПроведенияТТНПодтверждение.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОтменитеОперацию);
	СтатусыЗапросНаОтменуПроведенияТТНПодтверждение.УведомлениеОРегистрацииДвижения = Ложь;
	
	СтатусыЗапросНаОтменуПроведенияТТНОтказ = РегистрыСведений.СтатусыДокументовЕГАИС.СтруктураСтатусы();
	СтатусыЗапросНаОтменуПроведенияТТНОтказ.Принят           = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.Подтвержден;
	СтатусыЗапросНаОтменуПроведенияТТНОтказ.Обрабатывается   = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ЗапросНаОтменуПроведенияОтказОбрабатываетсяЕГАИС;
	СтатусыЗапросНаОтменуПроведенияТТНОтказ.Ошибка           = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ЗапросНаОтменуПроведенияОтказОшибка;
	СтатусыЗапросНаОтменуПроведенияТТНОтказ.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОткажитесьОтЗапросаНаОтменуПроведения);
	СтатусыЗапросНаОтменуПроведенияТТНОтказ.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОтменитеОперацию);
	СтатусыЗапросНаОтменуПроведенияТТНОтказ.УведомлениеОРегистрацииДвижения = Ложь;
	
	ВыполнитьРасчетТекущегоСостояния = Истина;
	Если ДополнительныеПараметры <> Неопределено
		И ДополнительныеПараметры.Свойство("ТекущееСостояние") Тогда
		ВыполнитьРасчетТекущегоСостояния = ДополнительныеПараметры.ТекущееСостояние;
	КонецЕсли;
	
	Если Операция = Перечисления.ВидыДокументовЕГАИС.АктТТНПодтверждение Тогда
		
		Статусы = РегистрыСведений.СтатусыДокументовЕГАИС.СтруктураСтатусы();
		Статусы.Принят = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.Подтвержден;
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.РассчитатьСтатусы(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиСообщенийЕГАИС.ПринятИзЕГАИС,
			Статусы);
		
	ИначеЕсли Операция = Перечисления.ВидыДокументовЕГАИС.АктТТНОтказ Тогда
		
		Статусы = РегистрыСведений.СтатусыДокументовЕГАИС.СтруктураСтатусы();
		Статусы.Принят = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ОтмененКлиентом;
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.РассчитатьСтатусы(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиСообщенийЕГАИС.ПринятИзЕГАИС,
			Статусы);
		
	ИначеЕсли Операция = Перечисления.ВидыДокументовЕГАИС.АктТТНРасхождения Тогда
		
		Статусы = РегистрыСведений.СтатусыДокументовЕГАИС.СтруктураСтатусы();
		Статусы.Принят = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.АктРасхожденийПринят;
		Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПодтвердитеАктОРасхождениях);
		Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОткажитесьОтАктаОРасхождениях);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.РассчитатьСтатусы(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиСообщенийЕГАИС.ПринятИзЕГАИС,
			Статусы);
		
	ИначеЕсли Операция = Перечисления.ВидыДокументовЕГАИС.ЗапросНаОтменуПроведенияТТН Тогда
		
		Статусы = РегистрыСведений.СтатусыДокументовЕГАИС.СтруктураСтатусы();
		Статусы.Принят = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ЗапросНаОтменуПроведенияПринят;
		Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПодтвердитеЗапросНаОтменуПроведения);
		Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОткажитесьОтЗапросаНаОтменуПроведения);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.РассчитатьСтатусы(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиСообщенийЕГАИС.ПринятИзЕГАИС,
			Статусы);
		
	ИначеЕсли Операция = Перечисления.ВидыДокументовЕГАИС.УведомлениеОРегистрацииДвиженияТТН Тогда
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.РассчитатьСтатусыПриПолученииКвитанции(
			ДокументСсылка,
			"УведомлениеОРегистрацииДвижения", Перечисления.СтатусыОбработкиСообщенийЕГАИС.ПринятИзЕГАИС,
			СтатусыБазовыйПроцесс, ВыполнитьРасчетТекущегоСостояния);
		
	ИначеЕсли Операция = Перечисления.ВидыДокументовЕГАИС.КвитанцияПолученЕГАИС Тогда
		
		Статусы = Неопределено;
		Если ДополнительныеПараметры.ОперацияКвитанции = Перечисления.ВидыДокументовЕГАИС.ТТН Тогда
			
			Статусы = СтатусыБазовыйПроцесс;
			
		ИначеЕсли ДополнительныеПараметры.ОперацияКвитанции = Перечисления.ВидыДокументовЕГАИС.АктТТНОтказ Тогда
			
			Статусы = СтатусыАктТТНОтказ;
			
		ИначеЕсли ДополнительныеПараметры.ОперацияКвитанции = Перечисления.ВидыДокументовЕГАИС.КвитанцияАктаРасхожденийПодтверждение Тогда
			
			Статусы = СтатусыКвитанцияАктаРасхожденийПодтверждение;
			
		ИначеЕсли ДополнительныеПараметры.ОперацияКвитанции = Перечисления.ВидыДокументовЕГАИС.КвитанцияАктаРасхожденийОтказ Тогда
			
			Статусы = СтатусыКвитанцияАктаРасхожденийОтказ;
			
		ИначеЕсли ДополнительныеПараметры.ОперацияКвитанции = Перечисления.ВидыДокументовЕГАИС.КвитанцияЗапросаНаОтменуПроведенияТТНПодтверждение Тогда
			
			Статусы = СтатусыЗапросНаОтменуПроведенияТТНПодтверждение;
			
		ИначеЕсли ДополнительныеПараметры.ОперацияКвитанции = Перечисления.ВидыДокументовЕГАИС.КвитанцияЗапросаНаОтменуПроведенияТТНОтказ Тогда
			
			Статусы = СтатусыЗапросНаОтменуПроведенияТТНОтказ;
			
		Иначе
			ВызватьИсключение ИнтеграцияЕГАИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
		КонецЕсли;
		
		Если Статусы <> Неопределено Тогда
			ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.РассчитатьСтатусыПриПолученииКвитанции(
				ДокументСсылка,
				"КвитанцияПолученЕГАИС", ДополнительныеПараметры.СтатусОбработки,
				Статусы, ВыполнитьРасчетТекущегоСостояния);
		КонецЕсли;
		
	ИначеЕсли Операция = Перечисления.ВидыДокументовЕГАИС.КвитанцияПроведенЕГАИС Тогда
		
		Статусы = Неопределено;
		Если ДополнительныеПараметры.ОперацияКвитанции = Перечисления.ВидыДокументовЕГАИС.ТТН Тогда
			
			Если Не ДополнительныеПараметры.Свойство("ТекущееСостояние") Тогда
				ТекущееСостояние = РегистрыСведений.СтатусыДокументовЕГАИС.ТекущееСостояние(ДокументСсылка);
			Иначе
				ТекущееСостояние = ДополнительныеПараметры.ТекущееСостояние;
			КонецЕсли;
			
			Если ТекущееСостояние.Статус = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.АктРасхожденийПодтверждениеОбрабатываетсяЕГАИС Тогда
				Статусы = СтатусыКвитанцияАктаРасхожденийПодтверждение;
			Иначе
				Статусы = СтатусыБазовыйПроцесс;
			КонецЕсли;
			
		ИначеЕсли ДополнительныеПараметры.ОперацияКвитанции = Перечисления.ВидыДокументовЕГАИС.АктТТНОтказ Тогда
			
			Статусы = СтатусыАктТТНОтказ;
			
		ИначеЕсли ДополнительныеПараметры.ОперацияКвитанции = Перечисления.ВидыДокументовЕГАИС.КвитанцияАктаРасхожденийПодтверждение Тогда
			
			// Приходит квитанция по операции ТТН (см. выше)
			Статусы = СтатусыКвитанцияАктаРасхожденийПодтверждение;
			
		ИначеЕсли ДополнительныеПараметры.ОперацияКвитанции = Перечисления.ВидыДокументовЕГАИС.КвитанцияАктаРасхожденийОтказ Тогда
			
			Статусы = СтатусыКвитанцияАктаРасхожденийОтказ;
			
		ИначеЕсли ДополнительныеПараметры.ОперацияКвитанции = Перечисления.ВидыДокументовЕГАИС.КвитанцияЗапросаНаОтменуПроведенияТТНПодтверждение Тогда
			
			Статусы = СтатусыЗапросНаОтменуПроведенияТТНПодтверждение;
			
		ИначеЕсли ДополнительныеПараметры.ОперацияКвитанции = Перечисления.ВидыДокументовЕГАИС.КвитанцияЗапросаНаОтменуПроведенияТТНОтказ Тогда
			
			Статусы = СтатусыЗапросНаОтменуПроведенияТТНОтказ;
			
		Иначе
			ВызватьИсключение ИнтеграцияЕГАИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
		КонецЕсли;
		
		Если Статусы <> Неопределено Тогда
			ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.РассчитатьСтатусыПриПолученииКвитанции(
				ДокументСсылка,
				"КвитанцияПроведенЕГАИС", ДополнительныеПараметры.СтатусОбработки,
				Статусы, ВыполнитьРасчетТекущегоСостояния);
		КонецЕсли;
		
	Иначе
		ВызватьИсключение ИнтеграцияЕГАИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции


// Обновить статус после подготовки к передаче данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ТТНИсходящаяЕГАИС - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция ЕГАИС
// 
// Возвращаемое значение:
//  Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС - Новый статус.
//
Функция ОбновитьСтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция) Экспорт
	
	ПараметрыОбновления = СтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Обновить статус после передачи данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ТТНИсходящаяЕГАИС - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция ЕГАИС
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийЕГАИС - Статус обработки сообщения
// 
// Возвращаемое значение:
//  Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС - Новый статус.
//
Функция ОбновитьСтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки) Экспорт
	
	ПараметрыОбновления = СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Обновить статус после получения данных из ЕГАИС.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ТТНИсходящаяЕГАИС - Документ, для которого требуется обновить статус.
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция обмена с ЕГАИС.
//  ДополнительныеПараметры - Неопределено, Структура со свойствами:
//   * СтатусОбработки - Перечисление.СтатусыОбработкиСообщенийЕГАИС - Статус обработки сообщения.
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция, на которую получена квитанция.
// 
// Возвращаемое значение:
//  Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС - Новый статус.
//
Функция ОбновитьСтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбновления = СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОбновлятьДвижения = Истина;
	Если ДополнительныеПараметры <> Неопределено Тогда
		ОбновлятьДвижения = ДополнительныеПараметры.ОбновлятьДвижения;
	КонецЕсли;
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ОбновлятьДвижения);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции


// Получить последовательность операций в течении жизненного цикла документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ТТНИсходящаяЕГАИС - Документ, для которого требуется обновить статус.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - см. функцию ИнтеграцияЕГАИС.ПустаяТаблицаПоследовательностьОпераций().
//
Функция ПоследовательностьОпераций(ДокументСсылка) Экспорт
	
	Таблица = ИнтеграцияЕГАИС.ПустаяТаблицаПоследовательностьОпераций();
	
	Исходящий = Перечисления.ТипыЗапросовЕГАИС.Исходящий;
	Входящий  = Перечисления.ТипыЗапросовЕГАИС.Входящий;
	
	ИнтеграцияЕГАИС.ДобавитьОперациюВПоследовательность(Таблица,  0,   Исходящий, Перечисления.ВидыДокументовЕГАИС.ТТН, ДокументСсылка);
	ИнтеграцияЕГАИС.ДобавитьОперациюВПоследовательность(Таблица,  0,   Входящий,  Перечисления.ВидыДокументовЕГАИС.УведомлениеОРегистрацииДвиженияТТН);
	ИнтеграцияЕГАИС.ДобавитьОперациюВПоследовательность(Таблица, -1,   Исходящий, Перечисления.ВидыДокументовЕГАИС.АктТТНОтказ, ДокументСсылка);
	ИнтеграцияЕГАИС.ДобавитьОперациюВПоследовательность(Таблица,  0,   Входящий,  Перечисления.ВидыДокументовЕГАИС.АктТТН);
	
	ИнтеграцияЕГАИС.ДобавитьОперациюВПоследовательность(Таблица, -2,   Входящий,  Перечисления.ВидыДокументовЕГАИС.АктТТНОтказ);
	
	ИнтеграцияЕГАИС.ДобавитьОперациюВПоследовательность(Таблица, -3,   Входящий,  Перечисления.ВидыДокументовЕГАИС.АктТТНПодтверждение);
	ИнтеграцияЕГАИС.ДобавитьОперациюВПоследовательность(Таблица, -31,  Входящий,  Перечисления.ВидыДокументовЕГАИС.ЗапросНаОтменуПроведенияТТН);
	ИнтеграцияЕГАИС.ДобавитьОперациюВПоследовательность(Таблица, -31,  Исходящий, Перечисления.ВидыДокументовЕГАИС.КвитанцияЗапросаНаОтменуПроведенияТТН,              ДокументСсылка);
	ИнтеграцияЕГАИС.ДобавитьОперациюВПоследовательность(Таблица, -311, Исходящий, Перечисления.ВидыДокументовЕГАИС.КвитанцияЗапросаНаОтменуПроведенияТТНОтказ,         ДокументСсылка);
	ИнтеграцияЕГАИС.ДобавитьОперациюВПоследовательность(Таблица, -312, Исходящий, Перечисления.ВидыДокументовЕГАИС.КвитанцияЗапросаНаОтменуПроведенияТТНПодтверждение, ДокументСсылка);
	
	ИнтеграцияЕГАИС.ДобавитьОперациюВПоследовательность(Таблица, -4,   Входящий,  Перечисления.ВидыДокументовЕГАИС.АктТТНРасхождения);
	ИнтеграцияЕГАИС.ДобавитьОперациюВПоследовательность(Таблица, -4,   Исходящий, Перечисления.ВидыДокументовЕГАИС.КвитанцияАктаРасхождений, ДокументСсылка);
	
	ИнтеграцияЕГАИС.ДобавитьОперациюВПоследовательность(Таблица, -41,  Исходящий, Перечисления.ВидыДокументовЕГАИС.КвитанцияАктаРасхожденийПодтверждение, ДокументСсылка);
	ИнтеграцияЕГАИС.ДобавитьОперациюВПоследовательность(Таблица, -41,  Входящий,  Перечисления.ВидыДокументовЕГАИС.ЗапросНаОтменуПроведенияТТН);
	ИнтеграцияЕГАИС.ДобавитьОперациюВПоследовательность(Таблица, -41,  Исходящий, Перечисления.ВидыДокументовЕГАИС.КвитанцияЗапросаНаОтменуПроведенияТТН,              ДокументСсылка);
	ИнтеграцияЕГАИС.ДобавитьОперациюВПоследовательность(Таблица, -411, Исходящий, Перечисления.ВидыДокументовЕГАИС.КвитанцияЗапросаНаОтменуПроведенияТТНОтказ,         ДокументСсылка);
	ИнтеграцияЕГАИС.ДобавитьОперациюВПоследовательность(Таблица, -412, Исходящий, Перечисления.ВидыДокументовЕГАИС.КвитанцияЗапросаНаОтменуПроведенияТТНПодтверждение, ДокументСсылка);
	
	ИнтеграцияЕГАИС.ДобавитьОперациюВПоследовательность(Таблица, -42,  Исходящий, Перечисления.ВидыДокументовЕГАИС.КвитанцияАктаРасхожденийОтказ, ДокументСсылка);
	
	Возврат Таблица;
	
КонецФункции

// Опеределить необходимость перезаписи движений.
//
// Параметры:
//  ПредыдущийСтатус - ПеречислениеСсылка.СтатусыОбработкиТТНИсходящейЕГАИС - Предыдущий статус.
//  НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиТТНИсходящейЕГАИС - Предыдущий статус.
// 
// Возвращаемое значение:
//  Булево - Необходимость перезаписи движений.
//
Функция ОбновлятьДвижения(ПредыдущийСтатус, НовыйСтатус) Экспорт
	
	СтатусыДвиженийСвободныйОстаток = СтатусыДвиженийСвободныйОстаток();
	СтатусыДвиженийКоличество       = СтатусыДвиженийКоличество();
	
	ДвиженияСвободныйОстаток = (СтатусыДвиженийСвободныйОстаток.Найти(НовыйСтатус) = Неопределено
	                          И СтатусыДвиженийСвободныйОстаток.Найти(ПредыдущийСтатус) <> Неопределено)
	                         Или (СтатусыДвиженийСвободныйОстаток.Найти(ПредыдущийСтатус) = Неопределено
	                            И СтатусыДвиженийСвободныйОстаток.Найти(НовыйСтатус) <> Неопределено);
	
	ДвиженияКоличество = (СтатусыДвиженийКоличество.Найти(НовыйСтатус) = Неопределено
	                    И СтатусыДвиженийКоличество.Найти(ПредыдущийСтатус) <> Неопределено)
	                    Или (СтатусыДвиженийКоличество.Найти(ПредыдущийСтатус) = Неопределено
	                       И СтатусыДвиженийКоличество.Найти(НовыйСтатус) <> Неопределено);
	
	Возврат ДвиженияКоличество Или ДвиженияСвободныйОстаток;
	
КонецФункции

// Опеределить необходимость перерасчета статуса оформления документов.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ТТНИсходящаяЕГАИС - Документ, по которому требуется рассчитать статус оформления.
//  ПредыдущийСтатус - ПеречислениеСсылка.СтатусыОбработкиТТНИсходящейЕГАИС - Предыдущий статус.
//  НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиТТНИсходящейЕГАИС - Предыдущий статус.
// 
// Возвращаемое значение:
//  Булево - Необходимость перерасчета статуса оформления.
//
Функция РассчитатьСтатусОформления(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус) Экспорт
	
	Если КонечныеСтатусы().Найти(НовыйСтатус) <> Неопределено Тогда
		ИнтеграцияЕГАИСПереопределяемый.РассчитатьСтатусОформленияТТНИсходящаяЕГАИС(ДокументСсылка, Ложь);
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область Статусы

// Возвращает статус по умолчанию.
// 
// Возвращаемое значение:
//  Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС - Статус по-умолчанию.
//
Функция СтатусПоУмолчанию() Экспорт
	
	Возврат Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.Черновик;
	
КонецФункции

// Возвращает статусы ошибок.
//
// Возвращаемое значение:
//  Массив - Статусы ошибок.
//
Функция СтатусыОшибок() Экспорт
	
	Статусы = Новый Массив;
	
	Статусы.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ОшибкаПередачи);
	Статусы.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.АктОтказаОшибка);
	Статусы.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.АктРасхожденийПодтверждениеОшибка);
	Статусы.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.АктРасхожденийОтказОшибка);
	Статусы.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ЗапросНаОтменуПроведенияПодтверждениеОшибка);
	Статусы.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ЗапросНаОтменуПроведенияОтказОшибка);
	
	Возврат Статусы;
	
КонецФункции

// Возвращает конечные статусы.
//
// Возвращаемое значение:
//  Массив - Конечные статусы.
//
Функция КонечныеСтатусы() Экспорт
	
	Статусы = Новый Массив;
	
	Статусы.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.Отменен);
	Статусы.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ОтмененКлиентом);
	
	Возврат Статусы;
	
КонецФункции

// Возвращает дальнейшее действие по умолчанию.
// 
// Возвращаемое значение:
//  Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие по-умолчанию.
//
Функция ДальнейшееДействиеПоУмолчанию() Экспорт
	
	Возврат Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПередайтеДанные;
	
КонецФункции

// Возвращает запрос для получения статуса оформления.
//
// Параметры:
//  ДокументОснование - ДокументСсылка - Документ основание.
// 
// Возвращаемое значение:
//  Запрос - Запрос для получения статуса оформления.
//
Функция ЗапросСтатусаОформления(ДокументОснование) Экспорт
	
	Запрос = ИнтеграцияЕГАИСПереопределяемый.ЗапросСтатусаОформленияТТНИсходящаяЕГАИС(ДокументОснование);
	
	Запрос.УстановитьПараметр("КонечныеСтатусы", КонечныеСтатусы());
	
	Возврат Запрос;
	
КонецФункции

#КонецОбласти

#Область ПанельОбменСЕГАИС

Функция ВсеТребующиеДействия(Все = Ложь) Экспорт
	
	МассивДействий = Новый Массив;
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПередайтеДанные);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОткажитесьОтНакладной);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПодтвердитеАктОРасхождениях);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОткажитесьОтАктаОРасхождениях);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПодтвердитеЗапросНаОтменуПроведения);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОткажитесьОтЗапросаНаОтменуПроведения);
	Если Все Или Не ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическуюОтправкуПолучениеДанныхЕГАИС") Тогда
		МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ВыполнитеОбмен);
	КонецЕсли;
	
	Возврат МассивДействий;
	
КонецФункции

Функция ВсеТребующиеОжидания(Все = Ложь) Экспорт
	
	МассивДействий = Новый Массив;
	Если Все Или ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическуюОтправкуПолучениеДанныхЕГАИС") Тогда
		МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОжидайтеПередачуДанныхРегламентнымЗаданием);
	КонецЕсли;
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОжидайтеПолучениеКвитанцииПолученЕГАИС);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОжидайтеПолучениеКвитанцииПроведенЕГАИС);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОжидайтеПолучениеУведомленияОРегистрацииДвижения);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОжидайтеПолученияПодтверждения);
	
	Возврат МассивДействий;
	
КонецФункции

// Возвращает текст запроса для получения количества документов для оформления
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Функция ТекстЗапросаПанельОбменСЕГАИСОформите() Экспорт
	
	Возврат ИнтеграцияЕГАИСПереопределяемый.ТекстЗапросаТТНИсходящаяЕГАИСОформите();
	
КонецФункции

// Возвращает текст запроса для получения количества документов для отработки
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Функция ТекстЗапросаПанельОбменСЕГАИСОтработайте() Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО (РАЗЛИЧНЫЕ СтатусыДокументовЕГАИС.Документ) КАК КоличествоДокументов
	|ИЗ
	|	РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Документ.ТТНИсходящаяЕГАИС КАК ТТНИсходящаяЕГАИС
	|ПО
	|	СтатусыДокументовЕГАИС.Документ = ТТНИсходящаяЕГАИС.Ссылка
	|ГДЕ
	|	ТТНИсходящаяЕГАИС.Ссылка ЕСТЬ НЕ NULL
	|	И НЕ ТТНИсходящаяЕГАИС.ПометкаУдаления
	|	И СтатусыДокументовЕГАИС.ДальнейшееДействие1 В(&ВсеТребующиеДействия)
	|	И (ТТНИсходящаяЕГАИС.Грузоотправитель В(&ОрганизацияЕГАИС)
	|		ИЛИ &БезОтбораПоОрганизацииЕГАИС)
	|	И (ТТНИсходящаяЕГАИС.Ответственный = &Ответственный
	|		ИЛИ &Ответственный = НЕОПРЕДЕЛЕНО)
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|";
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает текст запроса для получения количества документов, находящихся в состоянии ожидания
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Функция ТекстЗапросаПанельОбменСЕГАИСОжидайте() Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО (РАЗЛИЧНЫЕ СтатусыДокументовЕГАИС.Документ) КАК КоличествоДокументов
	|ИЗ
	|	РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Документ.ТТНИсходящаяЕГАИС КАК ТТНИсходящаяЕГАИС
	|ПО
	|	СтатусыДокументовЕГАИС.Документ = ТТНИсходящаяЕГАИС.Ссылка
	|ГДЕ
	|	ТТНИсходящаяЕГАИС.Ссылка ЕСТЬ НЕ NULL
	|	И НЕ ТТНИсходящаяЕГАИС.ПометкаУдаления
	|	И СтатусыДокументовЕГАИС.ДальнейшееДействие1 В(&ВсеТребующиеОжидания)
	|	И (ТТНИсходящаяЕГАИС.Грузоотправитель В(&ОрганизацияЕГАИС)
	|		ИЛИ &БезОтбораПоОрганизацииЕГАИС)
	|	И (ТТНИсходящаяЕГАИС.Ответственный = &Ответственный
	|		ИЛИ &Ответственный = НЕОПРЕДЕЛЕНО)
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|";
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область СообщенияЕГАИС

// Сообщение к передаче XML
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция ЕГАИС
// 
// Возвращаемое значение:
//  Строка - Текст сообщения XML
//
Функция СообщениеКПередачеXML(ДокументСсылка, ДальнейшееДействие, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПередайтеДанные Тогда
		
		Возврат ТТНИсходящаяЕГАИСXML(ДокументСсылка);
		
	ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОткажитесьОтНакладной Тогда
		
		Возврат АктОтказаXML(ДокументСсылка);
		
	ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПодтвердитеАктОРасхождениях Тогда
		
		Возврат КвитанцияПодтвержденияАктаРасхожденийXML(ДокументСсылка);
		
	ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОткажитесьОтАктаОРасхождениях Тогда
		
		Возврат КвитанцияОтказаОтАктаРасхожденийXML(ДокументСсылка);
		
	ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПодтвердитеЗапросНаОтменуПроведения Тогда
		
		Возврат КвитанцияПодтверждениеЗапросаНаОтменуПроведенияXML(ДокументСсылка);
		
	ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОткажитесьОтЗапросаНаОтменуПроведения Тогда
		
		Возврат КвитанцияОтказаОтЗапросаНаОтменуПроведенияXML(ДокументСсылка);
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СообщенияЕГАИС

Функция ТТНИсходящаяЕГАИСXML(ДокументСсылка)
	
	СообщенияXML = Новый Массив;
	
	Операция = Перечисления.ВидыДокументовЕГАИС.ТТН;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЕГАИСПрисоединенныеФайлы.Документ      КАК Ссылка,
	|	КОЛИЧЕСТВО(ЕГАИСПрисоединенныеФайлы.Ссылка) КАК ПоследнийНомер
	|ПОМЕСТИТЬ Версии
	|ИЗ
	|	Справочник.ЕГАИСПрисоединенныеФайлы КАК ЕГАИСПрисоединенныеФайлы
	|ГДЕ
	|	ЕГАИСПрисоединенныеФайлы.Документ = &Ссылка
	|	И ЕГАИСПрисоединенныеФайлы.Операция = &Операция
	|	И ЕГАИСПрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовЕГАИС.Исходящий)
	|СГРУППИРОВАТЬ ПО
	|	ЕГАИСПрисоединенныеФайлы.Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Шапка.Номер                        КАК Номер,
	|	Шапка.Дата                         КАК Дата,
	|	ЕСТЬNULL(Версии.ПоследнийНомер, 0) КАК ПоследнийНомерВерсии,
	|	Шапка.Идентификатор                КАК Идентификатор,
	|	Шапка.ДокументОснование            КАК ДокументОснование,
	|	
	|	Шапка.ВидОперации     КАК ВидОперации,
	|	Шапка.Упакована       КАК Упакована,
	|	Шапка.НомерТТН        КАК НомерТТН,
	|	Шапка.ДатаТТН         КАК ДатаТТН,
	|	Шапка.ДатаОтгрузки    КАК ДатаОтгрузки,
	|	Шапка.ТипДоставки     КАК ТипДоставки,
	|	Шапка.Перевозчик      КАК Перевозчик,
	|	Шапка.Автомобиль      КАК Автомобиль,
	|	Шапка.Прицеп          КАК Прицеп,
	|	Шапка.Заказчик        КАК Заказчик,
	|	Шапка.Водитель        КАК Водитель,
	|	Шапка.ПунктПогрузки   КАК ПунктПогрузки,
	|	Шапка.ПунктРазгрузки  КАК ПунктРазгрузки,
	|	Шапка.Перенаправление КАК Перенаправление,
	|	Шапка.Экспедитор      КАК Экспедитор,
	|	
	|	Грузоотправители.Ссылка                                         КАК ГрузоотправительСсылка,
	|	Грузоотправители.Код                                            КАК ГрузоотправительКод,
	|	ВЫРАЗИТЬ(Грузоотправители.Наименование КАК Строка(64))          КАК ГрузоотправительНаименование,
	|	ВЫРАЗИТЬ(Грузоотправители.НаименованиеПолное КАК Строка(255))   КАК ГрузоотправительНаименованиеПолное,
	|	Грузоотправители.ИНН                                            КАК ГрузоотправительИНН,
	|	Грузоотправители.КПП                                            КАК ГрузоотправительКПП,
	|	Грузоотправители.КодСтраны                                      КАК ГрузоотправительКодСтраны,
	|	Грузоотправители.КодРегиона                                     КАК ГрузоотправительКодРегиона,
	|	Грузоотправители.ПочтовыйИндекс                                 КАК ГрузоотправительПочтовыйИндекс,
	|	ВЫРАЗИТЬ(Грузоотправители.ПредставлениеАдреса КАК Строка(1000)) КАК ГрузоотправительПредставлениеАдреса,
	|	Грузоотправители.ТипОрганизации                                 КАК ГрузоотправительТипОрганизации,
	|	Грузоотправители.ИдентификаторОрганизацииТС                     КАК ГрузоотправительИдентификаторОрганизацииТС,
	|	
	|	Грузополучатели.Ссылка                                          КАК ГрузополучательСсылка,
	|	Грузополучатели.Код                                             КАК ГрузополучательКод,
	|	ВЫРАЗИТЬ(Грузополучатели.Наименование КАК Строка(64))           КАК ГрузополучательНаименование,
	|	ВЫРАЗИТЬ(Грузополучатели.НаименованиеПолное КАК Строка(255))    КАК ГрузополучательНаименованиеПолное,
	|	Грузополучатели.ИНН                                             КАК ГрузополучательИНН,
	|	Грузополучатели.КПП                                             КАК ГрузополучательКПП,
	|	Грузополучатели.КодСтраны                                       КАК ГрузополучательКодСтраны,
	|	Грузополучатели.КодРегиона                                      КАК ГрузополучательКодРегиона,
	|	Грузополучатели.ПочтовыйИндекс                                  КАК ГрузополучательПочтовыйИндекс,
	|	ВЫРАЗИТЬ(Грузополучатели.ПредставлениеАдреса КАК Строка(1000))  КАК ГрузополучательПредставлениеАдреса,
	|	Грузополучатели.ТипОрганизации                                  КАК ГрузополучательТипОрганизации,
	|	Грузополучатели.ИдентификаторОрганизацииТС                      КАК ГрузополучательИдентификаторОрганизацииТС,
	|	
	|	Поставщики.Ссылка                                               КАК ПоставщикСсылка,
	|	Поставщики.Код                                                  КАК ПоставщикКод,
	|	ВЫРАЗИТЬ(Поставщики.Наименование КАК Строка(64))                КАК ПоставщикНаименование,
	|	ВЫРАЗИТЬ(Поставщики.НаименованиеПолное КАК Строка(255))         КАК ПоставщикНаименованиеПолное,
	|	Поставщики.ИНН                                                  КАК ПоставщикИНН,
	|	Поставщики.КПП                                                  КАК ПоставщикКПП,
	|	Поставщики.КодСтраны                                            КАК ПоставщикКодСтраны,
	|	Поставщики.КодРегиона                                           КАК ПоставщикКодРегиона,
	|	Поставщики.ПочтовыйИндекс                                       КАК ПоставщикПочтовыйИндекс,
	|	ВЫРАЗИТЬ(Поставщики.ПредставлениеАдреса КАК Строка(1000))       КАК ПоставщикПредставлениеАдреса,
	|	Поставщики.ТипОрганизации                                       КАК ПоставщикТипОрганизации,
	|	Поставщики.ИдентификаторОрганизацииТС                           КАК ПоставщикИдентификаторОрганизацииТС,
	|	
	|	ВЫРАЗИТЬ(Шапка.Комментарий КАК Строка(200)) КАК Комментарий,
	|	ВЫРАЗИТЬ(Шапка.Основание КАК Строка(200))   КАК Основание,
	|	
	|	Шапка.Грузоотправитель              КАК ОрганизацияЕГАИС,
	|	Шапка.Грузоотправитель.Код          КАК ИдентификаторФСРАР,
	|	Шапка.Грузоотправитель.ФорматОбмена КАК ФорматОбменаГрузоотправителя,
	|	Шапка.Грузополучатель.ФорматОбмена  КАК ФорматОбменаГрузополучателя,
	|	Шапка.Ответственный                 КАК Ответственный
	|ИЗ
	|	Документ.ТТНИсходящаяЕГАИС КАК Шапка,
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
	|		ПО Шапка.Ссылка = Версии.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторОрганизацийЕГАИС КАК Грузополучатели
	|		ПО Грузополучатели.Ссылка = Шапка.Грузополучатель
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторОрганизацийЕГАИС КАК Поставщики
	|		ПО Поставщики.Ссылка = Шапка.Поставщик
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторОрганизацийЕГАИС КАК Грузоотправители
	|		ПО Грузоотправители.Ссылка = Шапка.Грузоотправитель
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	Товары.Номенклатура         КАК Номенклатура,
	|	Товары.Характеристика       КАК Характеристика
	|ПОМЕСТИТЬ ВТТовары
	|ИЗ
	|	Документ.ТТНИсходящаяЕГАИС.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	ТекстЗапроса = ТекстЗапроса
		+ ИнтеграцияЕГАИС.ТекстЗапросаВТКоэффициентыПересчетаВЕдиницыЕГАИС(
			"ВТТовары", "ВТКоэффициентыПересчетаВЕдиницыЕГАИС", Истина);
	
	ТекстЗапроса = ТекстЗапроса +
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Товары.Справка2 КАК Ссылка
	|ПОМЕСТИТЬ Справки2
	|ИЗ
	|	Документ.ТТНИсходящаяЕГАИС.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|ИНДЕКСИРОВАТЬ ПО
	|	Товары.Справка2
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Диапазоны.Ссылка         КАК Справка2,
	|	Диапазоны.ТипМарки       КАК ТипМарки,
	|	Диапазоны.СерияМарки     КАК СерияМарки,
	|	Диапазоны.НачальныйНомер КАК НачальныйНомер,
	|	Диапазоны.КонечныйНомер  КАК КонечныйНомер
	|ИЗ
	|	Справочник.Справки2ЕГАИС.ДиапазоныНомеровАкцизныхМарок КАК Диапазоны
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справки2 КАК Справки2
	|		ПО Справки2.Ссылка = Диапазоны.Ссылка
	|ИТОГИ ПО
	|	Справка2,
	|	ТипМарки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки                      КАК НомерСтроки,
	|	Товары.ИдентификаторУпаковки            КАК ИдентификаторУпаковки,
	|	Товары.Количество
	|	* ЕСТЬNULL(ЕдиницыЕГАИС.Коэффициент, 1) КАК Количество,
	|	Товары.Цена                             КАК Цена,
	|	Товары.НомерПартии                      КАК НомерПартии,
	|	Товары.Справка2                         КАК Справка2,
	|	Товары.Справка2.НомерСправки1           КАК НомерСправки1,
	|	Товары.Справка2.РегистрационныйНомер    КАК НомерСправки2,
	|	
	|	ЕСТЬNULL(ЕдиницыЕГАИС.ПроверятьОбъемДАЛ, ЛОЖЬ) КАК ПроверятьОбъемДАЛ,
	|	ЕСТЬNULL(ЕдиницыЕГАИС.ОбъемДАЛ, 0)             КАК ОбъемДАЛ,
	|
	|	Продукция.Код                                    КАК ПродукцияКод,
	|	ВЫРАЗИТЬ(Продукция.Наименование КАК Строка(64)) КАК ПродукцияНаименование,
	|	Продукция.Объем               КАК ПродукцияОбъем,
	|	Продукция.Крепость            КАК ПродукцияКрепость,
	|	Продукция.НаименованиеПолное  КАК ПродукцияНаименованиеПолное,
	|	ЕСТЬNULL(ВидыПродукции.Код, """") КАК ПродукцияКодВидаПродукции,
	|	Продукция.ТипПродукции            КАК ПродукцияТипПродукции,
	|	ЕСТЬNULL(ВидыПродукции.ВидЛицензии, ЗНАЧЕНИЕ(Перечисление.ВидыЛицензийАлкогольнойПродукции.ПустаяСсылка)) КАК ПродукцияВидЛицензии,
	|	
	|	Производители.Ссылка                                         КАК ПроизводительСсылка,
	|	Производители.Код                                            КАК ПроизводительКод,
	|	ВЫРАЗИТЬ(Производители.Наименование КАК Строка(64))          КАК ПроизводительНаименование,
	|	ВЫРАЗИТЬ(Производители.НаименованиеПолное КАК Строка(255))   КАК ПроизводительНаименованиеПолное,
	|	Производители.ИНН                                            КАК ПроизводительИНН,
	|	Производители.КПП                                            КАК ПроизводительКПП,
	|	Производители.КодСтраны                                      КАК ПроизводительКодСтраны,
	|	Производители.КодРегиона                                     КАК ПроизводительКодРегиона,
	|	Производители.ПочтовыйИндекс                                 КАК ПроизводительПочтовыйИндекс,
	|	ВЫРАЗИТЬ(Производители.ПредставлениеАдреса КАК Строка(1000)) КАК ПроизводительПредставлениеАдреса,
	|	Производители.ТипОрганизации                                 КАК ПроизводительТипОрганизации,
	|	Производители.ИдентификаторОрганизацииТС                     КАК ПроизводительИдентификаторОрганизацииТС,
	|	
	|	Импортеры.Ссылка                                         КАК ИмпортерСсылка,
	|	Импортеры.Код                                            КАК ИмпортерКод,
	|	ВЫРАЗИТЬ(Импортеры.Наименование КАК Строка(64))          КАК ИмпортерНаименование,
	|	ВЫРАЗИТЬ(Импортеры.НаименованиеПолное КАК Строка(255))   КАК ИмпортерНаименованиеПолное,
	|	Импортеры.ИНН                                            КАК ИмпортерИНН,
	|	Импортеры.КПП                                            КАК ИмпортерКПП,
	|	Импортеры.КодСтраны                                      КАК ИмпортерКодСтраны,
	|	Импортеры.КодРегиона                                     КАК ИмпортерКодРегиона,
	|	Импортеры.ПочтовыйИндекс                                 КАК ИмпортерПочтовыйИндекс,
	|	ВЫРАЗИТЬ(Импортеры.ПредставлениеАдреса КАК Строка(1000)) КАК ИмпортерПредставлениеАдреса,
	|	Импортеры.ТипОрганизации                                 КАК ИмпортерТипОрганизации,
	|	Импортеры.ИдентификаторОрганизацииТС                     КАК ИмпортерИдентификаторОрганизацииТС
	|	
	|ИЗ
	|	Документ.ТТНИсходящаяЕГАИС.Товары КАК Товары
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторАлкогольнойПродукцииЕГАИС КАК Продукция
	|		ПО Продукция.Ссылка = Товары.АлкогольнаяПродукция
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаВидыАлкогольнойПродукции КАК ВидыПродукции
	|		ПО Продукция.ВидПродукции = ВидыПродукции.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторОрганизацийЕГАИС КАК Производители
	|		ПО Производители.Ссылка = Продукция.Производитель
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторОрганизацийЕГАИС КАК Импортеры
	|		ПО Импортеры.Ссылка = Продукция.Импортер
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКоэффициентыПересчетаВЕдиницыЕГАИС КАК ЕдиницыЕГАИС
	|		ПО ЕдиницыЕГАИС.АлкогольнаяПродукция = Товары.АлкогольнаяПродукция
	|		 И ЕдиницыЕГАИС.Номенклатура = Товары.Номенклатура
	|		 И ЕдиницыЕГАИС.Характеристика = Товары.Характеристика
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка",   ДокументСсылка);
	Запрос.УстановитьПараметр("Операция", Операция);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаВидыАлкогольнойПродукции", "Справочник." + ИнтеграцияЕГАИС.СправочникВидовАлкогольнойПродукции());
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Шапка              = РезультатЗапроса[1].Выбрать();
	ВыборкаПоСправкам2 = РезультатЗапроса[РезультатЗапроса.Количество() - 2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Товары             = РезультатЗапроса[РезультатЗапроса.Количество() - 1].Выгрузить();
	
	Если Не Шапка.Следующий()
		Или Товары.Количество() = 0 Тогда
		
		СообщениеXML = ИнтеграцияЕГАИС.СтруктураСообщенияXML();
		СообщениеXML.Документ = ДокументСсылка;
		СообщениеXML.Описание = ИнтеграцияЕГАИС.ОписаниеОперацииПередачиДанных(
			Операция, ДокументСсылка);
		
		ИнтеграцияЕГАИСКлиентСервер.ДобавитьТекстОшибки(СообщениеXML, НСтр("ru = 'Нет данных для выгрузки.'"));
		
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
		
	КонецЕсли;
	
	НомерВерсии = Шапка.ПоследнийНомерВерсии + 1;
	ФорматОбмена = ФорматОбмена(Шапка);
	
	СообщениеXML = ИнтеграцияЕГАИС.СтруктураСообщенияXML();
	СообщениеXML.Описание = ИнтеграцияЕГАИС.ОписаниеОперацииПередачиДанных(
		Операция, ДокументСсылка, НомерВерсии);
	
	ПространствоИмен = Перечисления.ВидыДокументовЕГАИС.ПространствоИмен(Операция, ФорматОбмена);
	ИмяТипа          = Перечисления.ВидыДокументовЕГАИС.ТипЕГАИС(Операция, ФорматОбмена);
	
	Если ПространствоИмен = Неопределено
		Или ИмяТипа = Неопределено Тогда
		ИнтеграцияЕГАИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеXML,
			СтрШаблон(НСтр("ru = 'Операция не поддерживается в версии формата обмена: %1.'"), ФорматОбмена));
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
	КонецЕсли;
	
	#Область ТТН
	
	ТипыТТН = Новый Соответствие;
	ТипыТТН.Вставить(Перечисления.ВидыОперацийТТНИсходящейЕГАИС.РасходнаяНакладная, "WBInvoiceFromMe");
	ТипыТТН.Вставить(Перечисления.ВидыОперацийТТНИсходящейЕГАИС.ВозвратПоставщику, "WBReturnFromMe");
	
	Если ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V1 Тогда
		
		#Область ФорматОбмена_V1
		
		ДокументXDTO = ИнтеграцияЕГАИС.ОбъектXDTO(ПространствоИмен, "WayBillType");
		
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ДокументXDTO, "Identity", Шапка.Идентификатор, СообщениеXML, 3);
		
		ДокументXDTO.Header = ИнтеграцияЕГАИС.ОбъектXDTOПоИмениТипа(ДокументXDTO, "Header");
		
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ДокументXDTO.Header, "Type",         ТипыТТН[Шапка.ВидОперации],               СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ДокументXDTO.Header, "UnitType",     ?(Шапка.Упакована, "Packed", "Unpacked"), СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ДокументXDTO.Header, "NUMBER",       Шапка.НомерТТН,                           СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ДокументXDTO.Header, "Date",         Шапка.ДатаТТН,                            СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ДокументXDTO.Header, "ShippingDate", Шапка.ДатаОтгрузки,                       СообщениеXML);
		
		ДокументXDTO.Header.Transport = ИнтеграцияЕГАИС.ОбъектXDTOПоИмениТипа(ДокументXDTO.Header, "Transport");
		ИнтеграцияЕГАИС.ЗаполнитьВXDTOТранспортныйРазделТТН(ДокументXDTO.Header.Transport, Шапка, СообщениеXML);
		
		ИнтеграцияЕГАИС.ЗаполнитьВXDTOОрганизацию_v1(ДокументXDTO.Header, "Shipper",   Шапка, "Грузоотправитель", СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьВXDTOОрганизацию_v1(ДокументXDTO.Header, "Consignee", Шапка, "Грузополучатель",  СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьВXDTOОрганизацию_v1(ДокументXDTO.Header, "Supplier",  Шапка, "Поставщик",        СообщениеXML);
		
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ДокументXDTO.Header, "Base", Шапка.Основание,   СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ДокументXDTO.Header, "Note", Шапка.Комментарий, СообщениеXML);
		
		ДокументXDTO.Content = ИнтеграцияЕГАИС.ОбъектXDTOПоИмениТипа(ДокументXDTO, "Content");
		
		Для Каждого СтрокаТЧ Из Товары Цикл
			
			НомерСтроки = Формат(СтрокаТЧ.НомерСтроки, "ЧГ=0");
			
			Position = ИнтеграцияЕГАИС.ОбъектXDTO(ПространствоИмен, "PositionType");
			
			Если СтрокаТЧ.ПроверятьОбъемДАЛ
				И Не ЗначениеЗаполнено(СтрокаТЧ.ОбъемДАЛ) Тогда
				ИнтеграцияЕГАИСКлиентСервер.ДобавитьТекстОшибки(СообщениеXML, СтрШаблон(НСтр("ru = 'Для номенклатуры в строке %1 не установлен объем в декалитрах.'"), НомерСтроки));
			КонецЕсли;
			
			Position.Product = ИнтеграцияЕГАИС.ОбъектXDTOПоИмениТипа(Position, "Product");
			ИнтеграцияЕГАИС.ЗаполнитьВXDTOАлкогольнуюПродукцию_v1(Position.Product, СтрокаТЧ, "Продукция", СообщениеXML);
			
			ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position, "Pack_ID",  СтрокаТЧ.ИдентификаторУпаковки, СообщениеXML);
			ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position, "Quantity", СтрокаТЧ.Количество,            СообщениеXML);
			ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position, "Price"   , СтрокаТЧ.Цена,                  СообщениеXML);
			ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position, "Party",    СтрокаТЧ.НомерПартии,           СообщениеXML);
			ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position, "Identity", НомерСтроки,                    СообщениеXML, 5);
			
			Position.InformA = ИнтеграцияЕГАИС.ОбъектXDTOПоИмениТипа(Position, "InformA");
			ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position.InformA, "RegId", СтрокаТЧ.НомерСправки1, СообщениеXML);
			
			Position.InformB = ИнтеграцияЕГАИС.ОбъектXDTOПоИмениТипа(Position, "InformB");
			Position.InformB.InformBItem = ИнтеграцияЕГАИС.ОбъектXDTOПоИмениТипа(Position.InformB, "InformBItem");
			ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position.InformB.InformBItem, "BRegId", СтрокаТЧ.НомерСправки2, СообщениеXML);
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Справка2", СтрокаТЧ.Справка2);
			ВыборкаПоСправкам2.Сбросить();
			Если ВыборкаПоСправкам2.НайтиСледующий(СтруктураПоиска) Тогда
				
				ВыборкаПоТипам = ВыборкаПоСправкам2.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаПоТипам.Следующий() Цикл
					
					Position.InformB.InformBItem.MarkInfo = ИнтеграцияЕГАИС.ОбъектXDTOПоИмениТипа(Position.InformB.InformBItem, "MarkInfo");
					ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position.InformB.InformBItem.MarkInfo, "Type", ВыборкаПоТипам.ТипМарки, СообщениеXML);
					Position.InformB.InformBItem.MarkInfo.Ranges = ИнтеграцияЕГАИС.ОбъектXDTOПоИмениТипа(Position.InformB.InformBItem.MarkInfo, "Ranges");
					
					ВыборкаПоДиапазонам = ВыборкаПоТипам.Выбрать();
					Пока ВыборкаПоДиапазонам.Следующий() Цикл
						
						Range = ИнтеграцияЕГАИС.ОбъектXDTOПоИмениТипа(Position.InformB.InformBItem.MarkInfo.Ranges, "Range");
						ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Range, "Rank",  ВыборкаПоДиапазонам.СерияМарки,             СообщениеXML);
						ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Range, "Start", СокрЛП(ВыборкаПоДиапазонам.НачальныйНомер), СообщениеXML);
						ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Range, "Last",  СокрЛП(ВыборкаПоДиапазонам.КонечныйНомер),  СообщениеXML);
						Position.InformB.InformBItem.MarkInfo.Ranges.Range.Добавить(Range);
						
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЕсли;
			
			ДокументXDTO.Content.Position.Добавить(Position);
			
		КонецЦикла;
		
		#КонецОбласти
		
	Иначе
		
		#Область ФорматОбмена_V2
		
		ДокументXDTO = ИнтеграцияЕГАИС.ОбъектXDTO(ПространствоИмен, "WayBillType_v2");
		
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ДокументXDTO, "Identity", Шапка.Идентификатор, СообщениеXML, 3);
		
		ДокументXDTO.Header = ИнтеграцияЕГАИС.ОбъектXDTOПоИмениТипа(ДокументXDTO, "Header");
		
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ДокументXDTO.Header, "Type",         ТипыТТН[Шапка.ВидОперации], СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ДокументXDTO.Header, "NUMBER",       Шапка.НомерТТН,             СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ДокументXDTO.Header, "Date",         Шапка.ДатаТТН,              СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ДокументXDTO.Header, "ShippingDate", Шапка.ДатаОтгрузки,         СообщениеXML);
		
		ДокументXDTO.Header.Transport = ИнтеграцияЕГАИС.ОбъектXDTOПоИмениТипа(ДокументXDTO.Header, "Transport");
		ИнтеграцияЕГАИС.ЗаполнитьВXDTOТранспортныйРазделТТН(ДокументXDTO.Header.Transport, Шапка, СообщениеXML);
		
		ИнтеграцияЕГАИС.ЗаполнитьВXDTOОрганизацию_v2(ДокументXDTO.Header, "Shipper",   Шапка, "Грузоотправитель", СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьВXDTOОрганизацию_v2(ДокументXDTO.Header, "Consignee", Шапка, "Грузополучатель",  СообщениеXML);
		
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ДокументXDTO.Header, "Base", Шапка.Основание,   СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ДокументXDTO.Header, "Note", Шапка.Комментарий, СообщениеXML);
		
		ДокументXDTO.Content = ИнтеграцияЕГАИС.ОбъектXDTOПоИмениТипа(ДокументXDTO, "Content");
		
		Для Каждого СтрокаТЧ Из Товары Цикл
			
			НомерСтроки = Формат(СтрокаТЧ.НомерСтроки, "ЧГ=0");
			
			Position = ИнтеграцияЕГАИС.ОбъектXDTO(ПространствоИмен, "PositionType");
			
			Если СтрокаТЧ.ПроверятьОбъемДАЛ
				И Не ЗначениеЗаполнено(СтрокаТЧ.ОбъемДАЛ) Тогда
				ИнтеграцияЕГАИСКлиентСервер.ДобавитьТекстОшибки(СообщениеXML, СтрШаблон(НСтр("ru = 'Для номенклатуры в строке %1 не установлен объем в декалитрах.'"), НомерСтроки));
			КонецЕсли;
			
			Position.Product = ИнтеграцияЕГАИС.ОбъектXDTOПоИмениТипа(Position, "Product");
			ИнтеграцияЕГАИС.ЗаполнитьВXDTOАлкогольнуюПродукцию_v2(Position.Product, СтрокаТЧ, "Продукция", СообщениеXML);
			
			ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position, "Pack_ID",  СтрокаТЧ.ИдентификаторУпаковки, СообщениеXML);
			ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position, "Quantity", СтрокаТЧ.Количество,            СообщениеXML);
			ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position, "Price"   , СтрокаТЧ.Цена,                  СообщениеXML);
			ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position, "Party",    СтрокаТЧ.НомерПартии,           СообщениеXML);
			ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position, "Identity", НомерСтроки,                    СообщениеXML, 5);
			
			Position.InformF1 = ИнтеграцияЕГАИС.ОбъектXDTOПоИмениТипа(Position, "InformF1");
			ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position.InformF1, "RegId", СтрокаТЧ.НомерСправки1, СообщениеXML);
			
			Position.InformF2 = ИнтеграцияЕГАИС.ОбъектXDTOПоИмениТипа(Position, "InformF2");
			Position.InformF2.InformF2Item = ИнтеграцияЕГАИС.ОбъектXDTOПоИмениТипа(Position.InformF2, "InformF2Item");
			ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position.InformF2.InformF2Item, "F2RegId", СтрокаТЧ.НомерСправки2, СообщениеXML);
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Справка2", СтрокаТЧ.Справка2);
			ВыборкаПоСправкам2.Сбросить();
			Если ВыборкаПоСправкам2.НайтиСледующий(СтруктураПоиска) Тогда
				
				ВыборкаПоТипам = ВыборкаПоСправкам2.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаПоТипам.Следующий() Цикл
					
					Position.InformF2.InformF2Item.MarkInfo = ИнтеграцияЕГАИС.ОбъектXDTOПоИмениТипа(Position.InformF2.InformF2Item, "MarkInfo");
					ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position.InformF2.InformF2Item.MarkInfo, "Type", ВыборкаПоТипам.ТипМарки, СообщениеXML);
					Position.InformF2.InformF2Item.MarkInfo.Ranges = ИнтеграцияЕГАИС.ОбъектXDTOПоИмениТипа(Position.InformF2.InformF2Item.MarkInfo, "Ranges");
					
					ВыборкаПоДиапазонам = ВыборкаПоТипам.Выбрать();
					Пока ВыборкаПоДиапазонам.Следующий() Цикл
						
						Range = ИнтеграцияЕГАИС.ОбъектXDTOПоИмениТипа(Position.InformF2.InformF2Item.MarkInfo.Ranges, "Range");
						ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Range, "Rank",  ВыборкаПоДиапазонам.СерияМарки,             СообщениеXML);
						ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Range, "Start", СокрЛП(ВыборкаПоДиапазонам.НачальныйНомер), СообщениеXML);
						ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Range, "Last",  СокрЛП(ВыборкаПоДиапазонам.КонечныйНомер),  СообщениеXML);
						Position.InformF2.InformF2Item.MarkInfo.Ranges.Range.Добавить(Range);
						
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЕсли;
			
			ДокументXDTO.Content.Position.Добавить(Position);
			
		КонецЦикла;
		
		#КонецОбласти
		
	КонецЕсли;
	
	#КонецОбласти
	
	ТекстСообщенияXML = ИнтеграцияЕГАИС.ОбъектXDTOВXML(ДокументXDTO, Шапка.ИдентификаторФСРАР, ПространствоИмен, ИмяТипа);
	
	СообщениеXML.ТекстСообщенияXML = ТекстСообщенияXML;
	СообщениеXML.ТипСообщения      = Перечисления.ТипыЗапросовЕГАИС.Исходящий;
	СообщениеXML.ОрганизацияЕГАИС  = Шапка.ОрганизацияЕГАИС;
	СообщениеXML.Операция          = Операция;
	СообщениеXML.ФорматОбмена      = ФорматОбмена;
	СообщениеXML.Документ          = ДокументСсылка;
	СообщениеXML.ДокументОснование = Шапка.ДокументОснование;
	СообщениеXML.Версия            = НомерВерсии;
	
	СообщенияXML.Добавить(СообщениеXML);
	
	Возврат СообщенияXML;
	
КонецФункции

Функция АктОтказаXML(ДокументСсылка)
	
	СообщенияXML = Новый Массив;
	
	Операция = Перечисления.ВидыДокументовЕГАИС.АктТТНОтказ;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЕГАИСПрисоединенныеФайлы.Документ      КАК Ссылка,
	|	КОЛИЧЕСТВО(ЕГАИСПрисоединенныеФайлы.Ссылка) КАК ПоследнийНомер
	|ПОМЕСТИТЬ Версии
	|ИЗ
	|	Справочник.ЕГАИСПрисоединенныеФайлы КАК ЕГАИСПрисоединенныеФайлы
	|ГДЕ
	|	ЕГАИСПрисоединенныеФайлы.Документ = &Ссылка
	|	И ЕГАИСПрисоединенныеФайлы.Операция = &Операция
	|	И ЕГАИСПрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовЕГАИС.Исходящий)
	|СГРУППИРОВАТЬ ПО
	|	ЕГАИСПрисоединенныеФайлы.Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Шапка.Номер                        КАК Номер,
	|	Шапка.Дата                         КАК Дата,
	|	ЕСТЬNULL(Версии.ПоследнийНомер, 0) КАК ПоследнийНомерВерсии,
	|	Шапка.ДокументОснование            КАК ДокументОснование,
	|	
	|	Шапка.ИдентификаторЕГАИС   КАК ИдентификаторЕГАИС,
	|	ВЫРАЗИТЬ(Шапка.Комментарий КАК Строка(500)) КАК Комментарий,
	|	
	|	Шапка.Грузоотправитель              КАК ОрганизацияЕГАИС,
	|	Шапка.Грузоотправитель.Код          КАК ИдентификаторФСРАР,
	|	Шапка.Грузоотправитель.ФорматОбмена КАК ФорматОбменаГрузоотправителя,
	|	Шапка.Грузополучатель.ФорматОбмена  КАК ФорматОбменаГрузополучателя,
	|	Шапка.Ответственный                 КАК Ответственный
	|ИЗ
	|	Документ.ТТНИсходящаяЕГАИС КАК Шапка,
	|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
	|		ПО Шапка.Ссылка = Версии.Ссылка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка
	|");
	
	Запрос.УстановитьПараметр("Ссылка",   ДокументСсылка);
	Запрос.УстановитьПараметр("Операция", Операция);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Шапка  = РезультатЗапроса[РезультатЗапроса.Количество() - 1].Выбрать();
	
	Если Не Шапка.Следующий() Тогда
		
		СообщениеXML = ИнтеграцияЕГАИС.СтруктураСообщенияXML();
		СообщениеXML.Документ = ДокументСсылка;
		СообщениеXML.Описание = ИнтеграцияЕГАИС.ОписаниеОперацииПередачиДанных(
			Операция, ДокументСсылка);
		
		ИнтеграцияЕГАИСКлиентСервер.ДобавитьТекстОшибки(СообщениеXML, НСтр("ru = 'Нет данных для выгрузки.'"));
		
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
		
	КонецЕсли;
	
	НомерВерсии = Шапка.ПоследнийНомерВерсии + 1;
	ФорматОбмена = ФорматОбмена(Шапка);
	
	СообщениеXML = ИнтеграцияЕГАИС.СтруктураСообщенияXML();
	СообщениеXML.Описание = ИнтеграцияЕГАИС.ОписаниеОперацииПередачиДанных(
		Операция, ДокументСсылка, НомерВерсии);
	
	ПространствоИмен = Перечисления.ВидыДокументовЕГАИС.ПространствоИмен(Операция, ФорматОбмена);
	ИмяТипа          = Перечисления.ВидыДокументовЕГАИС.ТипЕГАИС(Операция, ФорматОбмена);
	
	Если ПространствоИмен = Неопределено
		Или ИмяТипа = Неопределено Тогда
		ИнтеграцияЕГАИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеXML,
			СтрШаблон(НСтр("ru = 'Операция не поддерживается в версии формата обмена: %1.'"), ФорматОбмена));
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
	КонецЕсли;
	
	#Область АктТТНОтказ
	
	Если ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V1 Тогда
		
		#Область ФорматОбмена_V1
		
		АктXDTO = ИнтеграцияЕГАИС.ОбъектXDTO(ПространствоИмен, "WayBillActType");
		
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(АктXDTO, "Identity", ИнтеграцияЕГАИС.НовыйИдентификаторДокумента(ДокументСсылка, "cwb"), СообщениеXML, 3);
		
		АктXDTO.Header = ИнтеграцияЕГАИС.ОбъектXDTOПоИмениТипа(АктXDTO, "Header");
		
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(АктXDTO.Header, "IsAccept",  "Rejected",               СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(АктXDTO.Header, "ACTNUMBER", Шапка.Номер,              СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(АктXDTO.Header, "ActDate",   ТекущаяДатаСеанса(),      СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(АктXDTO.Header, "WBRegId",   Шапка.ИдентификаторЕГАИС, СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(АктXDTO.Header, "Note",      Шапка.Комментарий,        СообщениеXML);
		
		#КонецОбласти
		
	Иначе
		
		#Область ФорматОбмена_V2
		
		АктXDTO = ИнтеграцияЕГАИС.ОбъектXDTO(ПространствоИмен, "WayBillActType_v2");
		
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(АктXDTO, "Identity", ИнтеграцияЕГАИС.НовыйИдентификаторДокумента(ДокументСсылка, "cwb"), СообщениеXML, 3);
		
		АктXDTO.Header = ИнтеграцияЕГАИС.ОбъектXDTOПоИмениТипа(АктXDTO, "Header");
		
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(АктXDTO.Header, "IsAccept",  "Rejected",               СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(АктXDTO.Header, "ACTNUMBER", Шапка.Номер,              СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(АктXDTO.Header, "ActDate",   ТекущаяДатаСеанса(),      СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(АктXDTO.Header, "WBRegId",   Шапка.ИдентификаторЕГАИС, СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(АктXDTO.Header, "Note",      Шапка.Комментарий,        СообщениеXML);
		
		#КонецОбласти
		
	КонецЕсли;
	
	#КонецОбласти
	
	ТекстСообщенияXML = ИнтеграцияЕГАИС.ОбъектXDTOВXML(АктXDTO, Шапка.ИдентификаторФСРАР, ПространствоИмен, ИмяТипа);
	
	СообщениеXML.ТекстСообщенияXML = ТекстСообщенияXML;
	СообщениеXML.ТипСообщения      = Перечисления.ТипыЗапросовЕГАИС.Исходящий;
	СообщениеXML.ОрганизацияЕГАИС  = Шапка.ОрганизацияЕГАИС;
	СообщениеXML.Операция          = Операция;
	СообщениеXML.ФорматОбмена      = ФорматОбмена;
	СообщениеXML.Документ          = ДокументСсылка;
	СообщениеXML.ДокументОснование = Шапка.ДокументОснование;
	СообщениеXML.Версия            = НомерВерсии;
	
	СообщенияXML.Добавить(СообщениеXML);
	
	Возврат СообщенияXML;
	
КонецФункции

Функция КвитанцияПодтвержденияАктаРасхожденийXML(ДокументСсылка)
	
	СообщенияXML = Новый Массив;
	
	Операция = Перечисления.ВидыДокументовЕГАИС.КвитанцияАктаРасхожденийПодтверждение;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЕГАИСПрисоединенныеФайлы.Документ КАК Ссылка,
	|	КОЛИЧЕСТВО(ЕГАИСПрисоединенныеФайлы.Ссылка) КАК ПоследнийНомер
	|ПОМЕСТИТЬ Версии
	|ИЗ
	|	Справочник.ЕГАИСПрисоединенныеФайлы КАК ЕГАИСПрисоединенныеФайлы
	|ГДЕ
	|	ЕГАИСПрисоединенныеФайлы.Документ = &Ссылка
	|	И ЕГАИСПрисоединенныеФайлы.Операция = &Операция
	|	И ЕГАИСПрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовЕГАИС.Исходящий)
	|СГРУППИРОВАТЬ ПО
	|	ЕГАИСПрисоединенныеФайлы.Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Шапка.Номер                         КАК Номер,
	|	Шапка.Дата                          КАК Дата,
	|	ЕСТЬNULL(Версии.ПоследнийНомер, 0)  КАК ПоследнийНомерВерсии,
	|	Шапка.ДокументОснование             КАК ДокументОснование,
	|	
	|	Шапка.ИдентификаторЕГАИС            КАК ИдентификаторЕГАИС,
	|	Шапка.Грузоотправитель              КАК ОрганизацияЕГАИС,
	|	Шапка.Грузоотправитель.Код          КАК ИдентификаторФСРАР,
	|	Шапка.Грузоотправитель.ФорматОбмена КАК ФорматОбменаГрузоотправителя,
	|	Шапка.Грузополучатель.ФорматОбмена  КАК ФорматОбменаГрузополучателя,
	|	Шапка.Комментарий                   КАК Комментарий,
	|	Шапка.Ответственный                 КАК Ответственный
	|ИЗ
	|	Документ.ТТНИсходящаяЕГАИС КАК Шапка,
	|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
	|		ПО Шапка.Ссылка = Версии.Ссылка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка
	|");
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("Операция", Операция);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Шапка = РезультатЗапроса[РезультатЗапроса.Количество() - 1].Выбрать();
	
	Если Не Шапка.Следующий() Тогда
		
		СообщениеXML = ИнтеграцияЕГАИС.СтруктураСообщенияXML();
		СообщениеXML.Документ = ДокументСсылка;
		СообщениеXML.Описание = ИнтеграцияЕГАИС.ОписаниеОперацииПередачиДанных(
			Операция, ДокументСсылка);
		
		ИнтеграцияЕГАИСКлиентСервер.ДобавитьТекстОшибки(СообщениеXML, НСтр("ru = 'Нет данных для выгрузки.'"));
		
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
		
	КонецЕсли;
	
	НомерВерсии = Шапка.ПоследнийНомерВерсии + 1;
	ФорматОбмена = ФорматОбмена(Шапка);
	
	СообщениеXML = ИнтеграцияЕГАИС.СтруктураСообщенияXML();
	СообщениеXML.Описание = ИнтеграцияЕГАИС.ОписаниеОперацииПередачиДанных(
		Операция, ДокументСсылка, НомерВерсии);
	
	ПространствоИмен = Перечисления.ВидыДокументовЕГАИС.ПространствоИмен(Операция, ФорматОбмена);
	ИмяТипа          = Перечисления.ВидыДокументовЕГАИС.ТипЕГАИС(Операция, ФорматОбмена);
	
	Если ПространствоИмен = Неопределено
		Или ИмяТипа = Неопределено Тогда
		ИнтеграцияЕГАИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеXML,
			СтрШаблон(НСтр("ru = 'Операция не поддерживается в версии формата обмена: %1.'"), ФорматОбмена));
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
	КонецЕсли;
	
	#Область КвитанцияАктаРасхожденийПодтверждение
	
	КвитанцияXDTO = ИнтеграцияЕГАИС.ОбъектXDTO(ПространствоИмен, "ConfirmTicketType");
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(КвитанцияXDTO, "Identity", ИнтеграцияЕГАИС.НовыйИдентификаторДокумента(ДокументСсылка, "cct"), СообщениеXML, 3);
	
	КвитанцияXDTO.Header = ИнтеграцияЕГАИС.ОбъектXDTOПоИмениТипа(КвитанцияXDTO, "Header");
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(КвитанцияXDTO.Header, "IsConfirm",    "Accepted",               СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(КвитанцияXDTO.Header, "TicketNumber", Шапка.Номер,              СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(КвитанцияXDTO.Header, "TicketDate",   ТекущаяДатаСеанса(),      СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(КвитанцияXDTO.Header, "WBRegId",      Шапка.ИдентификаторЕГАИС, СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(КвитанцияXDTO.Header, "Note",         Шапка.Комментарий,        СообщениеXML);
	
	#КонецОбласти
	
	ТекстСообщенияXML = ИнтеграцияЕГАИС.ОбъектXDTOВXML(КвитанцияXDTO, Шапка.ИдентификаторФСРАР, ПространствоИмен, ИмяТипа);
	
	СообщениеXML.ТекстСообщенияXML = ТекстСообщенияXML;
	СообщениеXML.ТипСообщения      = Перечисления.ТипыЗапросовЕГАИС.Исходящий;
	СообщениеXML.ОрганизацияЕГАИС  = Шапка.ОрганизацияЕГАИС;
	СообщениеXML.Операция          = Операция;
	СообщениеXML.ФорматОбмена      = ФорматОбмена;
	СообщениеXML.Документ          = ДокументСсылка;
	СообщениеXML.ДокументОснование = Шапка.ДокументОснование;
	СообщениеXML.Версия            = НомерВерсии;
	
	СообщенияXML.Добавить(СообщениеXML);
	
	Возврат СообщенияXML;
	
КонецФункции

Функция КвитанцияОтказаОтАктаРасхожденийXML(ДокументСсылка)
	
	СообщенияXML = Новый Массив;
	
	Операция = Перечисления.ВидыДокументовЕГАИС.КвитанцияАктаРасхожденийОтказ;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЕГАИСПрисоединенныеФайлы.Документ КАК Ссылка,
	|	КОЛИЧЕСТВО(ЕГАИСПрисоединенныеФайлы.Ссылка) КАК ПоследнийНомер
	|ПОМЕСТИТЬ Версии
	|ИЗ
	|	Справочник.ЕГАИСПрисоединенныеФайлы КАК ЕГАИСПрисоединенныеФайлы
	|ГДЕ
	|	ЕГАИСПрисоединенныеФайлы.Документ = &Ссылка
	|	И ЕГАИСПрисоединенныеФайлы.Операция = &Операция
	|	И ЕГАИСПрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовЕГАИС.Исходящий)
	|СГРУППИРОВАТЬ ПО
	|	ЕГАИСПрисоединенныеФайлы.Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Шапка.Номер                         КАК Номер,
	|	Шапка.Дата                          КАК Дата,
	|	ЕСТЬNULL(Версии.ПоследнийНомер, 0)  КАК ПоследнийНомерВерсии,
	|	Шапка.ДокументОснование             КАК ДокументОснование,
	|	
	|	Шапка.ИдентификаторЕГАИС            КАК ИдентификаторЕГАИС,
	|	Шапка.Грузоотправитель              КАК ОрганизацияЕГАИС,
	|	Шапка.Грузоотправитель.Код          КАК ИдентификаторФСРАР,
	|	Шапка.Грузоотправитель.ФорматОбмена КАК ФорматОбменаГрузоотправителя,
	|	Шапка.Грузополучатель.ФорматОбмена  КАК ФорматОбменаГрузополучателя,
	|	Шапка.Комментарий                   КАК Комментарий,
	|	Шапка.Ответственный                 КАК Ответственный
	|ИЗ
	|	Документ.ТТНИсходящаяЕГАИС КАК Шапка,
	|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
	|		ПО Шапка.Ссылка = Версии.Ссылка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка
	|");
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("Операция", Операция);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Шапка = РезультатЗапроса[РезультатЗапроса.Количество() - 1].Выбрать();
	
	Если Не Шапка.Следующий() Тогда
		
		СообщениеXML = ИнтеграцияЕГАИС.СтруктураСообщенияXML();
		СообщениеXML.Документ = ДокументСсылка;
		СообщениеXML.Описание = ИнтеграцияЕГАИС.ОписаниеОперацииПередачиДанных(
			Операция, ДокументСсылка);
		
		ИнтеграцияЕГАИСКлиентСервер.ДобавитьТекстОшибки(СообщениеXML, НСтр("ru = 'Нет данных для выгрузки.'"));
		
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
		
	КонецЕсли;
	
	НомерВерсии = Шапка.ПоследнийНомерВерсии + 1;
	ФорматОбмена = ФорматОбмена(Шапка);
	
	СообщениеXML = ИнтеграцияЕГАИС.СтруктураСообщенияXML();
	СообщениеXML.Описание = ИнтеграцияЕГАИС.ОписаниеОперацииПередачиДанных(
		Операция, ДокументСсылка, НомерВерсии);
	
	ПространствоИмен = Перечисления.ВидыДокументовЕГАИС.ПространствоИмен(Операция, ФорматОбмена);
	ИмяТипа          = Перечисления.ВидыДокументовЕГАИС.ТипЕГАИС(Операция, ФорматОбмена);
	
	Если ПространствоИмен = Неопределено
		Или ИмяТипа = Неопределено Тогда
		ИнтеграцияЕГАИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеXML,
			СтрШаблон(НСтр("ru = 'Операция не поддерживается в версии формата обмена: %1.'"), ФорматОбмена));
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
	КонецЕсли;
	
	#Область КвитанцияАктаРасхожденийОтказ
	
	КвитанцияXDTO = ИнтеграцияЕГАИС.ОбъектXDTO(ПространствоИмен, "ConfirmTicketType");
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(КвитанцияXDTO, "Identity", ИнтеграцияЕГАИС.НовыйИдентификаторДокумента(ДокументСсылка, "rct"), СообщениеXML, 3);
	
	КвитанцияXDTO.Header = ИнтеграцияЕГАИС.ОбъектXDTOПоИмениТипа(КвитанцияXDTO, "Header");
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(КвитанцияXDTO.Header, "IsConfirm",    "Rejected",               СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(КвитанцияXDTO.Header, "TicketNumber", Шапка.Номер,              СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(КвитанцияXDTO.Header, "TicketDate",   ТекущаяДатаСеанса(),      СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(КвитанцияXDTO.Header, "WBRegId",      Шапка.ИдентификаторЕГАИС, СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(КвитанцияXDTO.Header, "Note",         Шапка.Комментарий,        СообщениеXML);
	
	#КонецОбласти
	
	ТекстСообщенияXML = ИнтеграцияЕГАИС.ОбъектXDTOВXML(КвитанцияXDTO, Шапка.ИдентификаторФСРАР, ПространствоИмен, ИмяТипа);
	
	СообщениеXML.ТекстСообщенияXML = ТекстСообщенияXML;
	СообщениеXML.ТипСообщения      = Перечисления.ТипыЗапросовЕГАИС.Исходящий;
	СообщениеXML.ОрганизацияЕГАИС  = Шапка.ОрганизацияЕГАИС;
	СообщениеXML.Операция          = Операция;
	СообщениеXML.ФорматОбмена      = ФорматОбмена;
	СообщениеXML.Документ          = ДокументСсылка;
	СообщениеXML.ДокументОснование = Шапка.ДокументОснование;
	СообщениеXML.Версия            = НомерВерсии;
	
	СообщенияXML.Добавить(СообщениеXML);
	
	Возврат СообщенияXML;
	
КонецФункции

Функция КвитанцияПодтверждениеЗапросаНаОтменуПроведенияXML(ДокументСсылка)
	
	СообщенияXML = Новый Массив;
	
	Операция = Перечисления.ВидыДокументовЕГАИС.КвитанцияЗапросаНаОтменуПроведенияТТНПодтверждение;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЕГАИСПрисоединенныеФайлы.Документ КАК Ссылка,
	|	КОЛИЧЕСТВО(ЕГАИСПрисоединенныеФайлы.Ссылка) КАК ПоследнийНомер
	|ПОМЕСТИТЬ Версии
	|ИЗ
	|	Справочник.ЕГАИСПрисоединенныеФайлы КАК ЕГАИСПрисоединенныеФайлы
	|ГДЕ
	|	ЕГАИСПрисоединенныеФайлы.Документ = &Ссылка
	|	И ЕГАИСПрисоединенныеФайлы.Операция = &Операция
	|	И ЕГАИСПрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовЕГАИС.Исходящий)
	|СГРУППИРОВАТЬ ПО
	|	ЕГАИСПрисоединенныеФайлы.Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Шапка.Номер                         КАК Номер,
	|	Шапка.Дата                          КАК Дата,
	|	ЕСТЬNULL(Версии.ПоследнийНомер, 0)  КАК ПоследнийНомерВерсии,
	|	Шапка.ДокументОснование             КАК ДокументОснование,
	|	
	|	Шапка.ИдентификаторЕГАИС            КАК ИдентификаторЕГАИС,
	|	Шапка.Грузоотправитель              КАК ОрганизацияЕГАИС,
	|	Шапка.Грузоотправитель.Код          КАК ИдентификаторФСРАР,
	|	Шапка.Грузоотправитель.ФорматОбмена КАК ФорматОбменаГрузоотправителя,
	|	Шапка.Грузополучатель.ФорматОбмена  КАК ФорматОбменаГрузополучателя,
	|	Шапка.Комментарий                   КАК Комментарий,
	|	Шапка.Ответственный                 КАК Ответственный
	|ИЗ
	|	Документ.ТТНИсходящаяЕГАИС КАК Шапка,
	|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
	|		ПО Шапка.Ссылка = Версии.Ссылка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка
	|");
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("Операция", Операция);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Шапка = РезультатЗапроса[РезультатЗапроса.Количество() - 1].Выбрать();
	
	Если Не Шапка.Следующий() Тогда
		
		СообщениеXML = ИнтеграцияЕГАИС.СтруктураСообщенияXML();
		СообщениеXML.Документ = ДокументСсылка;
		СообщениеXML.Описание = ИнтеграцияЕГАИС.ОписаниеОперацииПередачиДанных(
			Операция, ДокументСсылка);
		
		ИнтеграцияЕГАИСКлиентСервер.ДобавитьТекстОшибки(СообщениеXML, НСтр("ru = 'Нет данных для выгрузки.'"));
		
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
		
	КонецЕсли;
	
	НомерВерсии = Шапка.ПоследнийНомерВерсии + 1;
	ФорматОбмена = ФорматОбмена(Шапка);
	
	СообщениеXML = ИнтеграцияЕГАИС.СтруктураСообщенияXML();
	СообщениеXML.Описание = ИнтеграцияЕГАИС.ОписаниеОперацииПередачиДанных(
		Операция, ДокументСсылка, НомерВерсии);
	
	ПространствоИмен = Перечисления.ВидыДокументовЕГАИС.ПространствоИмен(Операция, ФорматОбмена);
	ИмяТипа          = Перечисления.ВидыДокументовЕГАИС.ТипЕГАИС(Операция, ФорматОбмена);
	
	Если ПространствоИмен = Неопределено
		Или ИмяТипа = Неопределено Тогда
		ИнтеграцияЕГАИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеXML,
			СтрШаблон(НСтр("ru = 'Операция не поддерживается в версии формата обмена: %1.'"), ФорматОбмена));
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
	КонецЕсли;
	
	#Область КвитанцияЗапросаНаОтменуПроведенияТТНПодтверждение
	
	КвитанцияXDTO = ИнтеграцияЕГАИС.ОбъектXDTO(ПространствоИмен, "ConfirmRepealWB");
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(КвитанцияXDTO, "Identity", ИнтеграцияЕГАИС.НовыйИдентификаторДокумента(ДокументСсылка, "acr"), СообщениеXML, 3);
	
	КвитанцияXDTO.Header = ИнтеграцияЕГАИС.ОбъектXDTOПоИмениТипа(КвитанцияXDTO, "Header");
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(КвитанцияXDTO.Header, "IsConfirm",     "Accepted",               СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(КвитанцияXDTO.Header, "ConfirmNumber", Шапка.Номер,              СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(КвитанцияXDTO.Header, "ConfirmDate",   ТекущаяДатаСеанса(),      СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(КвитанцияXDTO.Header, "WBRegId",       Шапка.ИдентификаторЕГАИС, СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(КвитанцияXDTO.Header, "Note",          Шапка.Комментарий,        СообщениеXML);
	
	#КонецОбласти
	
	ТекстСообщенияXML = ИнтеграцияЕГАИС.ОбъектXDTOВXML(КвитанцияXDTO, Шапка.ИдентификаторФСРАР, ПространствоИмен, ИмяТипа);
	
	СообщениеXML.ТекстСообщенияXML = ТекстСообщенияXML;
	СообщениеXML.ТипСообщения      = Перечисления.ТипыЗапросовЕГАИС.Исходящий;
	СообщениеXML.ОрганизацияЕГАИС  = Шапка.ОрганизацияЕГАИС;
	СообщениеXML.Операция          = Операция;
	СообщениеXML.ФорматОбмена      = ФорматОбмена;
	СообщениеXML.Документ          = ДокументСсылка;
	СообщениеXML.ДокументОснование = Шапка.ДокументОснование;
	СообщениеXML.Версия            = НомерВерсии;
	
	СообщенияXML.Добавить(СообщениеXML);
	
	Возврат СообщенияXML;
	
КонецФункции

Функция КвитанцияОтказаОтЗапросаНаОтменуПроведенияXML(ДокументСсылка)
	
	СообщенияXML = Новый Массив;
	
	Операция = Перечисления.ВидыДокументовЕГАИС.КвитанцияЗапросаНаОтменуПроведенияТТНОтказ;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЕГАИСПрисоединенныеФайлы.Документ КАК Ссылка,
	|	КОЛИЧЕСТВО(ЕГАИСПрисоединенныеФайлы.Ссылка) КАК ПоследнийНомер
	|ПОМЕСТИТЬ Версии
	|ИЗ
	|	Справочник.ЕГАИСПрисоединенныеФайлы КАК ЕГАИСПрисоединенныеФайлы
	|ГДЕ
	|	ЕГАИСПрисоединенныеФайлы.Документ = &Ссылка
	|	И ЕГАИСПрисоединенныеФайлы.Операция = &Операция
	|	И ЕГАИСПрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовЕГАИС.Исходящий)
	|СГРУППИРОВАТЬ ПО
	|	ЕГАИСПрисоединенныеФайлы.Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Шапка.Номер                         КАК Номер,
	|	Шапка.Дата                          КАК Дата,
	|	ЕСТЬNULL(Версии.ПоследнийНомер, 0)  КАК ПоследнийНомерВерсии,
	|	Шапка.ДокументОснование             КАК ДокументОснование,
	|	
	|	Шапка.ИдентификаторЕГАИС            КАК ИдентификаторЕГАИС,
	|	Шапка.Грузоотправитель              КАК ОрганизацияЕГАИС,
	|	Шапка.Грузоотправитель.Код          КАК ИдентификаторФСРАР,
	|	Шапка.Грузоотправитель.ФорматОбмена КАК ФорматОбменаГрузоотправителя,
	|	Шапка.Грузополучатель.ФорматОбмена  КАК ФорматОбменаГрузополучателя,
	|	Шапка.Комментарий                   КАК Комментарий,
	|	Шапка.Ответственный                 КАК Ответственный
	|ИЗ
	|	Документ.ТТНИсходящаяЕГАИС КАК Шапка,
	|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
	|		ПО Шапка.Ссылка = Версии.Ссылка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка
	|");
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("Операция", Операция);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Шапка = РезультатЗапроса[РезультатЗапроса.Количество() - 1].Выбрать();
	
	Если Не Шапка.Следующий() Тогда
		
		СообщениеXML = ИнтеграцияЕГАИС.СтруктураСообщенияXML();
		СообщениеXML.Документ = ДокументСсылка;
		СообщениеXML.Описание = ИнтеграцияЕГАИС.ОписаниеОперацииПередачиДанных(
			Операция, ДокументСсылка);
		
		ИнтеграцияЕГАИСКлиентСервер.ДобавитьТекстОшибки(СообщениеXML, НСтр("ru = 'Нет данных для выгрузки.'"));
		
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
		
	КонецЕсли;
	
	НомерВерсии = Шапка.ПоследнийНомерВерсии + 1;
	ФорматОбмена = ФорматОбмена(Шапка);
	
	СообщениеXML = ИнтеграцияЕГАИС.СтруктураСообщенияXML();
	СообщениеXML.Описание = ИнтеграцияЕГАИС.ОписаниеОперацииПередачиДанных(
		Операция, ДокументСсылка, НомерВерсии);
	
	ПространствоИмен = Перечисления.ВидыДокументовЕГАИС.ПространствоИмен(Операция, ФорматОбмена);
	ИмяТипа          = Перечисления.ВидыДокументовЕГАИС.ТипЕГАИС(Операция, ФорматОбмена);
	
	Если ПространствоИмен = Неопределено
		Или ИмяТипа = Неопределено Тогда
		ИнтеграцияЕГАИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеXML,
			СтрШаблон(НСтр("ru = 'Операция не поддерживается в версии формата обмена: %1.'"), ФорматОбмена));
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
	КонецЕсли;
	
	#Область КвитанцияЗапросаНаОтменуПроведенияТТНОтказ
	
	КвитанцияXDTO = ИнтеграцияЕГАИС.ОбъектXDTO(ПространствоИмен, "ConfirmRepealWB");
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(КвитанцияXDTO, "Identity", ИнтеграцияЕГАИС.НовыйИдентификаторДокумента(ДокументСсылка, "rcr"), СообщениеXML, 3);
	
	КвитанцияXDTO.Header = ИнтеграцияЕГАИС.ОбъектXDTOПоИмениТипа(КвитанцияXDTO, "Header");
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(КвитанцияXDTO.Header, "IsConfirm",     "Rejected",               СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(КвитанцияXDTO.Header, "ConfirmNumber", Шапка.Номер,              СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(КвитанцияXDTO.Header, "ConfirmDate",   ТекущаяДатаСеанса(),      СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(КвитанцияXDTO.Header, "WBRegId",       Шапка.ИдентификаторЕГАИС, СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(КвитанцияXDTO.Header, "Note",          Шапка.Комментарий,        СообщениеXML);
	
	#КонецОбласти
	
	ТекстСообщенияXML = ИнтеграцияЕГАИС.ОбъектXDTOВXML(КвитанцияXDTO, Шапка.ИдентификаторФСРАР, ПространствоИмен, ИмяТипа);
	
	СообщениеXML.ТекстСообщенияXML = ТекстСообщенияXML;
	СообщениеXML.ТипСообщения      = Перечисления.ТипыЗапросовЕГАИС.Исходящий;
	СообщениеXML.ОрганизацияЕГАИС  = Шапка.ОрганизацияЕГАИС;
	СообщениеXML.Операция          = Операция;
	СообщениеXML.ФорматОбмена      = ФорматОбмена;
	СообщениеXML.Документ          = ДокументСсылка;
	СообщениеXML.ДокументОснование = Шапка.ДокументОснование;
	СообщениеXML.Версия            = НомерВерсии;
	
	СообщенияXML.Добавить(СообщениеXML);
	
	Возврат СообщенияXML;
	
КонецФункции

#КонецОбласти

#Область Отчеты

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица с командами отчетов. Для изменения.
//       См. описание 1 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	ГосударственныеИнформационныеСистемыПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);
	
	ГосударственныеИнформационныеСистемыПереопределяемый.ДобавитьКомандуДвиженияДокумента(КомандыОтчетов);
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Раздел "Б" справки к ТТН
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик = "ИнтеграцияЕГАИСКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.МенеджерПечати = "Обработка.ПечатьРазделаБСправкиТТН";
	КомандаПечати.Идентификатор = "ТТНСправкаРазделБ";
	КомандаПечати.Представление = НСтр("ru = 'Раздел ""Б"" справки к ТТН'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	
КонецПроцедуры

// Сформировать печатные формы объектов.
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую.
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать.
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати.
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы.
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	
	
КонецПроцедуры

#КонецОбласти

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;

	Возврат ИсточникиДанных;

КонецФункции

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	////////////////////////////////////////////////////////////////////////////
	// Создадим запрос инициализации движений
	
	Запрос = Новый Запрос;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
	
	////////////////////////////////////////////////////////////////////////////
	// Сформируем текст запроса
	
	ТекстыЗапроса = Новый СписокЗначений;
	ТекстЗапросаТаблицаОстаткиАлкогольнойПродукцииЕГАИС(Запрос, ТекстыЗапроса, Регистры);
	
	ИнтеграцияЕГАИС.ИницализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина);
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеШапки.Дата                    КАК Период,
	|	ДанныеШапки.Ссылка                  КАК Ссылка,
	|	ДанныеШапки.Грузоотправитель        КАК Грузоотправитель,
	|	ДанныеШапки.ДатаРегистрацииДвижений КАК ДатаРегистрацииДвижений,
	|	ДанныеШапки.ЕстьРасхождения         КАК ЕстьРасхождения,
	|	СтатусыДокументовЕГАИС.Статус       КАК СтатусОбработки
	|ИЗ
	|	Документ.ТТНИсходящаяЕГАИС КАК ДанныеШапки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
	|		ПО СтатусыДокументовЕГАИС.Документ = ДанныеШапки.Ссылка
	|ГДЕ
	|	ДанныеШапки.Ссылка = &Ссылка";
	
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	Запрос.УстановитьПараметр("Период",                  Реквизиты.Период);
	Запрос.УстановитьПараметр("Ссылка",                  Реквизиты.Ссылка);
	Запрос.УстановитьПараметр("УдалитьСтатусОбработки",  Реквизиты.СтатусОбработки);
	Запрос.УстановитьПараметр("Грузоотправитель",        Реквизиты.Грузоотправитель);
	Запрос.УстановитьПараметр("ДатаРегистрацииДвижений", Реквизиты.ДатаРегистрацииДвижений);
	Запрос.УстановитьПараметр("ЕстьРасхождения",         Реквизиты.ЕстьРасхождения);
	
	Запрос.УстановитьПараметр("СтатусыДвиженийСвободныйОстаток", СтатусыДвиженийСвободныйОстаток());
	Запрос.УстановитьПараметр("СтатусыДвиженийКоличество",       СтатусыДвиженийКоличество());
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаОстаткиАлкогольнойПродукцииЕГАИС(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ОстаткиАлкогольнойПродукцииЕГАИС";
	
	Если НЕ ИнтеграцияЕГАИС.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ИнтеграцияЕГАИС.ЕстьТаблицаЗапроса("ВТТовары", ТекстыЗапроса) Тогда
		ТекстЗапросаВТТовары(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	Если НЕ ИнтеграцияЕГАИС.ЕстьТаблицаЗапроса("ВТКоэффициентыПересчетаВЕдиницыЕГАИС", ТекстыЗапроса) Тогда
		ТекстЗапросаВТКоэффициентыПересчетаВЕдиницыЕГАИС(Запрос, ТекстыЗапроса);
	КонецЕсли;

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)  КАК ВидДвижения,
	|	&Период                                 КАК Период,
	|	&Грузоотправитель                       КАК ОрганизацияЕГАИС,
	|	ТаблицаТовары.АлкогольнаяПродукция      КАК АлкогольнаяПродукция,
	|	ТаблицаТовары.Справка2                  КАК Справка2,
	|	ВЫБОР КОГДА &ЕстьРасхождения ТОГДА
	|		ТаблицаТовары.КоличествоФакт
	|	ИНАЧЕ
	|		ТаблицаТовары.Количество * ЕСТЬNULL(ЕдиницыЕГАИС.Коэффициент, 1)
	|	КОНЕЦ КАК СвободныйОстаток,
	|	0                                       КАК Количество,
	|	ТаблицаТовары.НомерСтроки               КАК НомерСтроки
	|ИЗ
	|	ВТТовары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКоэффициентыПересчетаВЕдиницыЕГАИС КАК ЕдиницыЕГАИС
	|		ПО ЕдиницыЕГАИС.АлкогольнаяПродукция = ТаблицаТовары.АлкогольнаяПродукция
	|		 И ЕдиницыЕГАИС.Номенклатура = ТаблицаТовары.Номенклатура
	|		 И ЕдиницыЕГАИС.Характеристика = ТаблицаТовары.Характеристика
	|ГДЕ
	|	&УдалитьСтатусОбработки В(&СтатусыДвиженийСвободныйОстаток)
	|	И ВЫБОР КОГДА &ЕстьРасхождения ТОГДА
	|		ТаблицаТовары.КоличествоФакт
	|	ИНАЧЕ
	|		ТаблицаТовары.Количество
	|	КОНЕЦ <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)  КАК ВидДвижения,
	|	&ДатаРегистрацииДвижений                КАК ДатаРегистрацииДвижений,
	|	&Грузоотправитель                       КАК ОрганизацияЕГАИС,
	|	ТаблицаТовары.АлкогольнаяПродукция      КАК АлкогольнаяПродукция,
	|	ТаблицаТовары.Справка2                  КАК Справка2,
	|	0                                       КАК СвободныйОстаток,
	|	ВЫБОР КОГДА &ЕстьРасхождения ТОГДА
	|		ТаблицаТовары.КоличествоФакт
	|	ИНАЧЕ
	|		ТаблицаТовары.Количество * ЕСТЬNULL(ЕдиницыЕГАИС.Коэффициент, 1) 
	|	КОНЕЦ КАК Количество,
	|	ТаблицаТовары.НомерСтроки               КАК НомерСтроки
	|ИЗ
	|	ВТТовары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКоэффициентыПересчетаВЕдиницыЕГАИС КАК ЕдиницыЕГАИС
	|		ПО ЕдиницыЕГАИС.АлкогольнаяПродукция = ТаблицаТовары.АлкогольнаяПродукция
	|		 И ЕдиницыЕГАИС.Номенклатура = ТаблицаТовары.Номенклатура
	|		 И ЕдиницыЕГАИС.Характеристика = ТаблицаТовары.Характеристика
	|ГДЕ
	|	&УдалитьСтатусОбработки В(&СтатусыДвиженийКоличество)
	|	И ВЫБОР КОГДА &ЕстьРасхождения ТОГДА
	|		ТаблицаТовары.КоличествоФакт
	|	ИНАЧЕ
	|		ТаблицаТовары.Количество
	|	КОНЕЦ <> 0
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВТТовары(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВТТовары";
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаТовары.Ссылка               КАК Ссылка,
	|	ТаблицаТовары.НомерСтроки          КАК НомерСтроки,
	|	ТаблицаТовары.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	ТаблицаТовары.Номенклатура         КАК Номенклатура,
	|	ТаблицаТовары.Характеристика       КАК Характеристика,
	|	ТаблицаТовары.Количество           КАК Количество,
	|	ТаблицаТовары.КоличествоФакт       КАК КоличествоФакт,
	|	ТаблицаТовары.Справка2             КАК Справка2
	|ПОМЕСТИТЬ ВТТовары
	|ИЗ
	|	Документ.ТТНИсходящаяЕГАИС.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВТКоэффициентыПересчетаВЕдиницыЕГАИС(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВТКоэффициентыПересчетаВЕдиницыЕГАИС";
	
	ТекстЗапроса = ИнтеграцияЕГАИС.ТекстЗапросаВТКоэффициентыПересчетаВЕдиницыЕГАИС("ВТТовары", ИмяРегистра);
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция СтатусыДвиженийСвободныйОстаток()
	
	Результат = Новый Массив;
	Результат.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.КПередаче);
	Результат.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ПереданВУТМ);
	Результат.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ОбрабатываетсяЕГАИС);
	
	Результат.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.АктОтказаКПередаче);
	Результат.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.АктОтказаПереданВУТМ);
	Результат.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.АктОтказаОбрабатываетсяЕГАИС);
	Результат.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.АктОтказаОшибка);
	
	Результат.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.АктРасхожденийПринят);
	
	Результат.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.АктРасхожденийПодтверждениеКПередаче);
	Результат.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.АктРасхожденийПодтверждениеПереданВУТМ);
	Результат.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.АктРасхожденийПодтверждениеОбрабатываетсяЕГАИС);
	Результат.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.АктРасхожденийПодтверждениеОшибка);
	
	Результат.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.АктРасхожденийОтказКПередаче);
	Результат.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.АктРасхожденийОтказПереданВУТМ);
	Результат.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.АктРасхожденийОтказОбрабатываетсяЕГАИС);
	Результат.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.АктРасхожденийОтказОшибка);
	
	Результат.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ЗапросНаОтменуПроведенияПринят);
	
	Результат.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ЗапросНаОтменуПроведенияПодтверждениеКПередаче);
	Результат.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ЗапросНаОтменуПроведенияПодтверждениеПереданВУТМ);
	Результат.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ЗапросНаОтменуПроведенияПодтверждениеОбрабатываетсяЕГАИС);
	Результат.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ЗапросНаОтменуПроведенияПодтверждениеОшибка);
	
	Результат.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ЗапросНаОтменуПроведенияОтказКПередаче);
	Результат.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ЗапросНаОтменуПроведенияОтказПереданВУТМ);
	Результат.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ЗапросНаОтменуПроведенияОтказОбрабатываетсяЕГАИС);
	Результат.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ЗапросНаОтменуПроведенияОтказОшибка);
	
	Результат.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.Подтвержден);
	Результат.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ПодтвержденСРасхождениями);
	
	Возврат Результат;
	
КонецФункции

Функция СтатусыДвиженийКоличество()
	
	Результат = Новый Массив;
	Результат.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.Подтвержден);
	Результат.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ПодтвержденСРасхождениями);
	
	Результат.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ЗапросНаОтменуПроведенияПринят);
	Результат.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ЗапросНаОтменуПроведенияПодтверждениеКПередаче);
	Результат.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ЗапросНаОтменуПроведенияПодтверждениеПереданВУТМ);
	Результат.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ЗапросНаОтменуПроведенияПодтверждениеОбрабатываетсяЕГАИС);
	Результат.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ЗапросНаОтменуПроведенияПодтверждениеОшибка);
	
	Результат.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ЗапросНаОтменуПроведенияОтказКПередаче);
	Результат.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ЗапросНаОтменуПроведенияОтказПереданВУТМ);
	Результат.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ЗапросНаОтменуПроведенияОтказОбрабатываетсяЕГАИС);
	Результат.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ЗапросНаОтменуПроведенияОтказОшибка);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

Функция АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра) Экспорт
	
	Запрос = Новый Запрос;
	ТекстыЗапроса = Новый СписокЗначений();
	ТекстыЗапросаВременныхТаблиц = Новый Массив;
	ПолноеИмяДокумента = "Документ.ТТНИсходящаяЕГАИС";
	
	Если ИмяРегистра = "ОстаткиАлкогольнойПродукцииЕГАИС" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаОстаткиАлкогольнойПродукцииЕГАИС(Запрос, ТекстыЗапроса, ИмяРегистра);
		ТекстыЗапросаВременныхТаблиц.Добавить(Новый Структура("Ключ, Значение", "ВТКоэффициентыПересчетаВЕдиницыЕГАИС", ТекстЗапросаВТКоэффициентыПересчетаВЕдиницыЕГАИС(Запрос, ТекстыЗапроса)));
		ТекстыЗапросаВременныхТаблиц.Добавить(Новый Структура("Ключ, Значение", "ВТТовары", ТекстЗапросаВТТовары(Запрос, ТекстыЗапроса)));
		СинонимТаблицыДокумента = "ТаблицаТовары";
		
	Иначе
		ТекстИсключения = НСтр("ru = 'В документе %ПолноеИмяДокумента% не реализована адаптация текста запроса формирования движений по регистру %ИмяРегистра%.'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ПолноеИмяДокумента%", ПолноеИмяДокумента);
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ИмяРегистра%", ИмяРегистра);
		
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	ПереопределениеРасчетаПараметров = Новый Структура;
	
	Результат = ОбновлениеИнформационнойБазыЕГАИС.РезультатАдаптацииЗапроса();
	
	Результат.ЗначенияПараметров.Вставить("СтатусыДвиженийСвободныйОстаток", СтатусыДвиженийСвободныйОстаток());
	Результат.ЗначенияПараметров.Вставить("СтатусыДвиженийКоличество",       СтатусыДвиженийКоличество());
	
	Результат.ТекстЗапроса = ОбновлениеИнформационнойБазыЕГАИС.АдаптироватьЗапросМеханизмаПроведения(
		ТекстЗапроса,
		ПолноеИмяДокумента,
		СинонимТаблицыДокумента,
		ПереопределениеРасчетаПараметров,
		ТекстыЗапросаВременныхТаблиц);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Прочее

Функция ФорматОбмена(Шапка)
	
	ФорматОбмена = ИнтеграцияЕГАИСКлиентСервер.ФорматОбмена();
	Если Шапка.ФорматОбменаГрузоотправителя = Перечисления.ФорматыОбменаЕГАИС.V1
		Или Шапка.ФорматОбменаГрузополучателя = Перечисления.ФорматыОбменаЕГАИС.V1 Тогда
		ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V1;
	КонецЕсли;
	
	Возврат ФорматОбмена;
	
КонецФункции

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
	
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти

#КонецОбласти

#КонецЕсли

