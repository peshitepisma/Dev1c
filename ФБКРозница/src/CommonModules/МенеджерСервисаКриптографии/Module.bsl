////////////////////////////////////////////////////////////////////////////////
// Подсистема "Менеджер сервиса криптографии".
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ЗаявлениеНаПодключение

Функция ОтправитьЗаявлениеНаПодключение(Заявление) Экспорт
	
	URL = АдресСервиса() + СтрШаблон("/hs/requests/%1/requests", ВерсияПрограммногоИнтерфейса());
	
	ПараметрыЗапроса = Заявление;
	ПараметрыЗапроса.Вставить("client", ПолучитьОписаниеКлиента());
	
	ПоляОтвета = Новый Структура("req_id", "Идентификатор");
	
	Возврат ВызватьHTTPМетод("POST", URL, ПараметрыЗапроса, ПоляОтвета);

КонецФункции

Функция ПолучитьСтатусЗаявленияНаПодключение(ИдентификаторЗаявления) Экспорт
	
	URL = АдресСервиса() + СтрШаблон("/hs/requests/%1/request/%2",
										ВерсияПрограммногоИнтерфейса(),
										ИдентификаторЗаявления);
										
	ПоляОтвета = Новый Структура("status,details", "Статус", "Пояснение");
	
	Возврат ВызватьHTTPМетод("GET", URL, Неопределено, ПоляОтвета);

КонецФункции

#КонецОбласти

#Область ПроверкаТелефонаИЭлектроннойПочты

Функция ПолучитьКодПроверкиТелефона(Телефон, Идентификатор = "") Экспорт
	
	URL = АдресСервиса() + СтрШаблон("/hs/verification/%1/phone/code", ВерсияПрограммногоИнтерфейса());
	
	ПараметрыЗапроса = Новый Структура("phone,req_id,repeat", Телефон, Идентификатор, ЗначениеЗаполнено(Идентификатор));
	
	ПоляОтвета = Новый Структура("req_id,num,life_time,delay", "Идентификатор", "НомерКода", "ВремяДействияКода", "ЗадержкаПередПовторнойОтправкой");
	
	Возврат ВызватьHTTPМетод("POST", URL, ПараметрыЗапроса, ПоляОтвета);

КонецФункции

Функция ПроверитьТелефонПоКоду(Идентификатор, Код) Экспорт
	
	URL = АдресСервиса() + СтрШаблон("/hs/verification/%1/phone", ВерсияПрограммногоИнтерфейса());
	
	ПараметрыЗапроса = Новый Структура("req_id,code", Идентификатор, Код);
	
	ПоляОтвета = Новый Структура;
	
	Возврат ВызватьHTTPМетод("POST", URL, ПараметрыЗапроса, ПоляОтвета);
	
КонецФункции

Функция ПолучитьКодПроверкиЭлектроннойПочты(ЭлектроннаяПочта, Идентификатор = "") Экспорт
	
	URL = АдресСервиса() + СтрШаблон("/hs/verification/%1/email/code", ВерсияПрограммногоИнтерфейса());
	
	ПараметрыЗапроса = Новый Структура("email,req_id,repeat", ЭлектроннаяПочта, Идентификатор, ЗначениеЗаполнено(Идентификатор));
	
	ПоляОтвета = Новый Структура("req_id,num,life_time,delay", "Идентификатор", "НомерКода", "ВремяДействияКода", "ЗадержкаПередПовторнойОтправкой");
	
	Возврат ВызватьHTTPМетод("POST", URL, ПараметрыЗапроса, ПоляОтвета);
	
КонецФункции

Функция ПроверитьЭлектроннуюПочтуПоКоду(Идентификатор, Код) Экспорт
	
	URL = АдресСервиса() + СтрШаблон("/hs/verification/%1/email", ВерсияПрограммногоИнтерфейса());
	
	ПараметрыЗапроса = Новый Структура("req_id,code", Идентификатор, Код);
	
	ПоляОтвета = Новый Структура;
	
	Возврат ВызватьHTTPМетод("POST", URL, ПараметрыЗапроса, ПоляОтвета);

КонецФункции

#КонецОбласти

#Область ИзменениеНастроекПолученияВременныхПаролейПровайдером

Функция НапечататьЗаявление(ИдентификаторЗаявления, ИдентификаторПроверки, ИдентификаторСертификата) Экспорт
	
	URL = АдресСервиса() + СтрШаблон("/hs/otp/%1/phone/request/%2",
										ВерсияПрограммногоИнтерфейса(),
										ИдентификаторЗаявления);
										
	ПараметрыЗапроса = Новый Структура("client", ПолучитьОписаниеКлиента());
	ПараметрыЗапроса.Вставить("phone", ИдентификаторПроверки);
	ПараметрыЗапроса.Вставить("cert_id", ИдентификаторСертификата);
	
	Результат = ВызватьHTTPМетод("POST", URL, ПараметрыЗапроса, Новый Структура);
	Если Результат.Выполнено Тогда
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("mxl");
		Результат.Файл.Записать(ИмяВременногоФайла);
		
		ТабличныйДокумент = Новый ТабличныйДокумент;
		ТабличныйДокумент.Прочитать(ИмяВременногоФайла);
		
		УдалитьФайлы(ИмяВременногоФайла);
		
		Результат.Файл = ТабличныйДокумент;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОтправитьЗаявление(ИдентификаторЗаявления, ФайлЗаявления) Экспорт
	
	URL = АдресСервиса() + СтрШаблон("/hs/otp/%1/phone/request/%2",
										ВерсияПрограммногоИнтерфейса(),
										ИдентификаторЗаявления);
										
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Disposition", 
		СтрШаблон("attachment; filename=%1", КодироватьСтроку(ФайлЗаявления.Имя, СпособКодированияСтроки.КодировкаURL)));
		
	Результат = ВызватьHTTPМетод("PUT", URL, ПолучитьИзВременногоХранилища(ФайлЗаявления.Адрес), Новый Структура, Заголовки);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ИзменениеНастроекПолученияВременныхПаролейПользователем

Функция НачатьИзменениеНастроекПолученияВременныхПаролей(ИдентификаторСертификата, Телефон, ЭлектроннаяПочта, Идентификатор = "") Экспорт
	
	URL = АдресСервиса() + СтрШаблон("/hs/otp/%1/users_requests", ВерсияПрограммногоИнтерфейса());
	
	ПараметрыЗапроса = Новый Структура("client", ПолучитьОписаниеКлиента());
	Если ЗначениеЗаполнено(Идентификатор) Тогда
		ПараметрыЗапроса.Вставить("req_id", Идентификатор);
	Иначе
		ПараметрыЗапроса.Вставить("cert_id", ИдентификаторСертификата);
		Если Телефон <> Неопределено Тогда
			ПараметрыЗапроса.Вставить("phone", Телефон);
		КонецЕсли;
		Если ЭлектроннаяПочта <> Неопределено Тогда
			ПараметрыЗапроса.Вставить("email", ЭлектроннаяПочта);
		КонецЕсли;
	КонецЕсли;

	ПоляОтвета = Новый Структура("req_id,life_time,delay", "Идентификатор", "ВремяДействияКода", "ЗадержкаПередПовторнойОтправкой");
	
	Возврат ВызватьHTTPМетод("POST", URL, ПараметрыЗапроса, ПоляОтвета);
	
КонецФункции

Функция ЗавершитьИзменениеНастроекПолученияВременныхПаролей(Идентификатор, Код) Экспорт
			
	URL = АдресСервиса() + СтрШаблон("/hs/otp/%1/user_request/%2", ВерсияПрограммногоИнтерфейса(), Идентификатор);
										
	ПараметрыЗапроса = Новый Структура("req_id,code", Идентификатор, Код);
	
	Возврат ВызватьHTTPМетод("PUT", URL, ПараметрыЗапроса, Новый Структура);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьОписаниеКлиента()
	
	ОписаниеКлиента = Новый Структура;
	ОписаниеКлиента.Вставить("version", Метаданные.Версия);
	ОписаниеКлиента.Вставить("name", Метаданные.Имя);
	ОписаниеКлиента.Вставить("id", Формат(ОбщегоНазначения.ЗначениеРазделителяСеанса(), "ЧГ="));
	
	Возврат ОписаниеКлиента;
	
КонецФункции

Функция ПолучитьПараметрыСоединения(URL) Экспорт
	
	ПараметрыСоединения = ОбщегоНазначенияКлиентСервер.СтруктураURI(URL);
	ПараметрыСоединения.Схема = ?(ЗначениеЗаполнено(ПараметрыСоединения.Схема), ПараметрыСоединения.Схема, "http");	
	ПараметрыСоединения.Вставить("Таймаут", 60);
	
	УстановитьПривилегированныйРежим(Истина);
	Владелец = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Константы.АдресСервисаПодключенияЭлектроннойПодписиВМоделиСервиса);
	ПараметрыСоединения.Вставить("Логин", ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Владелец, "Логин", Истина));
	ПараметрыСоединения.Вставить("Пароль", ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Владелец, "Пароль", Истина));
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ПараметрыСоединения;
	
КонецФункции

Функция АдресСервиса()
	
	УстановитьПривилегированныйРежим(Истина);

	Возврат Константы.АдресСервисаПодключенияЭлектроннойПодписиВМоделиСервиса.Получить();
	
КонецФункции

Функция ВерсияПрограммногоИнтерфейса()
	
	Возврат "v1.1";
	
КонецФункции

Функция ВызватьHTTPМетод(HTTPМетод, URL, ПараметрыЗапроса, СоответствиеПолейОтвета, Заголовки = Неопределено)
	
	ПараметрыСоединения = ПолучитьПараметрыСоединения(URL);
	Соединение = ЭлектроннаяПодписьВМоделиСервиса.СоединениеССерверомИнтернета(ПараметрыСоединения);
	
	Запрос = Новый HTTPЗапрос(ПараметрыСоединения.ПутьНаСервере);
	Если ТипЗнч(ПараметрыЗапроса) = Тип("Структура") Тогда
		Запрос.Заголовки.Вставить("Content-Type", "application/javascript");
		Запрос.УстановитьТелоИзСтроки(ЭлектроннаяПодписьВМоделиСервиса.СтруктураВJson(ПараметрыЗапроса));
	ИначеЕсли ТипЗнч(ПараметрыЗапроса) = Тип("ДвоичныеДанные") Тогда
		Запрос.Заголовки.Вставить("Content-Type", "application/octet-stream");
		Запрос.УстановитьТелоИзДвоичныхДанных(ПараметрыЗапроса);
	КонецЕсли;
	Если ЗначениеЗаполнено(Заголовки) Тогда
		Для Каждого Заголовок Из Заголовки Цикл
			Запрос.Заголовки.Вставить(Заголовок.Ключ, Заголовок.Значение);
		КонецЦикла;
	КонецЕсли;
		
	Ответ = Соединение.ВызватьHTTPМетод(HTTPМетод, Запрос);
	
	Результат = Новый Структура;	
	Если Ответ.КодСостояния = 200 Тогда
		Результат.Вставить("Выполнено", Истина);
		
		Если Ответ.Заголовки.Получить("Content-Type") = "application/javascript" Тогда
			ПараметрыОтвета = ЭлектроннаяПодписьВМоделиСервиса.JsonВСтруктуру(Ответ.ПолучитьТелоКакСтроку());
			Для Каждого Поле Из СоответствиеПолейОтвета Цикл
				Если ПараметрыОтвета.Свойство(Поле.Ключ) Тогда
					Результат.Вставить(Поле.Значение, ПараметрыОтвета[Поле.Ключ]);
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли Ответ.Заголовки.Получить("Content-Type") = "application/octet-stream" Тогда
			Результат.Вставить("Файл", Ответ.ПолучитьТелоКакДвоичныеДанные());
			Результат.Вставить("Имя", СтрЗаменить(Ответ.Заголовки.Получить("Content-Disposition"), "attachment; filename=", ""));
		КонецЕсли;
	ИначеЕсли Ответ.КодСостояния = 400 Тогда
		Результат.Вставить("Выполнено", Ложь);
		ПараметрыОтвета = ЭлектроннаяПодписьВМоделиСервиса.JsonВСтруктуру(Ответ.ПолучитьТелоКакСтроку());
		Результат.Вставить("КодОшибки", ПолучитьКодОшибки(ПараметрыОтвета.err_code));
		Результат.Вставить("ОписаниеОшибки", СокрЛП(ПараметрыОтвета.err_msg));
	Иначе
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Электронная подпись в модели сервиса.Менеджер сервиса криптографии'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
			УровеньЖурналаРегистрации.Ошибка,,, Ответ.ПолучитьТелоКакСтроку());
		Результат.Вставить("Выполнено", Ложь);
		Результат.Вставить("КодОшибки", "НеизвестнаяОшибка");
		Результат.Вставить("ОписаниеОшибки", НСтр("ru = 'Сервис временно недоступен. Обратитесь в службу поддержки или повторите попытку позже.'"));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьКодОшибки(err_code)
	
	КодыОшибок = Новый Соответствие;
	КодыОшибок.Вставить("CertificateNotFound", "СертификатНеНайден");
	КодыОшибок.Вставить("RequestNotFound", "ЗаявлениеНеНайдено");
	КодыОшибок.Вставить("NewPhoneIsEqualToTheCurrent", "НовыйТелефонРавенТекущему");
	КодыОшибок.Вставить("NewEmailIsEqualToTheCurrent", "НоваяЭлектроннаяПочтаРавнаТекущей");
	КодыОшибок.Вставить("MaxAttemptsInputCodeExceeded", "ПревышенЛимитПопытокВводаКода");
	КодыОшибок.Вставить("CodeExpired", "СрокДействияКодаИстек");
	КодыОшибок.Вставить("CodeIsWrong", "КодНеверный");
	КодыОшибок.Вставить("TooFrequentCodeRequests", "СлишкомЧастыеПовторныеОтправки");
	
	Возврат КодыОшибок.Получить(err_code);
	
КонецФункции

#КонецОбласти