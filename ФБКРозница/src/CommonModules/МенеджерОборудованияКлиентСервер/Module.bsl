
#Область ПрограммныйИнтерфейс

// Функция заполняет наименование рабочего места клиента по имени пользователя.
//
Процедура ЗаполнитьНаименованиеРабочегоМеста(Объект, ИмяПользователя) Экспорт
	
	ИмяПустойПользователь = НСтр("ru='<Пользователь>'");
	
	Если ПустаяСтрока(Объект.Наименование) Тогда
		
		Если ПустаяСтрока(ИмяПользователя) Тогда
			Объект.Наименование = "<" + ИмяПустойПользователь + ">";
		Иначе
			Объект.Наименование = Строка(ИмяПользователя);
		КонецЕсли;
		
		Если ПустаяСтрока(Объект.ИмяКомпьютера) Тогда
			Объект.Наименование = Объект.Наименование + "(" + Объект.Код           + ")";
		Иначе
			Объект.Наименование = Объект.Наименование + "(" + Объект.ИмяКомпьютера + ")";
		КонецЕсли;
		
	ИначеЕсли Не ПустаяСтрока(Строка(ИмяПользователя))
	          И Найти(Объект.Наименование, ИмяПустойПользователь) > 0 Тогда
	
		Объект.Наименование = СтрЗаменить(Объект.Наименование, ИмяПустойПользователь, Строка(ИмяПользователя));
	
	КонецЕсли;

КонецПроцедуры

// Функция возвращает пустую структуру прайс-листа для заполнения XDTO-пакета EquipmentService.
// 
// Возвращаемое значение:
//   - Подготовленная структура для прайс-листа.
//
Функция ПолучитьСтруктуруПрайсЛиста() Экспорт
	
	СтруктураПрайсЛиста = Новый Структура; 
	СтруктураПрайсЛиста.Вставить("ПолнаяЗагрузка", Ложь);
	СтруктураПрайсЛиста.Вставить("Товары",        Новый Массив);
	СтруктураПрайсЛиста.Вставить("ГруппыТоваров", Новый Массив);
	СтруктураПрайсЛиста.Вставить("ДопСведения",   Новый Массив);
	СтруктураПрайсЛиста.Вставить("НомерПакета",   1);
	СтруктураПрайсЛиста.Вставить("ПакетовВсего",  1);
	СтруктураПрайсЛиста.Вставить("ВерсияФормата", 0);
	
	Возврат СтруктураПрайсЛиста;
	
КонецФункции

// Функция возвращает пустую структуру записи массива "Товары" прайс-листа
// для заполнения XDTO-пакета EquipmentService.
//
Функция ПолучитьСтруктуруЗаписиМассиваТовары() Экспорт
	
	СтруктураЗаписиМассиваТовары = Новый Структура;
	
	СтруктураЗаписиМассиваТовары.Вставить("Код");
	СтруктураЗаписиМассиваТовары.Вставить("КодГруппы", "");
	СтруктураЗаписиМассиваТовары.Вставить("Наименование");
	СтруктураЗаписиМассиваТовары.Вставить("ИмеетХарактеристики", Ложь);
	СтруктураЗаписиМассиваТовары.Вставить("ИмеетУпаковки", Ложь);
	СтруктураЗаписиМассиваТовары.Вставить("Артикул");
	СтруктураЗаписиМассиваТовары.Вставить("ЕдиницаИзмерения");
	СтруктураЗаписиМассиваТовары.Вставить("СтавкаНДС", "");
	СтруктураЗаписиМассиваТовары.Вставить("Весовой", Ложь);
	СтруктураЗаписиМассиваТовары.Вставить("Штрихкод");
	СтруктураЗаписиМассиваТовары.Вставить("Остаток");
	СтруктураЗаписиМассиваТовары.Вставить("Услуга", Ложь);
	СтруктураЗаписиМассиваТовары.Вставить("Цена");
	СтруктураЗаписиМассиваТовары.Вставить("Упаковки", Новый Массив());
	СтруктураЗаписиМассиваТовары.Вставить("Характеристики", Новый Массив());
	СтруктураЗаписиМассиваТовары.Вставить("КодНалога");
	СтруктураЗаписиМассиваТовары.Вставить("Алкоголь");
	СтруктураЗаписиМассиваТовары.Вставить("Маркируемый");
	СтруктураЗаписиМассиваТовары.Вставить("КодВидаАлкогольнойПродукции");
	СтруктураЗаписиМассиваТовары.Вставить("ЕмкостьТары");
	СтруктураЗаписиМассиваТовары.Вставить("Крепость");
	СтруктураЗаписиМассиваТовары.Вставить("ИННПроизводителя");
	СтруктураЗаписиМассиваТовары.Вставить("КПППроизводителя");
	СтруктураЗаписиМассиваТовары.Вставить("УникальныйИдентификатор");
	
	Возврат СтруктураЗаписиМассиваТовары;
	
КонецФункции

// Функция возвращает пустую структуру массива товары
// для заполнения XDTO-пакета EquipmentService.
//
Функция ПолучитьСтруктуруМассиваТовары() Экспорт
	
	СтруктураПрайсЛиста = Новый Структура;
	СтруктураПрайсЛиста.Вставить("Товары",        Новый Массив);
	
	Возврат СтруктураПрайсЛиста;
	
КонецФункции

// Функция определяет тип штрихкода по значение кода.
// 
Функция ОпределитьТипШтрихкода(Штрихкод) Экспорт
	
	ТипШтрихкода = "";	
	ДлинаШтрихкода = СтрДлина(Штрихкод);
	
	Если ДлинаШтрихкода = 0 Тогда
		Возврат ТипШтрихкода;
	КонецЕсли;
	
	Сумма = 0;
	
	Если ДлинаШтрихкода = 14 Тогда // ITF14
		
		Коэффициент = 1; 
		Для Сч = 1 По 13 Цикл
			ВремКодСимвола = КодСимвола(Штрихкод, Сч);
			Если ВремКодСимвола < 48 Или ВремКодСимвола > 57 Тогда
				Прервать;
			КонецЕсли;
			Сумма       = Сумма + Коэффициент * (ВремКодСимвола - 48);
			Коэффициент = 4 - Коэффициент;
		КонецЦикла;
		Сумма = (10 - Сумма % 10) % 10;
		Если КодСимвола(Штрихкод, 14) = Сумма + 48 Тогда
			ТипШтрихкода = "ITF14";
 		КонецЕсли;
		
	ИначеЕсли ДлинаШтрихкода = 13 Тогда // EAN13
		
		EAN13 = Истина;
		Коэффициент = 1;
		Для Сч = 1 По 12 Цикл
			ВремКодСимвола = КодСимвола(Штрихкод, Сч);
			Если ВремКодСимвола < 48 Или ВремКодСимвола > 57 Тогда
				EAN13 = Ложь;
				Прервать;
			КонецЕсли;
			Сумма  = Сумма + Коэффициент * (ВремКодСимвола - 48);
			Коэффициент = 4 - Коэффициент;
		КонецЦикла;
		Сумма = (10 - Сумма % 10) % 10;
		ПроверочныйСимвол = Символ(Сумма + 48);
		Если EAN13 И ПроверочныйСимвол = Прав(Штрихкод, 1) Тогда
			ТипШтрихкода = "EAN13";
		КонецЕсли;
		
	ИначеЕсли ДлинаШтрихкода = 8 Тогда // EAN8
		
		EAN8 = Истина;
		Коэффициент = 3;
		Для Сч = 1 По 7 Цикл
			ВремКодСимвола = КодСимвола(Штрихкод, Сч);
			Если ВремКодСимвола < 48 Или ВремКодСимвола > 57 Тогда
				EAN8 = Ложь;
				Прервать;
			КонецЕсли;
			Сумма       = Сумма + Коэффициент * (ВремКодСимвола - 48);
			Коэффициент = 4 - Коэффициент;
		КонецЦикла;
		Сумма = (10 - Сумма % 10) % 10;
		Если EAN8 И (КодСимвола(Штрихкод, 8) = Сумма + 48) Тогда
			ТипШтрихкода = "EAN8";
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТипШтрихкода= "" Тогда // CODE39
		
		CODE39 = Истина;
		Для Сч = 1 По ДлинаШтрихкода Цикл
			ВремКодСимвола = КодСимвола(Штрихкод, Сч);
			Если (ВремКодСимвола <> 32)
				И (ВремКодСимвола < 36 Или ВремКодСимвола > 37)
				И (ВремКодСимвола <> 43)
				И (ВремКодСимвола < 45 Или ВремКодСимвола > 57)
				И (ВремКодСимвола < 65 Или ВремКодСимвола > 90) Тогда
				CODE39 = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если CODE39 Тогда
			ТипШтрихкода = "CODE39";
		КонецЕсли                                                     
		
	КонецЕсли;
	
	Если ТипШтрихкода= ""  Тогда // CODE128
		// CODE128 символы ASCII от 0 до 127 (цифры от «0» до «9», буквы от «A» до «Z» и от «a» до «z») и специальные символы;
		CODE128 = Истина;
		Для Сч = 1 По ДлинаШтрихкода Цикл
			ВремКодСимвола = КодСимвола(Штрихкод, Сч);
			Если (ВремКодСимвола > 127) Тогда
				CODE128 = Ложь;
			Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если CODE128 Тогда
			ТипШтрихкода = "CODE128";
		КонецЕсли                                                     
		
	КонецЕсли;
	
	Если ТипШтрихкода= "CODE128"  Тогда // EAN128
		// В коде EAN128 регламентирован словарь CODE128 но регламентированы группы кодов.
		Если КодСимвола(Штрихкод, 1) = 40 Тогда
			ТипШтрихкода = "EAN128";
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТипШтрихкода;
	
КонецФункции

// Функция возвращает пустую структуру записи EPC.
// 
// Возвращаемое значение:
//  - Структура
//       Результат       - Результат декодирования (успешно или нет)
//       EPC             - Значение EPC в виде HEX строки
//       EPC_BIN         - Значение EPC в виде бинарной строки
//       Формат          - Распознанный формат данных SGTIN-96 или SGTIN-198  
//       GTIN            - GTIN 
//       СерийныйНомер   - Серийный номер SGTIN 
//       ПрефиксКомпании - Префикс компании
//       URI             - EPC Tag URI
//       
Функция ПолучитьСтруктуруЗаписиEPC() Экспорт
	
	СтруктураЗаписиEPC = Новый Структура;
	
	СтруктураЗаписиEPC.Вставить("Результат", Ложь); // Результат декодирования (успешно или нет)
	СтруктураЗаписиEPC.Вставить("EPC");              // Значение EPC в виде HEX строки
	СтруктураЗаписиEPC.Вставить("EPC_BIN");          // Значение EPC в виде бинарной строки
	СтруктураЗаписиEPC.Вставить("Формат");           // Распознанный формат данных SGTIN-96 или SGTIN-198  
	СтруктураЗаписиEPC.Вставить("GTIN");             // GTIN 
	СтруктураЗаписиEPC.Вставить("СерийныйНомер");    // Серийный номер SGTIN 
	СтруктураЗаписиEPC.Вставить("ПрефиксКомпании");  // Префикс компании
	СтруктураЗаписиEPC.Вставить("URI");              // EPC Tag URI
	
	Возврат СтруктураЗаписиEPC;
	
КонецФункции

// Функция возвращает массив из пакетов данных.
//
Функция РазбитьПрайсЛистПоПакетам(СтруктураПрайсЛиста, КоличествоЭлементовВПакете) Экспорт
	
	МассивПакетов = Новый Массив;
	
	КоличествоЭлементов = СтруктураПрайсЛиста.ГруппыТоваров.Количество() + СтруктураПрайсЛиста.Товары.Количество() + СтруктураПрайсЛиста.ДопСведения.Количество();
	КоличествоПакетов   = ОпределитьКоличествоПакетов(КоличествоЭлементовВПакете, КоличествоЭлементов);
	
	Если КоличествоЭлементовВПакете = 0 Тогда
		КоличествоЭлементовВПакете = КоличествоЭлементов;
	КонецЕсли;
	
	Для НомерПакета = 1 По КоличествоПакетов Цикл
		
		СтруктураПакета = ПолучитьСтруктуруПрайсЛиста();
		СтруктураПакета.ПолнаяЗагрузка = СтруктураПрайсЛиста.ПолнаяЗагрузка;
		
		СтруктураПакета.НомерПакета = НомерПакета;
		СтруктураПакета.ПакетовВсего = КоличествоПакетов;
		
		Для НомерЭлемента = 1 По КоличествоЭлементовВПакете Цикл
			
			// Группы
			Если НЕ СтруктураПрайсЛиста.ГруппыТоваров.Количество() = 0 Тогда
				
				СтруктураПакета.ГруппыТоваров.Добавить(СтруктураПрайсЛиста.ГруппыТоваров[0]);
				СтруктураПрайсЛиста.ГруппыТоваров.Удалить(0);
				Продолжить;
			КонецЕсли;
			
			// Товары
			Если НЕ СтруктураПрайсЛиста.Товары.Количество() = 0 Тогда
				
				СтруктураПакета.Товары.Добавить(СтруктураПрайсЛиста.Товары[0]);
				СтруктураПрайсЛиста.Товары.Удалить(0);
				Продолжить;
			КонецЕсли;
			
			// ДопСведения
			Если НЕ СтруктураПрайсЛиста.ДопСведения.Количество() = 0 Тогда
				
				СтруктураПакета.ДопСведения.Добавить(СтруктураПрайсЛиста.ДопСведения[0]);
				СтруктураПрайсЛиста.ДопСведения.Удалить(0);
				Продолжить;
			КонецЕсли;
			
		КонецЦикла;
		
		МассивПакетов.Добавить(СтруктураПакета);
		
	КонецЦикла;
	
	Возврат МассивПакетов;
	
КонецФункции

// Расчет контрольной цифры для GTIN-8. 
//
// Параметры:
//  GTIN - Текстовая строка с GTIN-8. Может содержать числа от 0 до 9. 
// 
// Возвращаемое значение:
//   - Контрольный символ (число) рассчитанный по алгоритму для GTIN.
//
Функция РассчитатьКонтрольныйСимволGTIN8(Знач GTIN) Экспорт
	
	Сумма = 0;
	Коэффициент = 3;
	
	Для Сч = 1 По 7 Цикл
		ВремКодСимвола = КодСимвола(GTIN, Сч);
		Сумма  = Сумма + Коэффициент * (ВремКодСимвола - 48);
		Коэффициент = 4 - Коэффициент;
	КонецЦикла;
	Сумма = (10 - Сумма % 10) % 10;
	КонтрольныйСимвол = Символ(Сумма + 48);
	
	Возврат КонтрольныйСимвол;
	
КонецФункции

// Расчет контрольной цифры для GTIN-12. 
//
// Параметры:
//  GTIN - Текстовая строка с GTIN-12. Может содержать числа от 0 до 9. 
// 
// Возвращаемое значение:
//   - Контрольный символ (число) рассчитанный по алгоритму для GTIN.
//
Функция РассчитатьКонтрольныйСимволGTIN12(Знач GTIN) Экспорт
	
	Сумма = 0;
	Коэффициент = 3;
	
	Для Сч = 1 По 11 Цикл
		ВремКодСимвола = КодСимвола(GTIN, Сч);
		Сумма  = Сумма + Коэффициент * (ВремКодСимвола - 48);
		Коэффициент = 4 - Коэффициент;
	КонецЦикла;
	Сумма = (10 - Сумма % 10) % 10;
	КонтрольныйСимвол = Символ(Сумма + 48);
	
	Возврат КонтрольныйСимвол;
	
КонецФункции

// Расчет контрольной цифры для GTIN-13. 
//
// Параметры:
//  GTIN - Текстовая строка с GTIN-13. Может содержать числа от 0 до 9.
// 
// Возвращаемое значение:
//   - Контрольный символ (число) рассчитанный по алгоритму для GTIN.
//
Функция РассчитатьКонтрольныйСимволGTIN13(Знач GTIN) Экспорт
	
	Сумма = 0;
	Коэффициент = 1;
	
	Для Сч = 1 По 12 Цикл
		ВремКодСимвола = КодСимвола(GTIN, Сч);
		Сумма  = Сумма + Коэффициент * (ВремКодСимвола - 48);
		Коэффициент = 4 - Коэффициент;
	КонецЦикла;
	Сумма = (10 - Сумма % 10) % 10;
	КонтрольныйСимвол = Символ(Сумма + 48);
	
	Возврат КонтрольныйСимвол;
	
КонецФункции

// Расчет контрольной цифры для GTIN-14. 
//
// Параметры:
//  GTIN - Текстовая строка с GTIN-14. Может содержать числа от 0 до 9. 
// 
// Возвращаемое значение:
//   - Контрольный символ (число) рассчитанный по алгоритму для GTIN.
//
Функция РассчитатьКонтрольныйСимволGTIN14(Знач GTIN) Экспорт
	
	Сумма = 0;
	Коэффициент = 3;
	
	Для Сч = 1 По 13 Цикл
		ВремКодСимвола = КодСимвола(GTIN, Сч);
		Сумма  = Сумма + Коэффициент * (ВремКодСимвола - 48);
		Коэффициент = 4 - Коэффициент;
	КонецЦикла;
	Сумма = (10 - Сумма % 10) % 10;
	КонтрольныйСимвол = Символ(Сумма + 48);
	
	Возврат КонтрольныйСимвол;
	
КонецФункции

// Универсальная функция расчета контрольной цифры GTIN.
// GTIN допускает в формате GTIN-8, GTIN-12, GTIN-13, GTIN-14 c контрольным символом.
//
// Параметры:
//  GTIN - Текстовая строка с GTIN(c контрольным символом). Может содержать числа от 0 до 9.
// 
// Возвращаемое значение:
//   - Контрольный символ (число) рассчитанный по алгоритму для GTIN.
//
Функция РассчитатьКонтрольныйСимволGTIN(Знач GTIN) Экспорт
	
	Сумма = 0;
	ДлиннаGTIN = СтрДлина(GTIN);
	Коэффициент = ?(ДлиннаGTIN % 2 = 0, 3, 1); 
	
	Для Сч = 1 По ДлиннаGTIN - 1 Цикл
		ВремКодСимвола = КодСимвола(GTIN, Сч);
		Сумма  = Сумма + Коэффициент * (ВремКодСимвола - 48);
		Коэффициент = 4 - Коэффициент;
	КонецЦикла;
	Сумма = (10 - Сумма % 10) % 10;
	КонтрольныйСимвол = Символ(Сумма + 48);
	
	Возврат КонтрольныйСимвол;
	
КонецФункции

// Функция проверяет корректность GTIN.
// GTIN допускает в формате GTIN-8, GTIN-12, GTIN-13, GTIN-14 c контрольным символом.
//
// Параметры:
//  GTIN - Текстовая строка с GTIN(c контрольным символом). Может содержать числа от 0 до 9.
// 
// Возвращаемое значение:
//   - Булево  
//
Функция ПроверитьКорректностьGTIN(Знач GTIN) Экспорт
	
	Результат = (СтрДлина(GTIN) = 8) Или (СтрДлина(GTIN) = 12) Или (СтрДлина(GTIN) = 13) Или (СтрДлина(GTIN) = 14);
	Возврат Результат И РассчитатьКонтрольныйСимволGTIN(GTIN) = Прав(GTIN, 1);
	
КонецФункции

// Декодирование данных по значение EPC(HEX строка). Поддерживается формат SGTIN-96 и SGTIN-198.
//
// Параметры:
//   EPC - Строка содержащая значение банка EPC в HEX виде.
// 
// Возвращаемое значение:
//  - Структура
//       Результат       - Результат декодирования (успешно или нет)
//       EPC             - Значение EPC в виде HEX строки
//       EPC_BIN         - Значение EPC в виде бинарной строки
//       Формат          - Распознанный формат данных SGTIN-96 или SGTIN-198  
//       GTIN            - GTIN 
//       СерийныйНомер   - Серийный номер SGTIN 
//       ПрефиксКомпании - Префикс компании
//       URI             - EPC Tag URI
//       
Функция ДекодированиеДанныхSGTIN(EPC) Экспорт
	
	// Преобразовываем HEX строку значение банка EPC в бинарную строку.
	БитовыйМассив = ПреобразоватьHEXВБинарнуюСтроку(EPC);
	
	// Подготавливаем структура результата.
	СтруктураРезультата = ПолучитьСтруктуруЗаписиEPC();
	СтруктураРезультата.EPC = EPC;
	СтруктураРезультата.EPC_BIN = БитовыйМассив; 
	
	// Получаем заголовок метки.
	Заголовок = Сред(БитовыйМассив, 1, 8);
	
	Если Заголовок = "00110000" Тогда // Распознан заголовок SGTIN-96.
		
		Формат = "sgtin-96";
		// Для SGTIN-96 длинная серийного номера 38 bit.
		СерийныйНомер = Сред(БитовыйМассив, 59); 
		// Серийный номер состоит из десятичных цифр. Максимальное значение 274,877,906,943
		СерийныйНомер = ДобавитьЛидирующиеНули(Формат(ПреобразоватьБинарнуюСтрокуВЧисло(СерийныйНомер), "ЧГ=0"), 12); 
		
	ИначеЕсли Заголовок = "00110110" Тогда // Распознан заголовок SGTIN-198.
		
		Формат = "sgtin-198";
		// Для SGTIN-198 длинная серийного номера 140 bit.
		СерийныйНомерВрем = Сред(БитовыйМассив, 59); 
		// Серийный номер состоит из 7 битных символов. Максимально 20 символов.
		СерийныйНомер = "";
		Пока СтрДлина(СерийныйНомерВрем) > 0 Цикл
			ТекСимвол  = Лев(СерийныйНомерВрем, 7);
			КодСимвола = ПреобразоватьБинарнуюСтрокуВЧисло(ТекСимвол);
			Если КодСимвола > 31 Тогда
				СерийныйНомер = СерийныйНомер + Символ(КодСимвола);
			КонецЕсли;
			СерийныйНомерВрем = Сред(СерийныйНомерВрем, 8);
		КонецЦикла;
		
	Иначе
		Возврат СтруктураРезультата; // Не распознан формат данных EPC.
	КонецЕсли;
	
	СтруктураРезультата.СерийныйНомер = СерийныйНомер;
	СтруктураРезультата.Формат        = Формат;
	
	Фильтр      = ПреобразоватьБинарнуюСтрокуВЧисло(Сред(БитовыйМассив, 9, 3));
	Разделитель = ПреобразоватьБинарнуюСтрокуВЧисло(Сред(БитовыйМассив, 12, 3));
	
	// Определяем разделить префикса компании.
	Если Разделитель = 1 Тогда
		РазрядовКомпании = 37;
		РазрядовЗнаков   = 11;
	ИначеЕсли Разделитель = 2 Тогда
		РазрядовКомпании = 34;
		РазрядовЗнаков   = 10;
	ИначеЕсли Разделитель = 3 Тогда
		РазрядовКомпании = 30;
		РазрядовЗнаков   = 9;
	ИначеЕсли Разделитель = 4 Тогда
		РазрядовКомпании = 27;
		РазрядовЗнаков   = 8;
	ИначеЕсли Разделитель = 5 Тогда
		РазрядовКомпании = 24;
		РазрядовЗнаков   = 7;
	ИначеЕсли Разделитель = 6 Тогда
		РазрядовКомпании = 20;
		РазрядовЗнаков   = 6;
	Иначе
		РазрядовКомпании = 40;
		РазрядовЗнаков   = 12;
	КонецЕсли;
	
	ПрефиксКомпании = Сред(БитовыйМассив, 15, РазрядовКомпании);
	ГруппаТовара    = Сред(БитовыйМассив, 15 + РазрядовКомпании, 44 - РазрядовКомпании);
	
	ПрефиксКомпании = ДобавитьЛидирующиеНули(Формат(ПреобразоватьБинарнуюСтрокуВЧисло(ПрефиксКомпании), "ЧГ=0"), РазрядовЗнаков); 
	ГруппаТовара    = ДобавитьЛидирующиеНули(Формат(ПреобразоватьБинарнуюСтрокуВЧисло(ГруппаТовара), "ЧГ=0"), 13 - РазрядовЗнаков);
	
	URI = "urn:epc:tag:" + Формат + ":" + Фильтр + "." + ПрефиксКомпании + "." + ГруппаТовара + "." + СерийныйНомер; 
	
	GTIN = Лев(ГруппаТовара, 1) + ПрефиксКомпании + Прав(ГруппаТовара, СтрДлина(ГруппаТовара) - 1);;
	
	Если СтрДлина(GTIN) = 13 Тогда
		GTIN = GTIN + РассчитатьКонтрольныйСимволGTIN14(GTIN) 
	КонецЕсли;
	
	СтруктураРезультата.ПрефиксКомпании = ПрефиксКомпании; 
	СтруктураРезультата.GTIN = GTIN;
	СтруктураРезультата.URI  = URI;
	СтруктураРезультата.Результат = Истина;
	
	Возврат СтруктураРезультата;        
	
КонецФункции

// Функция определяет, содержит ли EPC значащую информацию (GTIN или СерийныйНомер) по формату SGTIN.
//
// Параметры:
//  EPC - Строка содержащая значение банка EPC в HEX виде.
// 
// Возвращаемое значение:
//   - Булево  
//
Функция ПустойEPC(EPC) Экспорт
	
	БитовыйМассив = ПреобразоватьHEXВБинарнуюСтроку(EPC);
	СерийныйНомер = Прав(БитовыйМассив, 38);
	GTIN = Сред(БитовыйМассив, 15, 44);
	
	СерийныйНомер = ПреобразоватьБинарнуюСтрокуВЧисло(СерийныйНомер);
	GTIN = ПреобразоватьБинарнуюСтрокуВЧисло(GTIN);
	
	Заполнен = (СерийныйНомер > 0) Или (GTIN > 0);                                  
	Возврат Не Заполнен; 
	
КонецФункции

// Сформировать значение EPC в формате SGTIN-96 для GTIN и серийного номера.
//  GTIN допускает в формате GTIN-8, GTIN-12, GTIN-13, GTIN-14.
//
// Параметры:
//  GTIN          - GTIN товарной номенклатуры. Текстовая строка с GTIN(c контрольным символом).
//  СерийныйНомер - Серийный номер номенклатуры.
//  Фильтр        - 
// 
// Возвращаемое значение:
//   - Строка HEX с сформированным EPC для записи на метку RFID.
//
Функция СформироватьДанныеSGTIN96(Знач GTIN, Знач СерийныйНомер, Знач Фильтр = 3) Экспорт
	
	ВремGTIN = ДобавитьЛидирующиеНули(GTIN, 14);
	ВремGTIN = Лев(ВремGTIN, 13); // Отбрасываем контрольный символ.
	
	Если СтрДлина(GTIN) > 13 И Лев(GTIN, 1) <> "0" Тогда
		ЗнаковКомпании = 9;
		Индикатор = Лев(ВремGTIN, 1);
		Компания = Сред(ВремGTIN, 2, ЗнаковКомпании);
		ГруппаТоваров = Индикатор + Прав(ВремGTIN, 3);
	Иначе
		ЗнаковКомпании = 7;
		Компания = Лев(ВремGTIN, ЗнаковКомпании + 1);
		ГруппаТоваров = Сред(ВремGTIN, ЗнаковКомпании + 2);
	КонецЕсли;
	
	Если ЗнаковКомпании = 7 Тогда
		РазрядовКомпании = 24;
		Разделитель      = 5;
	ИначеЕсли ЗнаковКомпании = 9 Тогда
		РазрядовКомпании = 30;
		Разделитель = 3;
	Иначе
		Разделитель      = 3;
		РазрядовКомпании = 30;
	КонецЕсли;
	
	СерийныйНомер = ?(ПустаяСтрока(СерийныйНомер), "0", СерийныйНомер);
	EPC = "00110000";  // Определяем заголовок SGTIN-96.
	EPC = EPC + ДобавитьЛидирующиеНули(ПреобразоватьЧислоВБинарнуюСтроку(Фильтр), 3);      // Фильтр.
	EPC = EPC + ДобавитьЛидирующиеНули(ПреобразоватьЧислоВБинарнуюСтроку(Разделитель), 3); // Разделитель
	EPC = EPC + ДобавитьЛидирующиеНули(ПреобразоватьЧислоВБинарнуюСтроку(Число(Компания)), РазрядовКомпании);
	EPC = EPC + ДобавитьЛидирующиеНули(ПреобразоватьЧислоВБинарнуюСтроку(Число(ГруппаТоваров)), 44 - РазрядовКомпании);
	EPC = EPC + ДобавитьЛидирующиеНули(ПреобразоватьЧислоВБинарнуюСтроку(Число(СерийныйНомер)), 38);
	
	Результат = ПреобразоватьБинарнуюСтрокуВHEX(EPC);
	Возврат Результат;

КонецФункции

// Сформировать серийный номер по правилам производителей чипов.
//
Функция ПолучитьСерийныйНомерПоTID(Знач TID, Знач EPC = Неопределено) Экспорт
	
	ОписаниеОшибки = НСтр("ru='Ошибка генерации серийного номера по TID.'");
	РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки, СерийныйНомер", Ложь, ОписаниеОшибки);
	
	ПризнакG2 = Лев(TID, 2);
	Если ПризнакG2 <> "E2" Тогда // Фиксированное значение "E2" признак того что тип соответствует EPC Class1Gen2. 
		РезультатВыполнения.ОписаниеОшибки = НСтр("ru='Указанный TID не соответствует типу EPC Class1Gen2.'");
		Возврат РезультатВыполнения;
	КонецЕсли;
	
	// Преобразовываем HEX строку значение банка TID в бинарную строку.
	БитовыйМассив = ПреобразоватьHEXВБинарнуюСтроку(TID);
	// Получаем префикс производителя.
	Производитель = Сред(TID, 3, 3);
	
	Если Производитель = "001" Или Производитель = "801" Тогда // Чипы Impinj
		
		СерияЧипа = Сред(БитовыйМассив, 84, 2); // Серия чипа 00
		Если СерияЧипа = "00" Тогда
			СерийныйНомер = "000" 
						+ Сред(БитовыйМассив, 86, 8)
						+ Сред(БитовыйМассив, 66, 15)
						+ Сред(БитовыйМассив, 94, 3)
						+ Сред(БитовыйМассив, 65, 1)
						+ Сред(БитовыйМассив, 55, 4)
						+ Сред(БитовыйМассив, 61, 4);
		Иначе // Серия чипа 01,10,11
			СерийныйНомер = Сред(БитовыйМассив, 86, 11) 
						+ Сред(БитовыйМассив, 65, 16)
						+ Сред(БитовыйМассив, 52, 2)
						+ Сред(БитовыйМассив, 57, 1)
						+ Сред(БитовыйМассив, 55, 4)
						+ Сред(БитовыйМассив, 61, 4);
					КонецЕсли;
					
	ИначеЕсли Производитель = "006" Или Производитель = "806" Тогда // Чипы NXP Semiconductors 
		
		СерияЧипа = Сред(БитовыйМассив, 21, 11); // Серия чипа 
		СерияЧипа = ПреобразоватьБинарнуюСтрокуВHEX(СерияЧипа);
		Если СерияЧипа = "806" Или СерияЧипа = "807" Тогда // G2iL или G2iL+
			СерийныйНомер = "111"
				+ Сред(БитовыйМассив, 24, 3) 
				+ Сред(БитовыйМассив, 33, 32);
		Иначе
			СерийныйНомер = Сред(БитовыйМассив, 59, 38);
		КонецЕсли;
		
	ИначеЕсли Производитель = "003" Или Производитель = "803" Тогда // Чипы Alien Technology  
		
		// Words 2, 3, 4 and 5
		СерийныйНомер = Сред(БитовыйМассив, 59, 38);
		
	Иначе
		
		РезультатВыполнения.ОписаниеОшибки = НСтр("ru='Генерация серийного номера для чипа производителя указанного в TID не поддерживается.'");
		Возврат РезультатВыполнения;
		
	КонецЕсли;
	
	РезультатВыполнения.Результат = Истина;
	РезультатВыполнения.СерийныйНомер = ПреобразоватьБинарнуюСтрокуВЧисло(СерийныйНомер);
		
	Возврат РезультатВыполнения;
	
КонецФункции

// Преобразовывает HEX строку в строку символов.
//
// Параметры:
//  СтрокаHEX - Строка HEX содержащая символы.  
// 
// Возвращаемое значение:
//   - Тестовая строка
//
Функция ПреобразоватьHEXВСтроку(Знач СтрокаHEX) Экспорт
	
	Результат = "";
	ВремСтрока = СтрокаHEX;
	КодСимвола = 0;
	
	Пока СтрДлина(ВремСтрока) > 0 Цикл
		ТекСимвол  = Лев(ВремСтрока, 2);
		ТекСимвол  = ПреобразоватьHEXВБинарнуюСтроку(ТекСимвол);
		КодСимвола = ПреобразоватьБинарнуюСтрокуВЧисло(ТекСимвол);
		Если КодСимвола > 31 Тогда
			Результат = Результат + Символ(КодСимвола);
		КонецЕсли;
		ВремСтрока = Сред(ВремСтрока, 3);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Преобразовывает строку символов в HEX строку.
//
// Параметры:
//   Строка - Тестовая строка
// 
// Возвращаемое значение:
//   - СтрокаHEX - Строка HEX содержащая символы.  
//
Функция ПреобразоватьСтрокуВHEX(Знач Строка) Экспорт
	
	Результат = "";
	ИндексСимвола = 1;
	
	Пока ИндексСимвола <= СтрДлина(Строка) Цикл
		ТекКод = КодСимвола(Строка, ИндексСимвола);
		ТекСимвол = ДобавитьЛидирующиеНули(ПреобразоватьЧислоВБинарнуюСтроку(ТекКод), 8);
		Результат = Результат + ПреобразоватьБинарнуюСтрокуВHEX(ТекСимвол);
		ИндексСимвола = ИндексСимвола + 1;
	КонецЦикла;
	
	Результат = ДобавитьЛидирующиеНули(Результат, 8);
	Возврат Результат;
	
КонецФункции

// Функция - Преобразовать HEX в бинарную строку
//
// Параметры:
//  СтрокаHEX - Строка HEX содержащая символы.  
// 
// Возвращаемое значение:
//   - Текстовая строка в бинарном представлении (Пример "000010101"). 
//
Функция ПреобразоватьHEXВБинарнуюСтроку(Знач СтрокаHEX) Экспорт
	
	Результат = "";
	
	Для ИндексСимвола = 1 По СтрДлина(СтрокаHEX) Цикл 
		ТекСимвол = Сред(СтрокаHEX, ИндексСимвола, 1);
		Если ТекСимвол = "0" Тогда 
			Результат = Результат + "0000"
		ИначеЕсли ТекСимвол = "1" Тогда 
			Результат = Результат + "0001"
		ИначеЕсли ТекСимвол = "2" Тогда 
			Результат = Результат + "0010"
		ИначеЕсли ТекСимвол = "3" Тогда 
			Результат = Результат + "0011"
		ИначеЕсли ТекСимвол = "4" Тогда 
			Результат = Результат + "0100"
		ИначеЕсли ТекСимвол = "5" Тогда 
			Результат = Результат + "0101"
		ИначеЕсли ТекСимвол = "6" Тогда 
			Результат = Результат + "0110"
		ИначеЕсли ТекСимвол = "7" Тогда 
			Результат = Результат + "0111"
		ИначеЕсли ТекСимвол = "8" Тогда 
			Результат = Результат + "1000"
		ИначеЕсли ТекСимвол = "9" Тогда 
			Результат = Результат + "1001"
		ИначеЕсли ТекСимвол = "A" Тогда 
			Результат = Результат + "1010"
		ИначеЕсли ТекСимвол = "B" Тогда 
			Результат = Результат + "1011"
		ИначеЕсли ТекСимвол = "C" Тогда 
			Результат = Результат + "1100"
		ИначеЕсли ТекСимвол = "D" Тогда 
			Результат = Результат + "1101"
		ИначеЕсли ТекСимвол = "E" Тогда 
			Результат = Результат + "1110"
		ИначеЕсли ТекСимвол = "F" Тогда 
			Результат = Результат + "1111"
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Функция - Преобразовать бинарную строку ВHEX
//
// Параметры:
//  БинарнаяСтрока- Текстовая строка в бинарном представлении (Пример "000010101").
// 
// Возвращаемое значение:
//   - Строка HEX содержащая символы.  
//
Функция ПреобразоватьБинарнуюСтрокуВHEX(Знач БинарнаяСтрока) Экспорт
	
	Результат = "";
	ВремСтрока = БинарнаяСтрока;
	
	Пока СтрДлина(ВремСтрока) > 0 Цикл
		ТекСимвол = Лев(ВремСтрока, 4);
		Если ТекСимвол = "0000" Тогда 
			Результат = Результат + "0";
		ИначеЕсли ТекСимвол = "0001" Тогда 
			Результат = Результат + "1";
		ИначеЕсли ТекСимвол = "0010" Тогда 
			Результат = Результат + "2";
		ИначеЕсли ТекСимвол = "0011" Тогда 
			Результат = Результат + "3";
		ИначеЕсли ТекСимвол = "0100" Тогда 
			Результат = Результат + "4";
		ИначеЕсли ТекСимвол = "0101" Тогда 
			Результат = Результат + "5";
		ИначеЕсли ТекСимвол = "0110" Тогда 
			Результат = Результат + "6";
		ИначеЕсли ТекСимвол = "0111" Тогда 
			Результат = Результат + "7";
		ИначеЕсли ТекСимвол = "1000" Тогда 
			Результат = Результат + "8";
		ИначеЕсли ТекСимвол = "1001" Тогда 
			Результат = Результат + "9";
		ИначеЕсли ТекСимвол = "1010" Тогда 
			Результат = Результат + "A";
		ИначеЕсли ТекСимвол = "1011" Тогда 
			Результат = Результат + "B";
		ИначеЕсли ТекСимвол = "1100" Тогда 
			Результат = Результат + "C";
		ИначеЕсли ТекСимвол = "1101" Тогда 
			Результат = Результат + "D";
		ИначеЕсли ТекСимвол = "1110" Тогда 
			Результат = Результат + "E";
		ИначеЕсли ТекСимвол = "1111" Тогда 
			Результат = Результат + "F";
		КонецЕсли;
		ВремСтрока = Сред(ВремСтрока, 5);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Функция - Преобразовать бинарную строку в десятичное число
//
// Параметры:
//  БинарнаяСтрока - Текстовая строка в бинарном представлении (Пример "000010101"). 
// 
// Возвращаемое значение:
//   - Десятичное число. 
//
Функция ПреобразоватьБинарнуюСтрокуВЧисло(Знач БинарнаяСтрока) Экспорт
	
	Результат = 0;
	ТекущийИндекс = СтрДлина(БинарнаяСтрока) - 1;
	
	Для ИндексСимвол = 1 По СтрДлина(БинарнаяСтрока) Цикл
		ТекСимвол = Сред(БинарнаяСтрока, ИндексСимвол, 1);
		Если ТекСимвол = "1" Тогда
			Результат = Результат + Pow(2, ТекущийИндекс); 
		КонецЕсли;
		ТекущийИндекс = ТекущийИндекс - 1;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Функция - Преобразовать десятичное число в бинарную строку
//
// Параметры:
//  Число - Десятичное число которое будет преобразовано в бинарный вид. 
// 
// Возвращаемое значение:
//   - Текстовая строка в бинарном представлении (Пример "000010101").
//
Функция ПреобразоватьЧислоВБинарнуюСтроку(Знач Число) Экспорт 
	
	Результат = "";
	
	Пока Число > 0 Цикл
		Остаток = Число % 2;
		Число = Цел(Число / 2);
		Результат = Строка(Остаток) + Результат;
	КонецЦикла;
	
	Результат =?(ПустаяСтрока(Результат), "0", Результат); 
	Возврат Результат;
	
КонецФункции

// Функция формирует текст нефискального документа по шаблону.
//
Функция СформироватьТекстНефискальногоДокумента(ТипДокумента, ОбщиеПараметры, ШиринаСтроки = 32, ДополнительныйТекст = Неопределено, ФорматФФД = "1.1") Экспорт
	
	ПозицииЧека  = ?(ОбщиеПараметры.Свойство("ПозицииЧека"), ОбщиеПараметры.ПозицииЧека, Неопределено);
	ТаблицаОплат = ?(ОбщиеПараметры.Свойство("ТаблицаОплат"), ОбщиеПараметры.ТаблицаОплат, Неопределено);
	
	Если ТипДокумента = 0 Тогда
		ТипыЧеков = Новый Соответствие();
		ТипыЧеков.Вставить(1, НСтр("ru='ПРИХОД'"));          // Чек продажи     
		ТипыЧеков.Вставить(2, НСтр("ru='ВОЗВРАТ ПРИХОДА'")); // Чек возврата продажи 
		ТипыЧеков.Вставить(3, НСтр("ru='РАСХОД'"));          // Чек покупки 
		ТипыЧеков.Вставить(4, НСтр("ru='ВОЗВРАТ РАСХОДА'")); // Чек возврата покупки 
		ТипЧека = ТипыЧеков.Получить(МенеджерОборудованияКлиентСервер.ПолучитьКодТипаРасчетаДенежнымиСредствами(ОбщиеПараметры.ТипРасчета))
	ИначеЕсли ТипДокумента = 1 Тогда
		ТипЧека = НСтр("ru='ОТКРЫТИЕ СМЕНЫ'");  
	ИначеЕсли ТипДокумента = 2 Тогда
		ТипЧека = НСтр("ru='ВНЕСЕНИЕ'");  
	ИначеЕсли ТипДокумента = 3 Тогда
		ТипЧека = НСтр("ru='ВЫЕМКА'");  
	ИначеЕсли ТипДокумента = 4 Тогда
		ТипЧека = НСтр("ru='ОТЧЕТ БЕЗ ГАШЕНИЯ'");   
	ИначеЕсли ТипДокумента = 5 Тогда
		ТипЧека = НСтр("ru='ОТЧЕТ С ГАШЕНИЕМ'");  
	КонецЕсли;
	
	ПечатьКлише = Истина;
	
	Разделитель = ПостроитьПоле("", ШиринаСтроки, "=") + Символы.ПС;
	РазделительВнут = ПостроитьПоле("", ШиринаСтроки, "-") + Символы.ПС;
	
	Текст = Разделитель;
	
	Если ПечатьКлише Тогда 
		// Сформировать шапку чека.
		Если ОбщиеПараметры.Свойство("ОрганизацияНазвание") И НЕ ПустаяСтрока(ОбщиеПараметры.ОрганизацияНазвание) Тогда
			Текст = Текст + ПостроитьПолеПереносом(ОбщиеПараметры.ОрганизацияНазвание, ШиринаСтроки, , Истина) + Символы.ПС;
		КонецЕсли;
		
		Если ОбщиеПараметры.Свойство("АдресРасчетов") Тогда
			АдресРасчетов = ОбщиеПараметры.АдресРасчетов;
			Если НЕ ПустаяСтрока(АдресРасчетов) Тогда
				Текст = Текст + ПостроитьПолеПереносом(АдресРасчетов, ШиринаСтроки, , Истина) + Символы.ПС;
				Если ОбщиеПараметры.Свойство("МестоРасчетов") И НЕ ПустаяСтрока(ОбщиеПараметры.МестоРасчетов) Тогда
					Текст = Текст + ПостроитьПолеПереносом(ОбщиеПараметры.МестоРасчетов, ШиринаСтроки, , Истина) + Символы.ПС;
				КонецЕсли;
			ИначеЕсли ОбщиеПараметры.Свойство("АдресМагазина") И НЕ ПустаяСтрока(ОбщиеПараметры.АдресМагазина) Тогда
				Текст = Текст + ПостроитьПолеПереносом(ОбщиеПараметры.АдресМагазина, ШиринаСтроки) + Символы.ПС;
			КонецЕсли;
		КонецЕсли;
			
		Если ОбщиеПараметры.Свойство("ТекстШапки") И НЕ ПустаяСтрока(ОбщиеПараметры.ТекстШапки) Тогда
			Текст = Текст + ВыстроитьПоля(ОбщиеПараметры.ТекстШапки, , ШиринаСтроки) + Символы.ПС;
		КонецЕсли;
		
		Если ТипДокумента = 0 Тогда 
			Текст = Текст +  ВыстроитьПоля(НСтр("ru='КАССОВЫЙ ЧЕК'"), , ШиринаСтроки) + Символы.ПС;
		КонецЕсли;
		
		ОрганизацияИНН = ?(ОбщиеПараметры.Свойство("ОрганизацияИНН") И НЕ ПустаяСтрока(ОбщиеПараметры.ОрганизацияИНН), 
			НСтр("ru='ИНН'") + Символы.НПП + ОбщиеПараметры.ОрганизацияИНН, "");
			
		НомерЧека = ?(ОбщиеПараметры.Свойство("НомерЧека") И НЕ ПустаяСтрока(ОбщиеПараметры.НомерЧека),
			НСтр("ru='ЧЕК №'") + ОбщиеПараметры.НомерЧека, "");
			
		Если Не ПустаяСтрока(ОрганизацияИНН) Тогда
			Текст = Текст + ВыстроитьПоля(ТипЧека, ОрганизацияИНН, ШиринаСтроки) + Символы.ПС;
		Иначе
			Текст = Текст + ПостроитьПоле(ТипЧека, ШиринаСтроки) + Символы.ПС;
		КонецЕсли;
		
		ДатаВремя = ?(ОбщиеПараметры.Свойство("ДатаВремя") И НЕ ПустаяСтрока(ОбщиеПараметры.ДатаВремя), ОбщиеПараметры.ДатаВремя, ТекущаяДата());
		ДатаВремя = Формат(ДатаВремя, "ДФ=""дд.ММ.гггг ЧЧ:мм""");
		Текст = Текст + ВыстроитьПоля(НомерЧека, ДатаВремя, ШиринаСтроки) + Символы.ПС;
		
		Текст = Текст + РазделительВнут;
	КонецЕсли;
	
	ФорматЧисла = "ЧРД=.;ЧЦ=12;ЧДЦ=2;ЧН=0.00;ЧГ=0";
	СуммаЧека   = 0;
	СуммаНДС0   = 0;
	СуммаНДС10  = 0;
	СуммаНДС18  = 0;
	СуммаНДС110 = 0;
	СуммаНДС118 = 0;
	СуммаБезНДС = 0;
	
	// Формируем строки чека.
	Если ПозицииЧека <> Неопределено Тогда
		
		Для ИндексМассива = 0 По ПозицииЧека.Количество() - 1 Цикл
			
			ПозицияЧека = ПозицииЧека[ИндексМассива];
			
			Если ПозицияЧека.Свойство("ФискальнаяСтрока") Тогда
				Наименование = ?(ПозицияЧека.Свойство("Наименование"), ПозицияЧека.Наименование, "");
				Количество   = ?(ПозицияЧека.Свойство("Количество")  , ПозицияЧека.Количество  , 1);
				Цена         = ?(ПозицияЧека.Свойство("Цена")        , ПозицияЧека.Цена        , 0);
				Сумма        = ?(ПозицияЧека.Свойство("Сумма")       , ПозицияЧека.Сумма       , 0);
				НомерСекции  = ?(ПозицияЧека.Свойство("НомерСекции") , ПозицияЧека.НомерСекции , 0);
				СтавкаНДС    = ?(ПозицияЧека.Свойство("СтавкаНДС")   , ПозицияЧека.СтавкаНДС   , 0);
				
				Если ПозицияЧека.Свойство("ПризнакСпособаРасчета") И НЕ ПустаяСтрока(ПозицияЧека.ПризнакСпособаРасчета) И ФорматФФД = "1.0" Тогда
					Если НЕ ПозицияЧека.ПризнакСпособаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой") Тогда // Не отображаем для полной оплаты.
						Наименование = МенеджерОборудованияКлиентСервер.ПолучитьПризнакСпособаРасчетаДляПечати(ПозицияЧека.ПризнакСпособаРасчета) + " " + Наименование;
					КонецЕсли;
				КонецЕсли;
				
				ТекстСтроки  = ПостроитьПолеПереносом(Наименование, ШиринаСтроки) + Символы.ПС;
				ЦенаДляПечати = Окр(Сумма / Количество , 2);
				
				СтрокаТовара = Формат(Количество, "ЧРД=.;ЧЦ=12;ЧДЦ=3;ЧН=0.000;ЧГ=0") + " х " 
					+ Формат(ЦенаДляПечати, ФорматЧисла) + " =" + Формат(Сумма, ФорматЧисла);
				ТекстСтроки = ТекстСтроки + ВыстроитьПоля( , СтрокаТовара, ШиринаСтроки) + Символы.ПС;
				
				Если Окр(Количество * Цена, 2) > Сумма Тогда
					ТекстСкидки = НСтр("ru='СКИДКА'") + "=" + Формат(Количество * Цена - Сумма, ФорматЧисла);
				ИначеЕсли Окр(Количество * Цена, 2) < Сумма Тогда
					ТекстСкидки = НСтр("ru='НАДБАВКА'") + "=" + Формат(Сумма - Количество * Цена, ФорматЧисла);
				Иначе
					ТекстСкидки = "";
				КонецЕсли;
				
				ТекстНалога = "";
				Если ПозицияЧека.Свойство("СтавкаНДС") Тогда
					Если ПозицияЧека.СтавкаНДС = 10 Тогда
						СуммаНДС10  = СуммаНДС10 + Сумма;
						ТекстНалога = НСтр("ru='НДС 10%'");
					ИначеЕсли ПозицияЧека.СтавкаНДС = 18 Тогда
						СуммаНДС18  = СуммаНДС18 + Сумма; 
						ТекстНалога = НСтр("ru='НДС 18%'");
					ИначеЕсли ПозицияЧека.СтавкаНДС = 0 Тогда
						СуммаНДС0 = СуммаНДС0 + Сумма;
						ТекстНалога = НСтр("ru='НДС 0%'");
					ИначеЕсли ПозицияЧека.СтавкаНДС = 110 Тогда
						СуммаНДС110 = СуммаНДС110 + Сумма;
						ТекстНалога = НСтр("ru='НДС 10/110%'");
					ИначеЕсли ПозицияЧека.СтавкаНДС = 118 Тогда
						СуммаНДС118 = СуммаНДС118 + Сумма;
						ТекстНалога = НСтр("ru='НДС 18/118%'");
					Иначе 
						СуммаБезНДС = СуммаБезНДС + Сумма;
						ТекстНалога = НСтр("ru='БЕЗ НДС'");
					КонецЕсли;
				КонецЕсли;
				
				Если ПустаяСтрока(ТекстСкидки) Тогда
					ТекстСтроки = ТекстСтроки + ПостроитьПоле(" " + ТекстНалога, ШиринаСтроки) + Символы.ПС;
				Иначе
					ТекстСтроки = ТекстСтроки + ВыстроитьПоля(" " + ТекстНалога, ТекстСкидки, ШиринаСтроки) + Символы.ПС;
				КонецЕсли;
				Текст = Текст + ТекстСтроки; 
				
				Если ПозицияЧека.Свойство("ПризнакПредметаРасчета") И НЕ ПустаяСтрока(ПозицияЧека.ПризнакПредметаРасчета) И ФорматФФД = "1.1" Тогда
					ПризнакПредметаРасчета = МенеджерОборудованияКлиентСервер.ПолучитьКодПризнакаПредметаРасчета(ПозицияЧека.ПризнакПредметаРасчета);
					ПризнакПредметаРасчетаНаименование = МенеджерОборудованияКлиентСервер.ПолучитьНаименованиеПризнакаПредметаРасчета(ПризнакПредметаРасчета);
					Текст = Текст + ПостроитьПоле(" " + ПризнакПредметаРасчетаНаименование, ШиринаСтроки) + Символы.ПС;
				КонецЕсли;
				
				Если ПозицияЧека.Свойство("ПризнакСпособаРасчета") И НЕ ПустаяСтрока(ПозицияЧека.ПризнакСпособаРасчета) И ФорматФФД <> "1.0" Тогда
					ПризнакСпособаРасчета = МенеджерОборудованияКлиентСервер.ПолучитьКодПризнакСпособаРасчета(ПозицияЧека.ПризнакСпособаРасчета);
					ПризнакСпособаРасчетаНаименование = МенеджерОборудованияКлиентСервер.ПолучитьНаименованиеПризнакаСпособаРасчета(ПризнакСпособаРасчета);
					Текст = Текст + ПостроитьПоле(" " + ПризнакСпособаРасчетаНаименование, ШиринаСтроки) + Символы.ПС;
				КонецЕсли;
				
				СуммаЧека = СуммаЧека + Сумма;
			ИначеЕсли ПозицияЧека.Свойство("ТекстоваяСтрока") Тогда
				ТекстСтроки = ?(ПозицияЧека.Свойство("Текст"), ПозицияЧека.Текст, "");
				Текст = Текст + ТекстСтроки + Символы.ПС;
			ИначеЕсли ПозицияЧека.Свойство("ШтрихКод") Тогда
				СтрокаШтрихкода = "|ШтрихКод|" + ПозицияЧека.ТипШтрихкода + "|" + ПозицияЧека.ШтрихКод; 
				Текст = Текст + СтрокаШтрихкода + Символы.ПС; 
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Формируем подвал чека
	Если ТаблицаОплат <> Неопределено Тогда
		
		СуммаНаличными       = 0;
		СуммаЭлектронными    = 0;
		СуммаПостоплатой     = 0;
		СуммаПредоплатой     = 0;
		СуммаПредоставлением = 0;
		Для ИндексОплаты = 0 По ТаблицаОплат.Количество() - 1 Цикл
			Если ТаблицаОплат[ИндексОплаты].ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Электронно") Тогда
				СуммаЭлектронными = СуммаЭлектронными + ТаблицаОплат[ИндексОплаты].Сумма;
			ИначеЕсли ТаблицаОплат[ИндексОплаты].ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Предоплата") Тогда
				СуммаПредоплатой = СуммаПредоплатой + ТаблицаОплат[ИндексОплаты].Сумма;
			ИначеЕсли ТаблицаОплат[ИндексОплаты].ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Постоплата") Тогда
				СуммаПостоплатой = СуммаПостоплатой + ТаблицаОплат[ИндексОплаты].Сумма;
			ИначеЕсли ТаблицаОплат[ИндексОплаты].ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.ВстречноеПредоставление") Тогда
				СуммаПредоставлением = СуммаПредоставлением + ТаблицаОплат[ИндексОплаты].Сумма;
			Иначе
				СуммаНаличными = СуммаНаличными + ТаблицаОплат[ИндексОплаты].Сумма;
			КонецЕсли;
		КонецЦикла;
		
		СуммаОплаты = СуммаНаличными + СуммаЭлектронными + СуммаПостоплатой + СуммаПредоплатой + СуммаПредоставлением;
	
		Текст = Текст + РазделительВнут;
		Текст = Текст + ВыстроитьПоля(НСтр("ru='ИТОГ'"), "=" + Формат(СуммаЧека, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
		Текст = Текст + РазделительВнут;
		
		Текст = Текст + НСтр("ru='ОПЛАТА'") + Символы.ПС;
		
		Если ФорматФФД = "1.0" Тогда // ФФД 1.0
			Если СуммаНаличными > 0 Тогда
				Текст = Текст + ВыстроитьПоля(" " + НСтр("ru='НАЛИЧНЫМИ'"), "=" + Формат(СуммаНаличными, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
			КонецЕсли;
			Если СуммаЭлектронными > 0 Тогда
				Текст = Текст + ВыстроитьПоля(" " + НСтр("ru='ЭЛЕКТРОННЫМИ'"), "=" + Формат(СуммаЭлектронными, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
			КонецЕсли;
			Если СуммаПостоплатой > 0 Тогда
				Текст = Текст + ВыстроитьПоля(" " + НСтр("ru='ЭЛЕКТРОННЫМИ'"), "=" + Формат(СуммаПостоплатой, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
			КонецЕсли;
			Если СуммаПредоплатой > 0 Тогда
				Текст = Текст + ВыстроитьПоля(" " + НСтр("ru='ЭЛЕКТРОННЫМИ'"), "=" + Формат(СуммаПредоплатой, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
			КонецЕсли;          
			Если СуммаПредоставлением > 0 Тогда
				Текст = Текст + ВыстроитьПоля(" " + НСтр("ru='ЭЛЕКТРОННЫМИ'"), "=" + Формат(СуммаПредоставлением, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
			КонецЕсли;          
		Иначе // ФФД 1.0.5 & ФФД 1.1
			Если СуммаНаличными > 0 Тогда
				Текст = Текст + ВыстроитьПоля(" " + НСтр("ru='НАЛИЧНЫМИ'"), "=" + Формат(СуммаНаличными, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
			КонецЕсли;
			Если СуммаЭлектронными > 0 Тогда
				Текст = Текст + ВыстроитьПоля(" " + НСтр("ru='ЭЛЕКТРОННЫМИ'"), "=" + Формат(СуммаЭлектронными, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
			КонецЕсли;
			Если СуммаПостоплатой > 0 Тогда
				Текст = Текст + ВыстроитьПоля(" " + НСтр("ru='ПОСТОПЛАТОЙ'"), "=" + Формат(СуммаПостоплатой, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
			КонецЕсли;
			Если СуммаПредоплатой > 0 Тогда
				Текст = Текст + ВыстроитьПоля(" " + НСтр("ru='ЗАЧЕТ АВАНСА'"), "=" + Формат(СуммаПредоплатой, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
			КонецЕсли;          
			Если СуммаПредоставлением > 0 Тогда
				Текст = Текст + ВыстроитьПоля(" " + НСтр("ru='ВСТР.ПРЕДОСТ.'"), "=" + Формат(СуммаПредоставлением, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
			КонецЕсли;          
		КонецЕсли; 
		
		Текст = Текст + ВыстроитьПоля(НСтр("ru='ПОЛУЧЕНО'"), "=" + Формат(СуммаОплаты, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
		Текст = Текст + ВыстроитьПоля(" " + НСтр("ru='СДАЧА'"), "=" + Формат(СуммаОплаты - СуммаЧека, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
		
		Если ОбщиеПараметры.Свойство("СистемаНалогообложения") Тогда
			СистемаНалогообложенияКод = МенеджерОборудованияКлиентСервер.ПолучитьКодТипаСистемыНалогообложенияККТ(ОбщиеПараметры.СистемаНалогообложения);
			СистемаНалогообложения = МенеджерОборудованияКлиентСервер.ПолучитьНаименованиеСистемыНалогообложения(СистемаНалогообложенияКод, Истина);
			Текст = Текст + ВыстроитьПоля(НСтр("ru='СНО:'"), СистемаНалогообложения, ШиринаСтроки) + Символы.ПС;
		КонецЕсли;          
		
		Если СуммаБезНДС > 0 Тогда
			Текст = Текст + ВыстроитьПоля(НСтр("ru=' СУММА БЕЗ НДС'"), "=" + Формат(СуммаБезНДС, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
		КонецЕсли;
		Если СуммаНДС0 > 0 Тогда
			Текст = Текст + ВыстроитьПоля(НСтр("ru=' СУММА C НДС 0%'")  , "=" + Формат(СуммаНДС0, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
		КонецЕсли;
		Если СуммаНДС10 > 0 Тогда
			Текст = Текст + ВыстроитьПоля(НСтр("ru=' СУММА НДС 10%'"), "=" + Формат(СуммаНДС10 / 110 * 10, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
		КонецЕсли;
		Если СуммаНДС18 > 0 Тогда
			Текст = Текст + ВыстроитьПоля(НСтр("ru=' СУММА НДС 18%'"), "=" + Формат(СуммаНДС18 / 118 * 18, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
		КонецЕсли;
		Если СуммаНДС110 > 0 Тогда
			Текст = Текст + ВыстроитьПоля(НСтр("ru=' СУММА НДС 10/110%'"), "=" + Формат(СуммаНДС110 / 110 * 10, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
		КонецЕсли;
		Если СуммаНДС118 > 0 Тогда
			Текст = Текст + ВыстроитьПоля(НСтр("ru=' СУММА НДС 18/118%'"), "=" + Формат(СуммаНДС118 / 118 * 18, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
		КонецЕсли;
		
		Кассир = ?(ОбщиеПараметры.Свойство("Кассир"), ОбщиеПараметры.Кассир, "");
		Текст = Текст + ПостроитьПоле(НСтр("ru='КАССИР'") + ":" + Символы.НПП + Кассир, ШиринаСтроки) + Символы.ПС + Символы.ПС;                        
		Текст = Текст + ПостроитьПоле(НСтр("ru='ПОДПИСЬ'") + ":", ШиринаСтроки, "_") + Символы.ПС;
		
		Если ОбщиеПараметры.Свойство("ТекстПодвала") И НЕ ПустаяСтрока(ОбщиеПараметры.ТекстПодвала) Тогда
			Текст = Текст + ВыстроитьПоля(ОбщиеПараметры.ТекстПодвала, , ШиринаСтроки) + Символы.ПС;
		КонецЕсли;
	
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ДополнительныйТекст) Тогда
		Текст = Текст + ДополнительныйТекст + Символы.ПС;
	КонецЕсли;
	
	Текст = Текст + Разделитель + Символы.ПС;
	
	Возврат Текст;
	
КонецФункции

// Функция формирует текст нефискального чека по шаблону.
//
Функция СформироватьТекстНефискальногоЧека(ОбщиеПараметры, ШиринаСтроки = 32, ФорматФФД = "1.1") Экспорт
	
	Возврат СформироватьТекстНефискальногоДокумента(0, ОбщиеПараметры, ШиринаСтроки, , ФорматФФД);
	
КонецФункции

// Получить код системы налогообложения ККТ.
// 
Функция ПолучитьКодТипаСистемыНалогообложенияККТ(СистемаНалогообложенияККТ) Экспорт
	
	Если СистемаНалогообложенияККТ = ПредопределенноеЗначение("Перечисление.ТипыСистемНалогообложенияККТ.УСНДоход") Тогда
		СистемаНалогообложения = 1 
	ИначеЕсли СистемаНалогообложенияККТ = ПредопределенноеЗначение("Перечисление.ТипыСистемНалогообложенияККТ.УСНДоходРасход") Тогда
		СистемаНалогообложения = 2
	ИначеЕсли СистемаНалогообложенияККТ = ПредопределенноеЗначение("Перечисление.ТипыСистемНалогообложенияККТ.ЕНВД") Тогда
		СистемаНалогообложения = 3
	ИначеЕсли СистемаНалогообложенияККТ = ПредопределенноеЗначение("Перечисление.ТипыСистемНалогообложенияККТ.ЕСН") Тогда
		СистемаНалогообложения = 4
	ИначеЕсли СистемаНалогообложенияККТ = ПредопределенноеЗначение("Перечисление.ТипыСистемНалогообложенияККТ.Патент") Тогда
		СистемаНалогообложения = 5
	Иначе
		СистемаНалогообложения = 0
	КонецЕсли;
	
	Возврат СистемаНалогообложения;
	
КонецФункции

// Получить код типа расчета денежными средствами.
// 
Функция ПолучитьКодТипаРасчетаДенежнымиСредствами(ТипРасчета) Экспорт
	
	Если ТипРасчета = ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств") Тогда
		ПризнакРасчетаКод = 1 
	ИначеЕсли ТипРасчета = ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств") Тогда
		ПризнакРасчетаКод = 2 
	ИначеЕсли ТипРасчета = ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.РасходДенежныхСредств") Тогда
		ПризнакРасчетаКод = 3
	Иначе
		ПризнакРасчетаКод = 4
	КонецЕсли;
	
	Возврат ПризнакРасчетаКод;
	
КонецФункции

// Получить код типа признака агента.
// 
Функция ПолучитьКодПризнакаАгента(ПризнакАгента) Экспорт
	
	Если ПризнакАгента = ПредопределенноеЗначение("Перечисление.ПризнакиАгента.БанковскийПлатежныйАгент") Тогда
		ПризнакАгентаКод = 0 
	ИначеЕсли ПризнакАгента = ПредопределенноеЗначение("Перечисление.ПризнакиАгента.БанковскийПлатежныйСубагент") Тогда
		ПризнакАгентаКод = 1 
	ИначеЕсли ПризнакАгента = ПредопределенноеЗначение("Перечисление.ПризнакиАгента.ПлатежныйАгент") Тогда
		ПризнакАгентаКод = 2
	ИначеЕсли ПризнакАгента = ПредопределенноеЗначение("Перечисление.ПризнакиАгента.ПлатежныйСубагент") Тогда
		ПризнакАгентаКод = 3 
	ИначеЕсли ПризнакАгента = ПредопределенноеЗначение("Перечисление.ПризнакиАгента.Поверенный") Тогда
		ПризнакАгентаКод = 4
	ИначеЕсли ПризнакАгента = ПредопределенноеЗначение("Перечисление.ПризнакиАгента.Комиссионер") Тогда
		ПризнакАгентаКод = 5 
	ИначеЕсли ПризнакАгента = ПредопределенноеЗначение("Перечисление.ПризнакиАгента.Агент") Тогда
		ПризнакАгентаКод = 6
	КонецЕсли;
	
	Возврат ПризнакАгентаКод;
	
КонецФункции

// Получить код признака способа расчета.
// 
Функция ПолучитьКодПризнакСпособаРасчета(ПризнакСпособаРасчета) Экспорт
	
	Если ПризнакСпособаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПредоплатаПолная") Тогда
		ПризнакСпособаРасчетаКод = 1 
	ИначеЕсли ПризнакСпособаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПредоплатаЧастичная") Тогда
		ПризнакСпособаРасчетаКод = 2 
	ИначеЕсли ПризнакСпособаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.Аванс") Тогда
		ПризнакСпособаРасчетаКод = 3
	ИначеЕсли ПризнакСпособаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой") Тогда
		ПризнакСпособаРасчетаКод = 4 
	ИначеЕсли ПризнакСпособаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПередачаСЧастичнойОплатой") Тогда
		ПризнакСпособаРасчетаКод = 5
	ИначеЕсли ПризнакСпособаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПередачаБезОплаты") Тогда
		ПризнакСпособаРасчетаКод = 6 
	ИначеЕсли ПризнакСпособаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ОплатаКредита") Тогда
		ПризнакСпособаРасчетаКод = 7
	КонецЕсли;
	
	Возврат ПризнакСпособаРасчетаКод;
	
КонецФункции

// Получить признак способа расчета для печати.
//
Функция ПолучитьПризнакСпособаРасчетаДляПечати(ПризнакСпособаРасчета) Экспорт
	
	Если ПризнакСпособаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПредоплатаПолная") Тогда
		ПризнакСпособаРасчетаДляПечати = "[ПрОп100]"   
	ИначеЕсли ПризнакСпособаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПредоплатаЧастичная") Тогда
		ПризнакСпособаРасчетаДляПечати = "[ПрОпл]"
	ИначеЕсли ПризнакСпособаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.Аванс") Тогда
		ПризнакСпособаРасчетаДляПечати = "[Аванс]"
	ИначеЕсли ПризнакСпособаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой") Тогда
		ПризнакСпособаРасчетаДляПечати = "[ПОпл]"
	ИначеЕсли ПризнакСпособаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПередачаСЧастичнойОплатой") Тогда
		ПризнакСпособаРасчетаДляПечати = "[ЧОпл]"
	ИначеЕсли ПризнакСпособаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПередачаБезОплаты") Тогда
		ПризнакСпособаРасчетаДляПечати = "[БезОп]" 
	ИначеЕсли ПризнакСпособаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ОплатаКредита") Тогда
		ПризнакСпособаРасчетаДляПечати = "[Кред]"
	КонецЕсли;
	
	Возврат ПризнакСпособаРасчетаДляПечати;
	
КонецФункции

// Получить код признака способа расчета.
// 
Функция ПолучитьКодПризнакаПредметаРасчета(ПризнакПредметаРасчета) Экспорт
	
	Если ПризнакПредметаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.Товар") Тогда
		ПризнакПредметаРасчетаКод = 1 
	ИначеЕсли ПризнакПредметаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ПодакцизныйТовар") Тогда
		ПризнакПредметаРасчетаКод = 2 
	ИначеЕсли ПризнакПредметаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.Работа") Тогда
		ПризнакПредметаРасчетаКод = 3 
	ИначеЕсли ПризнакПредметаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.Услуга") Тогда
		ПризнакПредметаРасчетаКод = 4 
	ИначеЕсли ПризнакПредметаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.СтавкаАзартнойИгры") Тогда
		ПризнакПредметаРасчетаКод = 5 
	ИначеЕсли ПризнакПредметаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ВыигрышАзартнойИгры") Тогда
		ПризнакПредметаРасчетаКод = 6 
	ИначеЕсли ПризнакПредметаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ЛотерейныйБилет") Тогда
		ПризнакПредметаРасчетаКод = 7 
	ИначеЕсли ПризнакПредметаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ВыигрышЛотереи") Тогда
		ПризнакПредметаРасчетаКод = 8 
	ИначеЕсли ПризнакПредметаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ПредоставлениеРИД") Тогда
		ПризнакПредметаРасчетаКод = 9 
	ИначеЕсли ПризнакПредметаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ПлатежВыплата") Тогда
		ПризнакПредметаРасчетаКод = 10 
	ИначеЕсли ПризнакПредметаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.АгентскоеВознаграждение") Тогда
		ПризнакПредметаРасчетаКод = 11 
	ИначеЕсли ПризнакПредметаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.СоставнойПредметРасчета") Тогда
		ПризнакПредметаРасчетаКод = 12 
	Иначе
	   ПризнакПредметаРасчетаКод = 13
	КонецЕсли;
	
	Возврат ПризнакПредметаРасчетаКод;
	
КонецФункции

// Получить код причины изменения сведений о ККТ.
// 
Функция ПолучитьКодПричиныИзмененияСведенийККТ(ПричинаИзмененияСведенийККТ) Экспорт
	
	Если ПричинаИзмененияСведенийККТ = ПредопределенноеЗначение("Перечисление.ПричиныИзмененияСведенийККТ.ЗаменаФН") Тогда
		ПричинаИзмененияСведенийКод = 0
	ИначеЕсли ПричинаИзмененияСведенийККТ = ПредопределенноеЗначение("Перечисление.ПричиныИзмененияСведенийККТ.ЗаменаОФД") Тогда
		ПричинаИзмененияСведенийКод = 1
	ИначеЕсли ПричинаИзмененияСведенийККТ = ПредопределенноеЗначение("Перечисление.ПричиныИзмененияСведенийККТ.ИзменениеНаименованияПользователя") Тогда
		ПричинаИзмененияСведенийКод = 2
	ИначеЕсли ПричинаИзмененияСведенийККТ = ПредопределенноеЗначение("Перечисление.ПричиныИзмененияСведенийККТ.ИзменениеАдреса") Тогда
		ПричинаИзмененияСведенийКод = 3
	ИначеЕсли ПричинаИзмененияСведенийККТ = ПредопределенноеЗначение("Перечисление.ПричиныИзмененияСведенийККТ.ПереводВРежимПередачиДанных") Тогда
		ПричинаИзмененияСведенийКод = 4
	ИначеЕсли ПричинаИзмененияСведенийККТ = ПредопределенноеЗначение("Перечисление.ПричиныИзмененияСведенийККТ.ПереводВАвтономныйРежим") Тогда
		ПричинаИзмененияСведенийКод = 5
	ИначеЕсли ПричинаИзмененияСведенийККТ = ПредопределенноеЗначение("Перечисление.ПричиныИзмененияСведенийККТ.ИзменениеВерсии") Тогда
		ПричинаИзмененияСведенийКод = 6
	ИначеЕсли ПричинаИзмененияСведенийККТ = ПредопределенноеЗначение("Перечисление.ПричиныИзмененияСведенийККТ.ИзменениеСистемНалогообложения") Тогда
		ПричинаИзмененияСведенийКод = 7
	ИначеЕсли ПричинаИзмененияСведенийККТ = ПредопределенноеЗначение("Перечисление.ПричиныИзмененияСведенийККТ.ИзменениеНомераУстройства") Тогда
		ПричинаИзмененияСведенийКод = 8
	ИначеЕсли ПричинаИзмененияСведенийККТ = ПредопределенноеЗначение("Перечисление.ПричиныИзмененияСведенийККТ.ПереводВНеавтоматическийРежим") Тогда
		ПричинаИзмененияСведенийКод = 9
	ИначеЕсли ПричинаИзмененияСведенийККТ = ПредопределенноеЗначение("Перечисление.ПричиныИзмененияСведенийККТ.ПереводВАвтоматическийРежим") Тогда
		ПричинаИзмененияСведенийКод = 10
	ИначеЕсли ПричинаИзмененияСведенийККТ = ПредопределенноеЗначение("Перечисление.ПричиныИзмененияСведенийККТ.ВключениеБСО") Тогда
		ПричинаИзмененияСведенийКод = 11
	ИначеЕсли ПричинаИзмененияСведенийККТ = ПредопределенноеЗначение("Перечисление.ПричиныИзмененияСведенийККТ.ВыключениеБСО") Тогда
		ПричинаИзмененияСведенийКод = 12
	ИначеЕсли ПричинаИзмененияСведенийККТ = ПредопределенноеЗначение("Перечисление.ПричиныИзмененияСведенийККТ.ВключениеРежимаРасчетовВИнтернет") Тогда
		ПричинаИзмененияСведенийКод = 13
	ИначеЕсли ПричинаИзмененияСведенийККТ = ПредопределенноеЗначение("Перечисление.ПричиныИзмененияСведенийККТ.ВыключениеРежимаРасчетовВИнтернет") Тогда
		ПричинаИзмененияСведенийКод = 14
	ИначеЕсли ПричинаИзмененияСведенийККТ = ПредопределенноеЗначение("Перечисление.ПричиныИзмененияСведенийККТ.ВключениеРежимаАгента") Тогда
		ПричинаИзмененияСведенийКод = 15
	ИначеЕсли ПричинаИзмененияСведенийККТ = ПредопределенноеЗначение("Перечисление.ПричиныИзмененияСведенийККТ.ВыключениеРежимаАгента") Тогда
		ПричинаИзмененияСведенийКод = 16
	ИначеЕсли ПричинаИзмененияСведенийККТ = ПредопределенноеЗначение("Перечисление.ПричиныИзмененияСведенийККТ.ВключениеРежимаАзартныхИгр") Тогда
		ПричинаИзмененияСведенийКод = 17
	ИначеЕсли ПричинаИзмененияСведенийККТ = ПредопределенноеЗначение("Перечисление.ПричиныИзмененияСведенийККТ.ВыключениеРежимаАзартныхИгр") Тогда
		ПричинаИзмененияСведенийКод = 18
	ИначеЕсли ПричинаИзмененияСведенийККТ = ПредопределенноеЗначение("Перечисление.ПричиныИзмененияСведенийККТ.ВключениеРежимаЛотереи") Тогда
		ПричинаИзмененияСведенийКод = 19
	ИначеЕсли ПричинаИзмененияСведенийККТ = ПредопределенноеЗначение("Перечисление.ПричиныИзмененияСведенийККТ.ВыключениеРежимаЛотереи") Тогда
		ПричинаИзмененияСведенийКод = 20
	ИначеЕсли ПричинаИзмененияСведенийККТ = ПредопределенноеЗначение("Перечисление.ПричиныИзмененияСведенийККТ.ИзменениеВерсииФФД") Тогда
		ПричинаИзмененияСведенийКод = 21
	Иначе
		ПричинаИзмененияСведенийКод = 31
	КонецЕсли;
	
	Возврат ПричинаИзмененияСведенийКод;
	
КонецФункции

// Заполняет структуру общих параметров фискального накопителя.
//
Функция ПараметрыФискальногоНакопителяОбщие() Экспорт
	
	Параметры = Новый Структура();
	// ФФД 1.0
	Параметры.Вставить("РегистрационныйНомерККТ");
	Параметры.Вставить("ОрганизацияНазвание");
	Параметры.Вставить("ОрганизацияИНН");
	Параметры.Вставить("АдресУстановкиККТ");
	Параметры.Вставить("КодыСистемыНалогообложения");
	Параметры.Вставить("ПризнакАвтономногоРежима"      , Ложь);
	Параметры.Вставить("ПризнакАвтоматическогоРежима"  , Ложь);
	Параметры.Вставить("НомерАвтоматаДляАвтоматическогоРежима");
	Параметры.Вставить("ПризнакШифрованиеДанных"       , Ложь);
	Параметры.Вставить("ПризнакРасчетовЗаУслуги"       , Ложь);
	Параметры.Вставить("ПризнакФормированияТолькоБСО"  , Ложь);
	Параметры.Вставить("ПризнакРасчетовТолькоВИнтернет", Ложь);
	Параметры.Вставить("ОрганизацияОФДИНН");
	Параметры.Вставить("ОрганизацияОФДНазвание");
	// ФФД 1.0.5 & 1.1
 	Параметры.Вставить("МестоПроведенияРасчетов");
	Параметры.Вставить("ПродажаПодакцизногоТовара" , Ложь); 
	Параметры.Вставить("ПроведенияАзартныхИгр"     , Ложь); 
	Параметры.Вставить("ПроведенияЛотерей"         , Ложь); 
	Параметры.Вставить("ПризнакиАгента");  
	Параметры.Вставить("УстановкаПринтераВАвтомате", Ложь);
	Параметры.Вставить("ОтправительEmail");
	Параметры.Вставить("АдресСайтаФНС");
	Возврат Параметры; 
	
КонецФункции

// Заполняет структуру параметров Фискализации ФН.
//
Функция ПараметрыОперацииФискализацииНакопителя() Экспорт
	
	Параметры = ПараметрыФискальногоНакопителяОбщие();
	Параметры.Вставить("КодПричиныПеререгистрации"); 
	Параметры.Вставить("КодыПричинИзмененияСведений"); 
	Параметры.Вставить("ТипОперации", 1);
	Параметры.Вставить("Кассир"     , Неопределено); // Строка,Обязательно   - ФИО лица и должность, осуществившего расчет с покупателем (клиентом), оформившего кассовый чек.
	Параметры.Вставить("КассирИНН"  , Неопределено); // Строка,Необязательно - Идентификационный номер налогоплательщика кассира, при наличии.
	Возврат Параметры; 
	
КонецФункции

// Заполняет структуру параметров регистрации ККТ.
//
Функция ПараметрыРегистрацииККТ() Экспорт
	
	Параметры = ПараметрыФискальногоНакопителяОбщие();
	Параметры.Вставить("ЗаводскойНомерККТ");
	Параметры.Вставить("ПризнакФискализации");
	Параметры.Вставить("ЗаводскойНомерФН");
	Параметры.Вставить("НомерДокументаФискализации");
	Параметры.Вставить("ДатаВремяФискализации");
	Параметры.Вставить("ВерсияФФДККТ");
	Параметры.Вставить("ВерсияФФДФН");
	Возврат Параметры; 
	
КонецФункции

// Заполняет структуру данных агента.
//
Функция ПараметрыДанныеАгента() Экспорт
	
	// ФФД - Значения реквизита «данные агента» (тег 1223) указаны в таблице 22.
	Параметры = Новый Структура();
	
	ПлатежныйАгент = Новый Структура();
	ПлатежныйАгент.Вставить("Операция", Неопределено);  // Строка - Операция платежного агента.
	ПлатежныйАгент.Вставить("Телефон" , Неопределено);  // Строка - Телефон платежного агента.
	Параметры.Вставить("ПлатежныйАгент", ПлатежныйАгент);
	
	ОператорПеревода = Новый Структура();
	ОператорПеревода.Вставить("Телефон"     , Неопределено); // Строка - Телефон оператора перевода.
	ОператорПеревода.Вставить("Наименование", Неопределено); // Строка - Наименование оператора перевода.
	ОператорПеревода.Вставить("Адрес"       , Неопределено); // Строка - Адрес оператора перевода.
	ОператорПеревода.Вставить("ИНН"         , Неопределено); // Строка - ИНН оператора перевода.
	Параметры.Вставить("ОператорПеревода", ОператорПеревода);
	
	ОператорПоПриемуПлатежей = Новый Структура();
	ОператорПоПриемуПлатежей.Вставить("Телефон", Неопределено); // Строка - Телефон оператора по приему платежей.
	Параметры.Вставить("ОператорПоПриемуПлатежей", ОператорПоПриемуПлатежей);
	
	Возврат Параметры; 
	
КонецФункции

// Заполняет структуру данных поставщика.
//
Функция ПараметрыДанныеПоставщика() Экспорт
	
	Параметры = Новый Структура();
	Параметры.Вставить("Телефон");      // Строка - Телефон поставщика.
	Параметры.Вставить("Наименование"); // Строка - Наименование поставщика.
	Параметры.Вставить("ИНН");          // Строка - ИНН поставщика.
	Возврат Параметры; 
	
КонецФункции

// Заполняет структуру данных кода товарной номенклатуры.
//
Функция ПараметрыДанныеКодаТоварнойНоменклатуры() Экспорт
	
	Параметры = Новый Структура();
	Параметры.Вставить("ТипМаркировки"); // Строка - Тип маркировки. Список значений: "02" – изделия из меха, "03" – лекарственные препараты
	Параметры.Вставить("КонтрольныйИдентификационныйЗнак");       // Строка - Контрольный идентификационный знак (КиЗ).
	Параметры.Вставить("ГлобальныйИдентификаторТорговойЕдиницы"); // Строка - Глобальный идентификатор торговой единицы (GTIN).
	Возврат Параметры; 
	
КонецФункции

// Заполняет структуру параметров операции фискализации чека.
//
Функция ПараметрыОперацииФискализацииЧека() Экспорт;
	
	ПараметрыЧека = Новый Структура();
	// Общие реквизиты для всех типов оборудования.
	ПараметрыЧека.Вставить("ДокументОснование"  , Неопределено); // Ссылка,Необязательно. Документ по которому пробивается чек.
	ПараметрыЧека.Вставить("Электронно"         , Ложь); // Булево,Обязательно - Чек будет предоставлен в электронной форме, без печати. Ложь-Значение по умолчанию.
	
	// Тип расчета - "Перечисление.ТипыРасчетаДенежнымиСредствами"
	ПараметрыЧека.Вставить("ТипРасчета"        , ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств")); // Обязательно.

	// Параметры для ККТ по ФЗ-54
	ПараметрыЧека.Вставить("Кассир"            , Неопределено); // Строка,Обязательно   - ФИО лица и должность, осуществившего расчет с покупателем (клиентом), оформившего кассовый чек.
	ПараметрыЧека.Вставить("КассирИНН"         , Неопределено); // Строка,Необязательно - Идентификационный номер налогоплательщика кассира, при наличии.
	ПараметрыЧека.Вставить("Отправляет1СSMS"   , Ложь); // Булево,Обязательно - SMS отправляет средствами 1C.   Ложь-Значение по умолчанию.
	ПараметрыЧека.Вставить("Отправляет1СEmail" , Ложь); // Булево,Обязательно - Email отправляет средствами 1C. Ложь-Значение по умолчанию.
	
	// Системы налогообложения - "Перечисление.ТипыСистемНалогообложенияККТ"
	ПараметрыЧека.Вставить("СистемаНалогообложения", ПредопределенноеЗначение("Перечисление.ТипыСистемНалогообложенияККТ.ОСН")); // Обязательно. Заполняется значением по умолчанию.  
	ПараметрыЧека.Вставить("АдресРасчетов"     ); // Строка,Необязательно - Адрес расчетов (Тег 1009).
	ПараметрыЧека.Вставить("МестоРасчетов"     ); // Строка,Необязательно - Место расчетов (Тег 1187).
	ПараметрыЧека.Вставить("ОтправительEmail"  ); // Строка,Необязательно - Адрес электронной почты отправителя чека (Тег 1117).
	ПараметрыЧека.Вставить("ПокупательEmail"   ); // Строка,Необязательно - Адрес электронной почты покупателя.
	ПараметрыЧека.Вставить("ПокупательНомер"   ); // Строка,Необязательно - Телефонный номер покупателя.
	
	// Признак агента - "Перечисление.ПризнакиАгента", (ФФД, Тег 1057, Расшифровка - таблица 10)
	ПараметрыЧека.Вставить("ПризнакАгента"     , Неопределено); // Перечисление - Признак агента (Тег 1057).
	ПараметрыЧека.Вставить("ДанныеАгента"      , ПараметрыДанныеАгента());     // Структура,Заполнение необязательно - Данные агента.
	ПараметрыЧека.Вставить("ДанныеПоставщика"  , ПараметрыДанныеПоставщика()); // Структура,Заполнение необязательно - Данные поставщика.
	
	// Параметры необходимые для ФР
	ПараметрыЧека.Вставить("СерийныйНомер"       ); // Строка,Необязательно - Заводской номер ККМ (совместимость с ФР).
	// Параметры необходимые для чека ЕНВД на принтере чеков
	ПараметрыЧека.Вставить("ОрганизацияНазвание" ); // Строка,Необязательно - Название организации (Для чека ЕНВД).
	ПараметрыЧека.Вставить("ОрганизацияИНН"      ); // Строка,Необязательно - ИНН организации (Для чека ЕНВД).
	ПараметрыЧека.Вставить("ОрганизацияКПП"      ); // Строка,Необязательно - КПП организации (Для чека ЕНВД).
	ПараметрыЧека.Вставить("АдресМагазина"       ); // Строка,Необязательно - Адрес магазина (Для чека ЕНВД).
	ПараметрыЧека.Вставить("НаименованиеМагазина"); // Строка,Необязательно - Наименование магазина (Для чека ЕНВД).
	ПараметрыЧека.Вставить("НомерКассы"          ); // Строка,Необязательно - Номер кассы (Для чека ЕНВД).
	ПараметрыЧека.Вставить("НомерЧека"           ); // Строка,Необязательно - Номер чека  (Для чека ЕНВД).
	ПараметрыЧека.Вставить("НомерСмены"          ); // Строка,Необязательно - Номер смены (Для чека ЕНВД).
	ПараметрыЧека.Вставить("ДатаВремя", ТекущаяДата()); // ДатаВремя, Необязательно - Дата время в чеке (Для чека ЕНВД).
	ПараметрыЧека.Вставить("ТекстШапки"   , НСтр("ru='ДОБРО ПОЖАЛОВАТЬ!'"));   // Строка - заполняется значением по умолчанию. 
	ПараметрыЧека.Вставить("ТекстПодвала" , НСтр("ru='СПАСИБО ЗА ПОКУПКУ!'")); // Строка - заполняется значением по умолчанию. 
	ПараметрыЧека.Вставить("КопийЧека"    , 1); // Число,Необязательно - Сколько печатать копий чеков ЕНВД на принтере чеков.

	// Позиции чека для фискализациию
	ПараметрыЧека.Вставить("ПозицииЧека"  , Новый Массив()); // Массив элементов "Структура". Обязательно.
	// Таблица оплаты чека
	ПараметрыЧека.Вставить("ТаблицаОплат" , Новый Массив()); // Массив элементов "Структура". Обязательно.
	// Пример заполнения строки оплаты:
	// СтрокаОплаты = Новый Структура();
	// СтрокаОплаты.Вставить("ТипОплаты", ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Наличные")); // Наличные
	// СтрокаОплаты.Вставить("Сумма", СуммаВидаОплаты);
	// ПараметрыЧека.ТаблицаОплат.Добавить(СтрокаОплаты);
	
	// Параметры для печати чека по шаблону.
	ПараметрыЧека.Вставить("ШаблонЧека"            ); // Ссылка,Необязательно - Пользовательский шаблон для формирования чека.
	ПараметрыЧека.Вставить("КассаККМ"              ); // Ссылка,Необязательно - Касса ККМ. 
	ПараметрыЧека.Вставить("НефискальныеДокументы" , Новый Массив()); // Массив нефискальных документов. Необязательно.
	
	// Формато-логический контроль - "ПеречислениеСсылка.СпособыФорматоЛогическогоКонтроля"
	ПараметрыЧека.Вставить("СпособФорматоЛогическогоКонтроля", Неопределено);     // Перечисление,Необязательно - Способ формато-логического контроля. 
	ПараметрыЧека.Вставить("ДопустимоеРасхождениеФорматоЛогическогоКонтроля", 0.01); // Число,Необязательно - устанавливается значение по умолчанию. 
	
	Возврат ПараметрыЧека; 
	
КонецФункции

// Заполняет структуру параметров фискальной строки для фискализации чека.
//
Функция ПараметрыФискальнойСтрокиЧека() Экспорт;
	
	ПараметрыСтроки = Новый Структура();
	ПараметрыСтроки.Вставить("ФискальнаяСтрока");  // Тип строки. Исходящий служебный параметр. 
	ПараметрыСтроки.Вставить("НомерСтрокиТовара"); // Необязательно, Дополнительный параметр для обработки строк чека.
	// Обязательные реквизиты
	ПараметрыСтроки.Вставить("Наименование");    // Обязательно, Наименование предмета расчета
	ПараметрыСтроки.Вставить("Количество"     , 0);  // Обязательно, Количество предмета расчета 
	ПараметрыСтроки.Вставить("Цена"           , 0);  // Обязательно, Цена без учета скидок и наценок (Необходимо для ФР и ФФД 1.0)
	ПараметрыСтроки.Вставить("ЦенаСоСкидками" , 0);  // Обязательно, Цена с учета скидок и наценок (Необходимо начиная с ФФД 1.0.5 и выше)
	ПараметрыСтроки.Вставить("Сумма"          , 0);  // Обязательно, Стоимость предмета расчета с учетом скидок и наценок
	ПараметрыСтроки.Вставить("СуммаСкидок");         // Необязательно, Сумма скидок и наценок, не входит в ФФД.
	ПараметрыСтроки.Вставить("СтавкаНДС"      , 0);  // Обязательно, Ставка НДС (Значения: Неопределено-БезНДС, 0, 10, 18, 110, 118)
	ПараметрыСтроки.Вставить("СуммаНДС");            // Необязательно, Сумма НДС
	
	// Реквизиты начиная с ФФД 1.0.5
	// Перечисление - ПризнакиСпособаРасчета - (ФФД, Тег 1214, Расшифровка - таблица 28)
	ПараметрыСтроки.Вставить("ПризнакСпособаРасчета", Неопределено); // Признак способа расчета. Обязательно для ФФД 1.0.5 и выше.
	                                         
	// Реквизиты начиная с ФФД 1.1
	// Перечисление - ПризнакиПредметаРасчета - (ФФД, Тег 1030, Расшифровка - таблица 29)
	ПараметрыСтроки.Вставить("ПризнакПредметаРасчета", Неопределено); // Признак предмета расчета. Обязательно для ФФД 1.1 и выше.
	
	// Перечисление - ПризнакиАгента - (ФФД, Тег 1222, Расшифровка - таблица 21)
	ПараметрыСтроки.Вставить("ПризнакАгентаПоПредметуРасчета");  // Необязательно, Признак агента по предмету расчета, Тег 1222.
	ПараметрыСтроки.Вставить("ДанныеАгента"     , ПараметрыДанныеАгента());     // Структура - Данные агента, Тег 1223. Заполение необязательно.
	ПараметрыСтроки.Вставить("ДанныеПоставщика" , ПараметрыДанныеПоставщика()); // Структура - Данные агента, Тег 1224. Заполение необязательно.
	
	ПараметрыСтроки.Вставить("ЕдиницаИзмерения");         // Необязательно, Единица измерения предмета расчета. 
	ПараметрыСтроки.Вставить("КодТоварнойНоменклатуры");  // Необязательно, Код товарной номенклатуры.
	ПараметрыСтроки.Вставить("ДанныеКодаТоварнойНоменклатуры", ПараметрыДанныеКодаТоварнойНоменклатуры());  // Коды товарной номенклатуры.
	
	// Дополнительные реквизиты не входящие в ФФД.
	ПараметрыСтроки.Вставить("НомерСекции" , 0);   // Необязательно, Номер секции ФР (для совместимости), 0-Значение по умолчанию.
	ПараметрыСтроки.Вставить("Штрихкод");          // Необязательно, Штрихкод
	
	Возврат ПараметрыСтроки; 
	
КонецФункции

// Заполняет структуру параметров текстовой строки для фискализации чека.
//
Функция ПараметрыТекстовойСтрокиЧека(Текст = Неопределено) Экспорт;
	
	ПараметрыСтроки = Новый Структура();
	ПараметрыСтроки.Вставить("ТекстоваяСтрока");       // Тип строки. Исходящий служебный параметр. 
	ПараметрыСтроки.Вставить("Текст", Текст);          // Строка, Обязательно - текстовая строка
	ПараметрыСтроки.Вставить("ПереносСтроки", Ложь);   // Булево - Перенос строки, устанавливается значение по умочанию.  
	ПараметрыСтроки.Вставить("Выравнивание" , "Лево"); // Строка - Выравнивание текста, Значения: "Лево", "Право", "Центр".
	Возврат ПараметрыСтроки; 
	
КонецФункции

// Заполняет структуру параметров штрихкода в строке для фискализации чека.
//
Функция ПараметрыШтрихкодВСтрокеЧека(ТипШтрихкода = Неопределено, ШтрихКод = Неопределено) Экспорт;
	
	ПараметрыСтроки = Новый Структура();
	ПараметрыСтроки.Вставить("ШтрихКод"); // Тип строки. Исходящий служебный параметр. 
	ПараметрыСтроки.Вставить("ТипШтрихкода", ТипШтрихкода); // Тип штрихкода.  
	ПараметрыСтроки.Вставить("ШтрихКод"    , ШтрихКод);
	Возврат ПараметрыСтроки; 
	
КонецФункции

// Заполняет структуру параметров строки оплаты.
//
Функция ПараметрыСтрокиОплаты() Экспорт
	
	ПараметрыСтроки = Новый Структура();
	ПараметрыСтроки.Вставить("ТипОплаты", ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Наличные")); 
	ПараметрыСтроки.Вставить("Сумма"    , 0);
	Возврат ПараметрыСтроки; 
	
КонецФункции

// Заполняет структуру параметров выполнения эквайринговой операции.
//
Функция ПараметрыОперацииЧекаКоррекции() Экспорт;
	
	ПараметрыЧека = Новый Структура();
	
	// Тип расчета - "Перечисление.ТипыРасчетаДенежнымиСредствами"
	ПараметрыЧека.Вставить("ТипРасчета" , ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.РасходДенежныхСредств")); // Обязательно.
	ПараметрыЧека.Вставить("Кассир"     , Неопределено); // Строка,Обязательно   - ФИО лица и должность, осуществившего расчет с покупателем (клиентом), оформившего кассовый чек.
	ПараметрыЧека.Вставить("КассирИНН"  , Неопределено); // Строка,Необязательно - Идентификационный номер налогоплательщика кассира, при наличии.
	// Системы налогообложения - "Перечисление.ТипыСистемНалогообложенияККТ"
	ПараметрыЧека.Вставить("СистемаНалогообложения", ПредопределенноеЗначение("Перечисление.ТипыСистемНалогообложенияККТ.ОСН")); // Обязательно. Заполняется значением по умолчанию.  
	
	ПараметрыЧека.Вставить("НаименованиеОснования");     // Наименование документа основания для коррекции
	ПараметрыЧека.Вставить("ДатаДокументаОснования");    // Дата документа основания для коррекции
	ПараметрыЧека.Вставить("НомерДокументаОснования");   // Номер документа основания для коррекции
	
	ПараметрыЧека.Вставить("Сумма"      , 0); // Сумма расчета, указанного в чеке
	// Реквизиты начиная с ФФД 1.0.5
	ПараметрыЧека.Вставить("ТипКоррекции", 0); // Тип коррекции: 0 - самостоятельно, 1 - по предписанию
	ПараметрыЧека.Вставить("НаличнаяОплата"    , 0); // Сумма наличной оплаты
	ПараметрыЧека.Вставить("ЭлектроннаяОплаты" , 0); // Сумма электронной оплаты
	// Реквизиты начиная с ФФД 1.1
	ПараметрыЧека.Вставить("Предоплатой"       , 0); // Сумма предоплатой (зачетом аванса)
	ПараметрыЧека.Вставить("Постоплатой"       , 0); // Сумма постоплатой (в кредит)
	ПараметрыЧека.Вставить("ВстречнымПредоставлением", 0); // Сумма встречным предоставлением
	
	ПараметрыЧека.Вставить("СуммаБезНДС", 0); // Сумма НДС чека по без НДС
	ПараметрыЧека.Вставить("СуммаНДС0"  , 0); // Сумма НДС чека по ставке 0%
	ПараметрыЧека.Вставить("СуммаНДС10" , 0); // Сумма НДС чека по ставке 10%
	ПараметрыЧека.Вставить("СуммаНДС18" , 0); // Сумма НДС чека по ставке 18%
	ПараметрыЧека.Вставить("СуммаНДС110", 0); // Сумма НДС чека по расч. ставке 10/110
	ПараметрыЧека.Вставить("СуммаНДС118", 0); // Сумма НДС чека по расч. ставке 18/118
	
	Возврат ПараметрыЧека; 
	
КонецФункции

// Заполняет структуру параметров выполнения эквайринговой операции.
//
Функция ПараметрыОперацииАннулированияЧека() Экспорт;
	
	ПараметрыЧека = Новый Структура();
	
	ПараметрыЧека.Вставить("ТипРасчета" , ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств"));
	ПараметрыЧека.Вставить("Кассир"     , Неопределено); // ФИО лица и должность, осуществившего расчет с покупателем (клиентом), оформившего кассовый чек.
	ПараметрыЧека.Вставить("КассирИНН"  , Неопределено); // Идентификационный номер налогоплательщика кассира, при наличии.
	ПараметрыЧека.Вставить("Фискальный" , Истина); 
	
	Возврат ПараметрыЧека; 
	
КонецФункции

// Получить наименование системы налогообложения по коду.
//
Функция ПолучитьНаименованиеСистемыНалогообложения(СистемаНалогообложения, Кратко = Ложь) Экспорт;
	
	СистемыНалогообложения = Новый Соответствие();
	Если Кратко Тогда
		СистемыНалогообложения.Вставить(0, НСтр("ru='ОСН'"));
		СистемыНалогообложения.Вставить(1, НСтр("ru='УСН доход'"));
		СистемыНалогообложения.Вставить(2, НСтр("ru='УСН доход-расход'"));
		СистемыНалогообложения.Вставить(3, НСтр("ru='ЕНВД'"));
		СистемыНалогообложения.Вставить(4, НСтр("ru='ЕСН'"));
		СистемыНалогообложения.Вставить(5, НСтр("ru='Патент'"));
	Иначе
		СистемыНалогообложения.Вставить(0, НСтр("ru='Общая'"));
		СистемыНалогообложения.Вставить(1, НСтр("ru='Упрощенная Доход'"));
		СистемыНалогообложения.Вставить(2, НСтр("ru='Упрощенная Доход минус Расход'"));
		СистемыНалогообложения.Вставить(3, НСтр("ru='Единый налог на вмененный доход'"));
		СистемыНалогообложения.Вставить(4, НСтр("ru='Единый сельскохозяйственный налог'"));
		СистемыНалогообложения.Вставить(5, НСтр("ru='Патентная система налогообложения'"));
	КонецЕсли;
	
	Возврат СистемыНалогообложения.Получить(СистемаНалогообложения);
	
КонецФункции

// Получить наименование признака способа расчета по коду.
//
Функция ПолучитьНаименованиеПризнакаСпособаРасчета(ПризнакСпособаРасчета) Экспорт;
	
	ПризнакиСпособаРасчета = Новый Соответствие();
	ПризнакиСпособаРасчета.Вставить(1, НСтр("ru='ПРЕДОПЛАТА 100%'"));
	ПризнакиСпособаРасчета.Вставить(2, НСтр("ru='ПРЕДОПЛАТА'"));
	ПризнакиСпособаРасчета.Вставить(3, НСтр("ru='АВАНС'"));
	ПризнакиСпособаРасчета.Вставить(4, НСтр("ru='ПОЛНЫЙ РАСЧЕТ'"));
	ПризнакиСпособаРасчета.Вставить(5, НСтр("ru='ЧАСТИЧНЫЙ РАСЧЕТ И КРЕДИТ'"));
	ПризнакиСпособаРасчета.Вставить(6, НСтр("ru='ПЕРЕДАЧА В КРЕДИТ'"));
	ПризнакиСпособаРасчета.Вставить(7, НСтр("ru='ОПЛАТА КРЕДИТА'"));
	Возврат ПризнакиСпособаРасчета.Получить(ПризнакСпособаРасчета);
	
КонецФункции

// Получить наименование признака предмета расчета по коду.
//
Функция ПолучитьНаименованиеПризнакаПредметаРасчета(ПризнакПредметаРасчета) Экспорт;
	
	ПризнакиПредметаРасчета = Новый Соответствие();
	ПризнакиПредметаРасчета.Вставить(1 , НСтр("ru='ТОВАР'"));
	ПризнакиПредметаРасчета.Вставить(2 , НСтр("ru='ПОДАКЦИЗНЫЙ ТОВАР'"));
	ПризнакиПредметаРасчета.Вставить(3 , НСтр("ru='РАБОТА'"));
	ПризнакиПредметаРасчета.Вставить(4 , НСтр("ru='УСЛУГА'"));
	ПризнакиПредметаРасчета.Вставить(5 , НСтр("ru='СТАВКА АЗАРТНОЙ ИГРЫ'"));
	ПризнакиПредметаРасчета.Вставить(6 , НСтр("ru='ВЫИГРЫШ АЗАРТНОЙ ИГРЫ'"));
	ПризнакиПредметаРасчета.Вставить(7 , НСтр("ru='ЛОТЕРЕЙНЫЙ БИЛЕТ'"));
	ПризнакиПредметаРасчета.Вставить(8 , НСтр("ru='ВЫИГРЫШ ЛОТЕРЕИ'"));
	ПризнакиПредметаРасчета.Вставить(9 , НСтр("ru='ПРЕДОСТАВЛЕНИЕ РИД'"));
	ПризнакиПредметаРасчета.Вставить(10, НСтр("ru='ПЛАТЕЖ'"));
	ПризнакиПредметаРасчета.Вставить(11, НСтр("ru='АГЕНТСКОЕ ВОЗНАГРАЖДЕНИЕ'"));
	ПризнакиПредметаРасчета.Вставить(12, НСтр("ru='СОСТАВНОЙ ПРЕДМЕТ РАСЧЕТА'"));
	ПризнакиПредметаРасчета.Вставить(13, НСтр("ru='ИНОЙ ПРЕДМЕТ РАСЧЕТА'"));
	Возврат ПризнакиПредметаРасчета.Получить(ПризнакПредметаРасчета);
	
КонецФункции

// Заполняет структуру параметров открытия и закрытия смены.
//
Функция ПараметрыОткрытияЗакрытияСмены() Экспорт;
	
	ПараметрыОперации = Новый Структура();
	ПараметрыОперации.Вставить("Кассир"     , НСтр("ru='Администратор'")); // ФИО лица и должность, осуществившего операцию.
	ПараметрыОперации.Вставить("КассирИНН"  , Неопределено); // Идентификационный номер налогоплательщика кассира, при наличии.
	Возврат ПараметрыОперации; 
	
КонецФункции

// Заполняет структуру параметров выполнения операции.
//
Функция ПараметрыВыполненияОперации() Экспорт;
	
	ПараметрыОперации = Новый Структура();
	ПараметрыОперации.Вставить("Кассир"     , НСтр("ru='Администратор'")); // ФИО лица и должность, осуществившего операцию.
	ПараметрыОперации.Вставить("КассирИНН"  , Неопределено); // Идентификационный номер налогоплательщика кассира, при наличии.
	Возврат ПараметрыОперации; 
	
КонецФункции

// Функция выполняет проверку сумм фискальных строк,
// осуществляя формато-логический контроль чека.
// Параметры:
//   ОбщиеПараметры - Структура, полученная ранее методом МенеджерОборудованияКлиентСервер.ПараметрыОперацииФискализацииЧека,
//                    и заполненная данными чека.
//                    Содержит параметры для контроля:
//                      СпособФорматоЛогическогоКонтроля - ПеречислениеСсылка.СпособыФорматоЛогическогоКонтроля - если не заполнена,
//                                                         то контроль не выполняется,
//                      ДопустимоеРасхождениеФорматоЛогическогоКонтроля - Число - по умолчанию установленное 54-ФЗ отклонение - 0.01,
//
//   ПодключаемоеОборудование - СправочникСсылка.ПодключаемоеОборудования - не обязательный.
//                              Если заполнено оборудование и не заполнен способ контроля в общих параметрах,
//                              то способ контроля и допустимое расхождение получаются из подключаемого оборудования.
// Функция переопределяется методом МенеджерОборудованияКлиентСерверПереопределяемый.ПровестиФорматоЛогическийКонтроль
Процедура ПровестиФорматоЛогическийКонтроль(ОбщиеПараметры, ПодключаемоеОборудование = Неопределено) Экспорт
	
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияКлиентСерверПереопределяемый.ПровестиФорматоЛогическийКонтроль(ОбщиеПараметры, СтандартнаяОбработка, ПодключаемоеОборудование);
	Если СтандартнаяОбработка Тогда
		СпособФорматоЛогическогоКонтроля = ОбщиеПараметры.СпособФорматоЛогическогоКонтроля;
		ДопустимоеРасхождение = ОбщиеПараметры.ДопустимоеРасхождениеФорматоЛогическогоКонтроля;
		Если СпособФорматоЛогическогоКонтроля = Неопределено Тогда
			Если ПодключаемоеОборудование <> Неопределено Тогда
				РеквизитыОборудования  = МенеджерОборудованияВызовСервера.РеквизитыДляФорматоЛолгическогоКонтроля(ПодключаемоеОборудование);
				СпособФорматоЛогическогоКонтроля = РеквизитыОборудования.СпособФорматоЛогическогоКонтроля;
				ДопустимоеРасхождение = РеквизитыОборудования.ДопустимоеРасхождениеФорматоЛогическогоКонтроля;
			КонецЕсли;
		КонецЕсли;
		Если (НЕ ЗначениеЗаполнено(СпособФорматоЛогическогоКонтроля))
			ИЛИ СпособФорматоЛогическогоКонтроля = ПредопределенноеЗначение("Перечисление.СпособыФорматоЛогическогоКонтроля.НеКонтролировать") Тогда
			Возврат;
		КонецЕсли;
		Если ДопустимоеРасхождение = Неопределено Тогда
			ДопустимоеРасхождение = 0.01;
		КонецЕсли;
		
		Если ОбщиеПараметры.ПозицииЧека <> Неопределено Тогда
			ГраницаНачальногоМассива = ОбщиеПараметры.ПозицииЧека.Количество() - 1;
			НовыеПозицииЧека = Новый Массив;
			Если СпособФорматоЛогическогоКонтроля = ПредопределенноеЗначение("Перечисление.СпособыФорматоЛогическогоКонтроля.ЗачитыватьСуммы") Тогда
				
				СтрокиПоложительные = Новый Массив;
				СтрокиОтрицательные = Новый Массив;
				СтрокаПоследнегоТовара = 0;
				
				Для ИндексМассива = 0 По ГраницаНачальногоМассива Цикл
					ТекущаяПозиция = ОбщиеПараметры.ПозицииЧека[ИндексМассива];
					Если ТекущаяПозиция.Свойство("ФискальнаяСтрока") Тогда
						СтрокаПоследнегоТовара = ТекущаяПозиция.НомерСтрокиТовара;
						Наименование = ТекущаяПозиция.Наименование;
						Количество = ?(ТекущаяПозиция.Количество = 0, 1, ТекущаяПозиция.Количество);
						Если Количество = 1 Тогда
							НоваяПозиция = СкопироватьСтруктуру(ТекущаяПозиция);
							НоваяПозиция.ЦенаСоСкидками = НоваяПозиция.Сумма;
							НоваяПозиция.Вставить("СтрокаПоследнегоТовара", СтрокаПоследнегоТовара);
							НовыеПозицииЧека.Добавить(НоваяПозиция);
							Продолжить;
						КонецЕсли;
						Сумма = ТекущаяПозиция.Сумма;
						НомерСекции = ТекущаяПозиция.НомерСекции;
						СтавкаНДС = ТекущаяПозиция.СтавкаНДС;
						// Получаем расчетную цену с учетом скидок делением входящей суммы на входящее количество.
						РасчетнаяЦена = Окр(Сумма / Количество, 2, 1);
						// Здесь и далее все цены и суммы округляем до 2 знаков после запятой, количества - до 3 знаков.
						// Умножаем входящее количество  на расчетную цену и получаем новую промежуточную сумму.
						НоваяСумма = Окр(Количество * РасчетнаяЦена, 2, 1);
						// Вычисляем разницу между промежуточной и входящей суммой.
						РазницаСумм = НоваяСумма - Сумма;
						НоваяПозиция = СкопироватьСтруктуру(ТекущаяПозиция);
						НоваяПозиция.ЦенаСоСкидками = РасчетнаяЦена;
						НоваяПозиция.Вставить("РасчетнаяЦена", РасчетнаяЦена);
						НоваяПозиция.Вставить("РазницаСумм", РазницаСумм);
						НоваяПозиция.Вставить("СтрокаПоследнегоТовара", СтрокаПоследнегоТовара);
						Если РазницаСумм >= -ДопустимоеРасхождение И РазницаСумм <= ДопустимоеРасхождение Тогда
							// Если разница допустима - оставляем одну строку.
							НовыеПозицииЧека.Добавить(НоваяПозиция);
							Продолжить;
						ИначеЕсли РазницаСумм > 0 Тогда
							//Если разница есть, то строку с  положительной разницей добавляем в массив положительных строк.
							СтрокиПоложительные.Добавить(НоваяПозиция);
						Иначе
							//Если разница есть, то строку с  отрицательной разницей добавляем в массив отрицательных строк.
							НоваяПозиция.РазницаСумм = -РазницаСумм;
							СтрокиОтрицательные.Добавить(НоваяПозиция);
						КонецЕсли;
					Иначе
						НоваяПозиция = СкопироватьСтруктуру(ТекущаяПозиция);
						Если СтрокаПоследнегоТовара = 0 Тогда
							НоваяПозиция.Вставить("СтрокаПоследнегоТовара", 0);
						Иначе
							НоваяПозиция.Вставить("СтрокаПоследнегоТовара", 99999);
						КонецЕсли;
						НовыеПозицииЧека.Добавить(НоваяПозиция);
					КонецЕсли;
				КонецЦикла;
				
				ИндексПоложительных = СтрокиПоложительные.ВГраница();
				ИндексОтрицательных = СтрокиОтрицательные.ВГраница();
				Если ИндексПоложительных >= 0 И ИндексОтрицательных >= 0 Тогда
					// В массиве положительных и отрицательных.
					// Находим строки с совпадающей по модулю сумой расхождения.
					// Строки идут одна к одному.
					СдвигПоложительного = 0;
					Для СчетикПоложительный = 0 По ИндексПоложительных Цикл
						ПоложительнаяСтрока = СтрокиПоложительные[СчетикПоложительный - СдвигПоложительного];
						СдвигОтрицательного = 0;
						ИндексОтрицательных = СтрокиОтрицательные.ВГраница();
						Для СчетикОтрицательный = 0 По ИндексОтрицательных Цикл
							ОтрицательнаяСтрока = СтрокиОтрицательные[СчетикОтрицательный - СдвигОтрицательного];
							Если ПоложительнаяСтрока.РазницаСумм = ОтрицательнаяСтрока.РазницаСумм Тогда
								// Перекрываем разницу по совпадающим строкам из одного массива суммами другого.
								// Увеличивая сумму в положительной строке и уменьшая в отрицательной.
								ПоложительнаяСтрока.Сумма =  ПоложительнаяСтрока.Сумма + ПоложительнаяСтрока.РазницаСумм;
								ОтрицательнаяСтрока.Сумма =  ОтрицательнаяСтрока.Сумма - ПоложительнаяСтрока.РазницаСумм;
								
								// Перекрытые строки переносим в массив для печати и удаляем из массивов.
								НоваяПозиция = СкопироватьСтруктуру(ПоложительнаяСтрока);
								НовыеПозицииЧека.Добавить(НоваяПозиция);
								
								НоваяПозиция = СкопироватьСтруктуру(ОтрицательнаяСтрока);
								НовыеПозицииЧека.Добавить(НоваяПозиция);
								
								СтрокиПоложительные.Удалить(СчетикПоложительный - СдвигПоложительного);
								СтрокиОтрицательные.Удалить(СчетикОтрицательный - СдвигОтрицательного);
								
								СдвигПоложительного = СдвигПоложительного + 1;
								СдвигОтрицательного = СдвигОтрицательного + 1;
								Прервать;
							КонецЕсли;
						КонецЦикла;
						
						Если ИндексПоложительных < 0 Тогда
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
				КонецЕсли;
				
				ИндексПоложительных = СтрокиПоложительные.ВГраница();
				ИндексОтрицательных = СтрокиОтрицательные.ВГраница();
				Если ИндексПоложительных >= 0 И ИндексОтрицательных >= 0 Тогда
					// Обходим строки положительного массива.
					// Увеличивая сумму в каждой из них на сумму расхождения.
					// Которую распределяем по строкам с отрицательным расхождением, уменьшая сумму там.
					СдвигПоложительного = 0;
					Для СчетикПоложительный = 0 По ИндексПоложительных Цикл
						ПоложительнаяСтрока = СтрокиПоложительные[СчетикПоложительный - СдвигПоложительного];
						Если ПоложительнаяСтрока.РазницаСумм <= ДопустимоеРасхождение Тогда
							// Разница сумм в строке всегда по модулю.
							Продолжить;
						КонецЕсли;
						СдвигОтрицательного = 0;
						ИндексОтрицательных = СтрокиОтрицательные.ВГраница();
						Для СчетикОтрицательный = 0 По ИндексОтрицательных Цикл
							ОтрицательнаяСтрока = СтрокиОтрицательные[СчетикОтрицательный - СдвигОтрицательного];
							Если ОтрицательнаяСтрока.РазницаСумм <= ДопустимоеРасхождение
								И ОтрицательнаяСтрока.РазницаСумм <> ПоложительнаяСтрока.РазницаСумм Тогда
								// Разница сумм в строке всегда по модулю.
								Продолжить;
							КонецЕсли;
							// Перекрываем разницу по совпадающим строкам из одного массива суммами другого.
							// Увеличивая сумму в положительной строке и уменьшая в отрицательной.
							
							Если ПоложительнаяСтрока.РазницаСумм > ОтрицательнаяСтрока.РазницаСумм Тогда
								ПоложительнаяСтрока.Сумма =  ПоложительнаяСтрока.Сумма + ОтрицательнаяСтрока.РазницаСумм;
								ОтрицательнаяСтрока.Сумма =  ОтрицательнаяСтрока.Сумма - ОтрицательнаяСтрока.РазницаСумм;
								// Уменьшаем остаток разницы положительной строки
								ПоложительнаяСтрока.РазницаСумм = ПоложительнаяСтрока.РазницаСумм - ОтрицательнаяСтрока.РазницаСумм;
								// Перекрытую строку переносим в массив для печати.
								
								НоваяПозиция = СкопироватьСтруктуру(ОтрицательнаяСтрока);
								НовыеПозицииЧека.Добавить(НоваяПозиция);
								
								// И удаляем из массивов.
								СтрокиОтрицательные.Удалить(СчетикОтрицательный - СдвигОтрицательного);
								// Сдвигаем отрицательные счетчики
								СдвигОтрицательного = СдвигОтрицательного + 1;
								
							Иначе
								
								НадоУдалятьОтрицательные = ПоложительнаяСтрока.РазницаСумм = ОтрицательнаяСтрока.РазницаСумм;
								
								ПоложительнаяСтрока.Сумма =  ПоложительнаяСтрока.Сумма + ПоложительнаяСтрока.РазницаСумм;
								ОтрицательнаяСтрока.Сумма =  ОтрицательнаяСтрока.Сумма - ПоложительнаяСтрока.РазницаСумм;
								// Уменьшаем остаток разницы положительной строки
								ОтрицательнаяСтрока.РазницаСумм = ОтрицательнаяСтрока.РазницаСумм - ПоложительнаяСтрока.РазницаСумм;
								// Перекрытую строку переносим в массив для печати.
								
								НоваяПозиция = СкопироватьСтруктуру(ПоложительнаяСтрока);
								НовыеПозицииЧека.Добавить(НоваяПозиция);
								Если НадоУдалятьОтрицательные Тогда
									НоваяПозиция = СкопироватьСтруктуру(ОтрицательнаяСтрока);
									НовыеПозицииЧека.Добавить(НоваяПозиция);
								КонецЕсли;
								
								// И удаляем из массивов.
								СтрокиПоложительные.Удалить(СчетикПоложительный - СдвигПоложительного);
								// Сдвигаем положительные счетчики
								СдвигПоложительного = СдвигПоложительного + 1;
								
								Если НадоУдалятьОтрицательные Тогда
									// И удаляем из массивов.
									СтрокиОтрицательные.Удалить(СчетикОтрицательный - СдвигОтрицательного);
									// Сдвигаем отрицательные счетчики
									СдвигОтрицательного = СдвигОтрицательного + 1;
								КонецЕсли;
								
								// Отрицательный цикл прерываем.
								// Ибо закрывать текущую строку придется следующей положительной.
								// Если она есть.
								Прервать;
							КонецЕсли;
						КонецЦикла;
						
						Если ИндексПоложительных < 0 Тогда
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
				КонецЕсли;
				
				ИндексПоложительных = СтрокиПоложительные.ВГраница();
				// Оставшиеся строки обоих массивов разделяются.
				// Каждая на две по первому алгоритму и добавляются в массив для печати.
				Если ИндексПоложительных >= 0 Тогда
					Для Каждого ТекущаяПозиция Из СтрокиПоложительные Цикл
						// Еще раз пересчитываем разницу
						// Получаем расчетную цену с учетом скидок делением входящей суммы на входящее количество.
						РасчетнаяЦена = Окр(ТекущаяПозиция.Сумма / ТекущаяПозиция.Количество, 2, 1);
						// Здесь и далее все цены и суммы округляем до 2 знаков после запятой, количества - до 3 знаков.
						// Умножаем входящее количество  на расчетную цену и получаем новую промежуточную сумму.
						НоваяСумма = Окр(ТекущаяПозиция.Количество * РасчетнаяЦена, 2, 1);
						// Вычисляем разницу между промежуточной и входящей суммой.
						РазницаСумм = НоваяСумма - ТекущаяПозиция.Сумма;
						Если РазницаСумм >= -ДопустимоеРасхождение И РазницаСумм <= ДопустимоеРасхождение Тогда
							// Если разница допустима - оставляем одну строку.
							НовыеПозицииЧека.Добавить(ТекущаяПозиция);
						Иначе
							// Разделяем строку.
							РазделитьФискальнуюСтроку(ТекущаяПозиция, НовыеПозицииЧека, РасчетнаяЦена, РазницаСумм);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				ИндексОтрицательных = СтрокиОтрицательные.ВГраница();
				Если ИндексОтрицательных >= 0 Тогда
					Для Каждого ТекущаяПозиция Из СтрокиОтрицательные Цикл
						// Еще раз пересчитываем разницу
						// Получаем расчетную цену с учетом скидок делением входящей суммы на входящее количество.
						РасчетнаяЦена = Окр(ТекущаяПозиция.Сумма / ТекущаяПозиция.Количество, 2, 1);
						// Здесь и далее все цены и суммы округляем до 2 знаков после запятой, количества - до 3 знаков.
						// Умножаем входящее количество  на расчетную цену и получаем новую промежуточную сумму.
						НоваяСумма = Окр(ТекущаяПозиция.Количество * РасчетнаяЦена, 2, 1);
						// Вычисляем разницу между промежуточной и входящей суммой.
						РазницаСумм = НоваяСумма - ТекущаяПозиция.Сумма;
						Если РазницаСумм >= -ДопустимоеРасхождение И РазницаСумм <= ДопустимоеРасхождение Тогда
							// Если разница допустима - оставляем одну строку.
							НоваяПозиция = СкопироватьСтруктуру(ТекущаяПозиция);
							НоваяПозиция.ЦенаСоСкидками = РасчетнаяЦена;
							НовыеПозицииЧека.Добавить(НоваяПозиция);
						Иначе
							// Разделяем строку.
							РазделитьФискальнуюСтроку(ТекущаяПозиция, НовыеПозицииЧека, РасчетнаяЦена, РазницаСумм);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				// Массив для печати сортируется по первоначальному номеру строки.
				СортироватьМассивФискальныхСтрок(НовыеПозицииЧека);
				
			Иначе
				Для ИндексМассива = 0 По ГраницаНачальногоМассива Цикл
					ТекущаяПозиция = ОбщиеПараметры.ПозицииЧека[ИндексМассива];
					Если ТекущаяПозиция.Свойство("ФискальнаяСтрока") Тогда
						Наименование = ТекущаяПозиция.Наименование;
						Количество = ?(ТекущаяПозиция.Количество = 0, 1, ТекущаяПозиция.Количество);
						Если Количество = 1 Тогда
							НоваяПозиция = СкопироватьСтруктуру(ТекущаяПозиция);
							НоваяПозиция.ЦенаСоСкидками = НоваяПозиция.Сумма;
							НовыеПозицииЧека.Добавить(НоваяПозиция);
							Продолжить;
						КонецЕсли;
						Сумма = ТекущаяПозиция.Сумма;
						НомерСекции = ТекущаяПозиция.НомерСекции;
						СтавкаНДС = ТекущаяПозиция.СтавкаНДС;
						// Получаем расчетную цену с учетом скидок делением входящей суммы на входящее количество.
						РасчетнаяЦена = Окр(Сумма / Количество, 2, 1);
						// Здесь и далее все цены и суммы округляем до 2 знаков после запятой, количества - до 3 знаков.
						// Умножаем входящее количество  на расчетную цену и получаем новую промежуточную сумму.
						НоваяСумма = Окр(Количество * РасчетнаяЦена, 2, 1);
						// Вычисляем разницу между промежуточной и входящей суммой.
						РазницаСумм = НоваяСумма - Сумма;
						Если РазницаСумм >= -ДопустимоеРасхождение И РазницаСумм <= ДопустимоеРасхождение Тогда
							// Если разница допустима - оставляем одну строку.
							// Если разницы нет - оставляем одну строку.
							НоваяПозиция = СкопироватьСтруктуру(ТекущаяПозиция);
							НоваяПозиция.ЦенаСоСкидками = РасчетнаяЦена;
							НовыеПозицииЧека.Добавить(НоваяПозиция);
							Продолжить;
						Иначе
							// Разделяем строку.
							РазделитьФискальнуюСтроку(ТекущаяПозиция, НовыеПозицииЧека, РасчетнаяЦена, РазницаСумм);
						КонецЕсли;
						
					Иначе
						НоваяПозиция = СкопироватьСтруктуру(ТекущаяПозиция);
						НовыеПозицииЧека.Добавить(НоваяПозиция);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			ОбщиеПараметры.ПозицииЧека = НовыеПозицииЧека;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Скопировать cтруктуру.
//
Функция СкопироватьСтруктуру(ТекущаяПозиция) Экспорт
	
	НоваяПозиция = Новый Структура;
	Для Каждого ЭлементСтруктуры Из ТекущаяПозиция Цикл
		НоваяПозиция.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
	КонецЦикла;
	
	Возврат НоваяПозиция;
	
КонецФункции

// Функция выполняет разделение фискальной строки.
// 
Процедура РазделитьФискальнуюСтроку(ТекущаяПозиция, НовыеПозицииЧека, РасчетнаяЦена, РазницаСумм) Экспорт
	
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияКлиентСерверПереопределяемый.РазделитьФискальнуюСтроку(ТекущаяПозиция, НовыеПозицииЧека, РасчетнаяЦена, РазницаСумм, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		// Запоминаем начальные значения.
		КоличествоНачальное = ТекущаяПозиция.Количество;
		СуммаСкидокНачальная = ТекущаяПозиция.СуммаСкидок;
		СуммаНДСНачальная = ТекущаяПозиция.СуммаНДС; // Рассчитывается формально, т.к. сумма НДС текущими драйверами игнорируется.
		
		// Если разница есть, то ее делим на копейку.
		// Получаем количество, которое нужно переоценить.
		КоличествоПереоценки = Окр(РазницаСумм / 0.01, 3, 1);
		Если КоличествоПереоценки < 0 Тогда
			КоличествоПереоценки = -КоличествоПереоценки;
		КонецЕсли;
		// Цена переоценки во всех примерах отличается от расчетной на 1 копейку.
		// В  большую или меньшую сторону в зависимости от знака разницы - зависимость обратная.
		ЦенаПереоценки = РасчетнаяЦена - Окр(РазницаСумм / КоличествоПереоценки, 2, 1);
		// Распределяем суммы скидок и НДС пропорционально количеству.
		// Если суммы есть. А если их нет, то должно остаться Неопределено.
		Если СуммаСкидокНачальная <> Неопределено Тогда
			СуммаСкидокПереоценки = Окр(СуммаСкидокНачальная * КоличествоПереоценки / КоличествоНачальное, 2, 1);
		КонецЕсли;
		Если СуммаНДСНачальная <> Неопределено Тогда
			СуммаНДСПереоценки = Окр(СуммаНДСНачальная * КоличествоПереоценки / КоличествоНачальное, 2, 1);
		КонецЕсли;
		
		// Из начального количества отнимаем количество переоценки.
		// Получаем количество, которое остается по расчетной цене.
		Количество = ТекущаяПозиция.Количество - КоличествоПереоценки;
		
		// Выводим вместо первоначальной строки две новых.
		// Сначала с расчетной ценой и остатком количества.
		// И суммой - произведение цены и количества.
		НоваяПозиция = СкопироватьСтруктуру(ТекущаяПозиция);
		НоваяПозиция.Количество = Количество;
		НоваяПозиция.ЦенаСоСкидками = РасчетнаяЦена;
		НоваяПозиция.Сумма = Окр(Количество * РасчетнаяЦена, 2, 1);
		Если СуммаСкидокНачальная <> Неопределено Тогда
			НоваяПозиция.СуммаСкидок = СуммаСкидокНачальная - СуммаСкидокПереоценки;
		КонецЕсли;
		Если СуммаНДСНачальная <> Неопределено Тогда
			НоваяПозиция.СуммаНДС = СуммаНДСНачальная - СуммаНДСПереоценки;
		КонецЕсли;
		НовыеПозицииЧека.Добавить(НоваяПозиция);
		
		// Потом с переоцененной ценой и переоцененным количеством.
		// И суммой - произведение цены и количества.
		НоваяПозиция = СкопироватьСтруктуру(ТекущаяПозиция);
		НоваяПозиция.Количество = КоличествоПереоценки;
		НоваяПозиция.ЦенаСоСкидками = ЦенаПереоценки;
		НоваяПозиция.Сумма = Окр(КоличествоПереоценки * ЦенаПереоценки, 2, 1);
		Если СуммаСкидокНачальная <> Неопределено Тогда
			НоваяПозиция.СуммаСкидок = СуммаСкидокПереоценки;
		КонецЕсли;
		Если СуммаНДСНачальная <> Неопределено Тогда
			НоваяПозиция.СуммаНДС = СуммаНДСПереоценки;
		КонецЕсли;
		НовыеПозицииЧека.Добавить(НоваяПозиция);
	КонецЕсли;
	
КонецПроцедуры

// Функция сортирует массив фискальных строк
//
Процедура СортироватьМассивФискальныхСтрок(МассивФискальныхСтрок, ИмяРеквизита = "СтрокаПоследнегоТовара") Экспорт
	
	МаксимальныйИндекс = МассивФискальныхСтрок.ВГраница();
	Если МаксимальныйИндекс >= 0 Тогда
		// Начинаем со второго элемента.
		Для ТекущийИндекс = 1 По МаксимальныйИндекс Цикл
			ТекущаяСтрока = МассивФискальныхСтрок[ТекущийИндекс];
			НоваяТекущаяСтрока = СкопироватьСтруктуру(ТекущаяСтрока);
			НовыйИндексТекущейСтроки = -1;
			Для ОбратныйСчетчик = 1 По ТекущийИндекс Цикл
				ПредыдущаяСтрока = МассивФискальныхСтрок[ТекущийИндекс - ОбратныйСчетчик];
				Если ПредыдущаяСтрока[ИмяРеквизита] > ТекущаяСтрока[ИмяРеквизита] Тогда
					НоваяПредыдущаяСтрока = СкопироватьСтруктуру(ПредыдущаяСтрока);
					
					НовыйИндексТекущейСтроки = ТекущийИндекс - ОбратныйСчетчик;
					МассивФискальныхСтрок.Удалить(НовыйИндексТекущейСтроки + 1);
					МассивФискальныхСтрок.Вставить(НовыйИндексТекущейСтроки + 1, НоваяПредыдущаяСтрока);
				Иначе
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если НовыйИндексТекущейСтроки >=0 Тогда
				МассивФискальныхСтрок.Удалить(НовыйИндексТекущейСтроки);
				МассивФискальныхСтрок.Вставить(НовыйИндексТекущейСтроки, НоваяТекущаяСтрока);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Функция выполняет проверку сумм фискальных строк,
// осуществляя формато-логический контроль чека.
//
Функция НуженФорматоЛогическийКонтроль(ОбщиеПараметры) Экспорт
	
	СтандартнаяОбработка = Истина;
	ПереопределяемыйРезультат = МенеджерОборудованияКлиентСерверПереопределяемый.НуженФорматоЛогическийКонтроль(ОбщиеПараметры, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		СпособФорматоЛогическогоКонтроля = Неопределено;
		ОбщиеПараметры.Свойство("СпособФорматоЛогическогоКонтроля", СпособФорматоЛогическогоКонтроля);
		Если (НЕ ЗначениеЗаполнено(СпособФорматоЛогическогоКонтроля))
			ИЛИ СпособФорматоЛогическогоКонтроля = ПредопределенноеЗначение("Перечисление.СпособыФорматоЛогическогоКонтроля.НеКонтролировать") Тогда
			Возврат Ложь;
		КонецЕсли;
		ДопустимоеРасхождение = 0.01; // В соответствии с текущей версией 54-ФЗ
		Если ОбщиеПараметры.Свойство("ДопустимоеРасхождениеФорматоЛогическогоКонтроля") Тогда
			ДопустимоеРасхождение = ОбщиеПараметры.ДопустимоеРасхождениеФорматоЛогическогоКонтроля;
		КонецЕсли;
		
		Если ОбщиеПараметры.ПозицииЧека <> Неопределено Тогда
			ГраницаНачальногоМассива = ОбщиеПараметры.ПозицииЧека.Количество() - 1;
			Для ИндексМассива = 0 По ГраницаНачальногоМассива Цикл
				ТекущаяПозиция = ОбщиеПараметры.ПозицииЧека[ИндексМассива];
				Если ТекущаяПозиция.Свойство("ФискальнаяСтрока") Тогда
					Количество = ?(ТекущаяПозиция.Количество = 0, 1, ТекущаяПозиция.Количество);
					Если Количество = 1 Тогда
						Если ТекущаяПозиция.ЦенаСоСкидками <> ТекущаяПозиция.Сумма Тогда
							Возврат Истина;
						КонецЕсли;
					Иначе
						Сумма = ТекущаяПозиция.Сумма;
						// Получаем расчетную цену с учетом скидок делением входящей суммы на входящее количество.
						РасчетнаяЦена = Окр(Сумма / Количество, 2, 1);
						// Здесь и далее все цены и суммы округляем до 2 знаков после запятой, количества - до 3 знаков.
						// Умножаем входящее количество  на расчетную цену и получаем новую промежуточную сумму.
						НоваяСумма = Окр(Количество * РасчетнаяЦена, 2, 1);
						// Вычисляем разницу между промежуточной и входящей суммой.
						РазницаСумм = НоваяСумма - Сумма;
						Если РазницаСумм >= -ДопустимоеРасхождение И РазницаСумм <= ДопустимоеРасхождение Тогда
							// Если разница допустима - оставляем одну строку.
							// Если разницы нет - оставляем одну строку.
							Если ТекущаяПозиция.ЦенаСоСкидками <> РасчетнаяЦена Тогда
								// Но. Если цена не совпадает - все равно надо ее пересчитывать.
								Возврат Истина;
							КонецЕсли;
						Иначе
							// Надо разделять строку.
							Возврат Истина;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	Иначе
		Возврат ПереопределяемыйРезультат;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область ВспомогательныеПроцедурыИФункции

// Выстраивает строку по длине поля, если поле длинное - переносит на следующую строку.
//
Функция ПостроитьПолеПереносом(Знач Текст, Знач ДлинаПоля, ДобСимвол = "", ПоЦентру = Ложь) Экспорт
	
	ДобСимвол = ?(ПустаяСтрока(ДобСимвол), " ", ДобСимвол);
	
	Если СтрДлина(Текст) > ДлинаПоля Тогда 
		ТекстПолный = "";
		Пока СтрДлина(Текст) > ДлинаПоля Цикл
			ТекстПолный = ТекстПолный + ?(ПустаяСтрока(ТекстПолный), "", Символы.ПС) +  Лев(Текст, ДлинаПоля);
			Текст = Сред(Текст, ДлинаПоля + 1);
		КонецЦикла;
		ТекстПолный = ТекстПолный + ?(ПустаяСтрока(Текст), "", Символы.ПС + Текст);
	Иначе
		Если ПоЦентру Тогда
			ТекстПолный = Текст;
			ДобавлятьСправа = Истина; 
			Пока СтрДлина(ТекстПолный) < ДлинаПоля Цикл
				Если ДобавлятьСправа Тогда
					ТекстПолный = ТекстПолный + ДобСимвол;
				Иначе
					ТекстПолный = ДобСимвол + ТекстПолный;
				КонецЕсли;
				ДобавлятьСправа = Не ДобавлятьСправа;
			КонецЦикла;
		Иначе
			ТекстПолный = Текст;
		КонецЕсли;
	КонецЕсли;
		
	Возврат ТекстПолный;
	
КонецФункции

// Обрезает передаваемую строку по длине поля, если поле слишком короткое - дополняет символами.
//
Функция ПостроитьПоле(Знач Текст, Знач ДлинаПоля, ДобСимвол = "", ДобавлятьСправа = Истина) Экспорт
	
	ДобСимвол = ?(ПустаяСтрока(ДобСимвол), " ", ДобСимвол);
	
	ТекстПолный = Лев(Текст, ДлинаПоля);
	Пока СтрДлина(ТекстПолный) < ДлинаПоля Цикл
		Если ДобавлятьСправа Тогда
			ТекстПолный = ТекстПолный + ДобСимвол;
		Иначе
			ТекстПолный = ДобСимвол + ТекстПолный;
		КонецЕсли;
	КонецЦикла;
	          
	Возврат ТекстПолный;
	
КонецФункции

// Формирует строку из двух полей, если передается одно поле дополняет символами до нужного размера.
//
Функция ВыстроитьПоля(Знач Текст1, Знач Текст2 = "", Знач ДлинаПоля) Экспорт
	
	Если ПустаяСтрока(Текст2) Тогда
		ТекстПолный = ПостроитьПоле(Текст1, СтрДлина(Текст1) + Цел((ДлинаПоля - СтрДлина(Текст1))/2), , Ложь);
		ТекстПолный = ПостроитьПоле(ТекстПолный, ДлинаПоля);
	ИначеЕсли СтрДлина(Текст1) + СтрДлина(Текст2) < ДлинаПоля Тогда
		ТекстПолный = ПостроитьПоле(Текст1, ДлинаПоля - СтрДлина(Текст2)) + Текст2;
	Иначе
		ТекстПолный = ПостроитьПоле(Текст1, ДлинаПоля) + Символы.ПС + ПостроитьПоле(Текст2, ДлинаПоля, ,Ложь)
	КонецЕсли;
	
	Возврат ТекстПолный;
	
КонецФункции

//  Выравнить передаваемую строку по длине поля, если поле слишком короткое - дополняет символами.
//
Функция ВыравнитьПоле(Знач Текст, Знач ДлинаПоля = 32, Знач Выравнивание = "Лево", ДобСимвол = "") Экспорт
	
	ДобСимвол = ?(ПустаяСтрока(ДобСимвол), " ", ДобСимвол);
	НачПозиция = Истина;
	ТекстПолный = Лев(Текст, ДлинаПоля);
	Пока СтрДлина(ТекстПолный) < ДлинаПоля Цикл
		Если Выравнивание = "Лево" Тогда
			ТекстПолный = ТекстПолный + ДобСимвол;
		ИначеЕсли Выравнивание = "Право" Тогда
			ТекстПолный = ДобСимвол + ТекстПолный;
		Иначе
			Если НачПозиция Тогда
				ТекстПолный = ТекстПолный + ДобСимвол;
				НачПозиция = Ложь;
			Иначе
				ТекстПолный = ДобСимвол + ТекстПолный;
				НачПозиция = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	          
	Возврат ТекстПолный;
	
КонецФункции

Функция ДобавитьЛидирующиеНули(Знач Строка, Знач ДлиннаСтроки) 
	
	ТекстПолный = Строка;
	Пока СтрДлина(ТекстПолный) < ДлиннаСтроки Цикл
		ТекстПолный = "0" + ТекстПолный;
	КонецЦикла;
	          
	Возврат ТекстПолный;
	
КонецФункции

Функция ОпределитьКоличествоПакетов(РазмерПакета, КоличествоЭлементов)
	
	Если РазмерПакета = 0 Тогда
		КоличествоПакетов = 1;
	Иначе
		// Определяем количество полных пакетов.
		КоличествоПолныхПакетов = Цел(КоличествоЭлементов/РазмерПакета);
		//	Если количество элементов на пакет больше чем определенное количество пакетов, добавляем один неполный пакет.
		КоличествоПакетов = КоличествоПолныхПакетов + ?((КоличествоЭлементов/РазмерПакета)-КоличествоПолныхПакетов>0, 1, 0);
	КонецЕсли;
	
	Возврат КоличествоПакетов;
	
КонецФункции

// Определяет необходимость выполнения серверного события ПослеВыполненияКомандыФискальнымУстройством.
//
Функция ТребуетсяВызовСобытияПослеВыполненияКомандыФискальнымУстройством(Контекст) Экспорт
	
	Если Не КомандыРаботыСоСменами().Найти(Контекст.ВыполняемаяКоманда) = Неопределено Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Возвращает массив команд работы с кассовой сменой.
//
Функция КомандыРаботыСоСменами()
	
	МассивРезультат = Новый Массив();
	
	//МассивРезультат.Добавить("ReportCurrentStatusOfSettlements");
	МассивРезультат.Добавить("OpenShift");
	МассивРезультат.Добавить("CloseShift");
	
	Возврат МассивРезультат;
	
КонецФункции

// Заполняет структуру параметров состояния ККТ.
//
Функция ПараметрыСостоянияККТ() Экспорт;
	
	Параметры = Новый Структура();
	Параметры.Вставить("КоличествоНепереданныхФД"   , Неопределено); // Количество непереданных документов (BacklogDocumentsCounter).
	Параметры.Вставить("НомерПервогоНепереданногоФД", Неопределено);  // Номер первого непереданного документа (BacklogDocumentFirstNumber). 
	Параметры.Вставить("ДатаПервогоНепереданногоФД ", Неопределено); // Дата и время первого из непереданных документов (BacklogDocumentFirstDateTime).
	
	Возврат Параметры; 
	
КонецФункции

// Заполняет структуру параметров нормализуемых фискальных данных.
//
Функция ПараметрыНормализуемыхФискальныхДанных() Экспорт
	
	СтруктураРезультат = Новый Структура();
	СтруктураРезультат.Вставить("ДатаСменыККТ"   , Неопределено);
	СтруктураРезультат.Вставить("НомерСменыККТ"  , Неопределено);
	СтруктураРезультат.Вставить("КоличествоЧеков", Неопределено); // Количество кассовых чеков за смену (NumberOfChecks).
	СтруктураРезультат.Вставить("КоличествоФД"   , Неопределено); // Количество общее ФД за смену (NumberOfDocuments).
	
	СтруктураРезультат.Вставить("КоличествоНепереданныхФД"   , Неопределено); // Количество непереданных документов (BacklogDocumentsCounter).
	СтруктураРезультат.Вставить("НомерПервогоНепереданногоФД", Неопределено); // Номер первого непереданного документа (BacklogDocumentFirstNumber). 
	СтруктураРезультат.Вставить("ДатаПервогоНепереданногоФД ", Неопределено); // Дата и время первого из непереданных документов (BacklogDocumentFirstDateTime).

	СтруктураРезультат.Вставить("ПревышеноВремяОжиданияОтветаОФД");// OFDTimeout  
	СтруктураРезультат.Вставить("НеобходимаСтрочнаяЗаменаФН");     // Признак необходимости срочной замены ФН (UrgentReplacementFN).
	СтруктураРезультат.Вставить("ПамятьФНПереполнена");            // Признак переполнения памяти ФН (MemoryOverflowFN).
	СтруктураРезультат.Вставить("РесурсФНИсчерпан");               // Признак исчерпания ресурса ФН (ResourcesExhaustionFN).
	
	Возврат СтруктураРезультат;
	
КонецФункции

Функция ТребуетсяЗакрытиеСмены(СтатусСмены) Экспорт
	
	Если СтатусСмены = 0 или СтатусСмены = 1 Тогда // неопределено или закрыта
		Возврат Ложь;
	ИначеЕсли СтатусСмены = 2 или СтатусСмены = 3 Тогда // открыта или истекла
		Возврат Истина;
	Иначе
		ТекстОшибки = НСтр("ru = 'Неизвестный статус смены'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
КонецФункции

#КонецОбласти